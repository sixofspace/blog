{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"source/images/列表总结.png","path":"images/列表总结.png","modified":0,"renderable":0},{"_id":"source/images/图片属性.png","path":"images/图片属性.png","modified":0,"renderable":0},{"_id":"source/images/基本结构.png","path":"images/基本结构.png","modified":0,"renderable":0},{"_id":"source/images/格式化标签.png","path":"images/格式化标签.png","modified":0,"renderable":0},{"_id":"source/images/浏览器内核.png","path":"images/浏览器内核.png","modified":0,"renderable":0},{"_id":"source/images/特殊字符.png","path":"images/特殊字符.png","modified":0,"renderable":0},{"_id":"source/images/表单其他属性.png","path":"images/表单其他属性.png","modified":0,"renderable":0},{"_id":"source/images/表单常用属性.png","path":"images/表单常用属性.png","modified":0,"renderable":0},{"_id":"source/images/表单标签.png","path":"images/表单标签.png","modified":0,"renderable":0},{"_id":"source/images/路径.png","path":"images/路径.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hwk.md","hash":"b2a17e2170174639cc8cbfb2f8d41f67db3f3189","modified":1621389029680},{"_id":"source/_posts/css基础/03.png","hash":"22dcae452d3362202c6b72f7e37e6460af253a8c","modified":1621393605137},{"_id":"source/_posts/css基础/01.png","hash":"08bcca4a5c575331e5811d02ae3b4c008bb3e339","modified":1621393605110},{"_id":"source/_posts/css基础/05.png","hash":"77894e296f8e7456696715c39a5b92b14fe139fc","modified":1621393605111},{"_id":"source/_posts/css基础/02.png","hash":"969a410fb914d4a02e59543d125214459caa021a","modified":1621393605137},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1621389029649},{"_id":"source/_posts/css基础/06.png","hash":"c6a09d89c687f78dff9f1d992b8e7cd8e0452898","modified":1621393605111},{"_id":"source/_posts/css基础/12_zindex示意图.png","hash":"138e7c9f6165aa14d2a4ea260c6f55d655045849","modified":1621404442451},{"_id":"source/_posts/css基础/1570868845786.png","hash":"1ebf780f5f12cc26ac3bc80c716d7f5733306faa","modified":1621393605111},{"_id":"source/_posts/css基础/1570868891669.png","hash":"73acfa63796033e272af5b80c56bbaa7b8fdd1d1","modified":1621393605111},{"_id":"source/_posts/css基础/1.png","hash":"164dff5dc3b824740f24d6ddae258f45257efb1f","modified":1621404217749},{"_id":"source/_posts/css基础/1570870368253.png","hash":"2b29b81a9411d7fcf66ee4822d91d1d49c082c0f","modified":1621393605112},{"_id":"source/_posts/css基础/1570870387089.png","hash":"abb6767d9e66176db97d2d854a1a87d1a6bf66b4","modified":1621393605133},{"_id":"source/_posts/css基础/1570870718415.png","hash":"9caf1f7513975d1011937766f39a844d16a94502","modified":1621393605133},{"_id":"source/_posts/css基础/1570886137899.png","hash":"ceaf8bb23446ee1111099df9053f70baae5b2535","modified":1621393605133},{"_id":"source/_posts/css基础/1570886176292.png","hash":"191623636e55f95d39bd51d606b2cc2cf95532f3","modified":1621393605134},{"_id":"source/_posts/css基础/1570886322557.png","hash":"3006076a1fab68776fd5872c121b0a1f27ab456c","modified":1621393605133},{"_id":"source/_posts/css基础/1570886362813.png","hash":"d3a620a1b3d6d9157d684de36d402e5348c52fd6","modified":1621393605134},{"_id":"source/_posts/css基础/1570886648887.png","hash":"c53544e86b80f4cd3fcc50563aa20f6db4965d18","modified":1621393605134},{"_id":"source/_posts/css基础/1570886688306.png","hash":"33a7a00890e7eeb10b10c589650b93cb94edf0c4","modified":1621393605134},{"_id":"source/_posts/css基础/1570886973530.png","hash":"3d88d67609f04fc3017701dcc942664058c79593","modified":1621393605134},{"_id":"source/_posts/css基础/1570887034135.png","hash":"a9c7425c5226fcdea49442e71990f17de6f0a4b5","modified":1621393605135},{"_id":"source/_posts/css基础/1570887652404.png","hash":"47c9d1175dc37bb374e5de3ca4332e1f21583226","modified":1621393605135},{"_id":"source/_posts/css基础/1570887699177.png","hash":"f5a863f4891e4a5b5acc28e5f6f2b471639f4bd9","modified":1621393605135},{"_id":"source/_posts/css基础/1570887978061.png","hash":"99bc469a5dbc0b3ff0ae16a05583b473dbea1aee","modified":1621393605135},{"_id":"source/_posts/css基础/1570887809455.png","hash":"ee2ddedd49a5c0a02c474dd81ecd0a8cfc6a2e79","modified":1621393605135},{"_id":"source/_posts/css基础/1571299959992.png","hash":"343114da5200df73e8418508817f1926c790a758","modified":1621404217764},{"_id":"source/_posts/css基础/1571301270696.png","hash":"e01b5d5404fc544d5e2a0c9c0a94464ad2a34759","modified":1621404217764},{"_id":"source/_posts/css基础/1571301357818.png","hash":"c14dd07408d3e5da168ca969092f0d4be0cbf755","modified":1621404217748},{"_id":"source/_posts/css基础/1571302032310.png","hash":"2485fddfdd7bed98b5037286095624aecd0cdee7","modified":1621404217764},{"_id":"source/_posts/css基础/1571302286467.png","hash":"921e78335aa30dc0dd64c3f6b28f1f6b4dab2a15","modified":1621404217748},{"_id":"source/_posts/css基础/1571300150618.png","hash":"4be997b766218badbdbe7e741e17812f72c51112","modified":1621404217766},{"_id":"source/_posts/css基础/1571305757590.png","hash":"a73795e58b13277bd91be8462d4fd1c6518727f3","modified":1621404217763},{"_id":"source/_posts/css基础/1571314623135.png","hash":"c1cfb73a6531adb34ab53b876460ff61b33bced4","modified":1621404217762},{"_id":"source/_posts/css基础/1571307430101.png","hash":"2ff673483d9e8a5349387a18a1e9fbd54d671674","modified":1621404217762},{"_id":"source/_posts/css基础/1571314874385.png","hash":"5c33570c5ffa750f71a9625711750f2c4e84c2a1","modified":1621404217763},{"_id":"source/_posts/css基础/1571388901848.png","hash":"c8dd0ed852802fb4509ef274ee408957b1e44696","modified":1621404442451},{"_id":"source/_posts/css基础/1571389108805.png","hash":"17c5371befba6875b4ffe04cf55768316d3e5b33","modified":1621404442451},{"_id":"source/_posts/css基础/1571389241926.png","hash":"f8a70993be7a164fcddccd84c90a84a450384362","modified":1621404442451},{"_id":"source/_posts/css基础/1571397019689.png","hash":"f2ec7d78ed301f51621526ce4fd0853e4703444b","modified":1621404442452},{"_id":"source/_posts/css基础/1571490015544.png","hash":"def341d44a751d3f1108b4f69c2886a6835bb126","modified":1621403400170},{"_id":"source/_posts/css基础/1571490049279.png","hash":"a76abeaa8de57b59fe345259a689539d7ee6cc39","modified":1621403400170},{"_id":"source/_posts/css基础/1571490129794.png","hash":"e624e91603ae8b84d5b9525e985ef2521ca0d7af","modified":1621403400171},{"_id":"source/_posts/css基础/1571492659260.png","hash":"6eedeabe03693af2936605057839c7ac231ffed1","modified":1621403400171},{"_id":"source/_posts/css基础/1571493260536.png","hash":"e0ce15fceec89c3878657b569037e214f29cfaff","modified":1621403400182},{"_id":"source/_posts/css基础/1571493741272.png","hash":"7d6d62512ed68a53cd570a62acd7d13f132e429d","modified":1621403400183},{"_id":"source/_posts/css基础/1571494239103.png","hash":"ec3af3851d92214d3c01cdf9f4e5d0e6dbe057f8","modified":1621403400183},{"_id":"source/_posts/css基础/1571494373778.png","hash":"b3425c2f7dceddb28ff81c41f23975fa31197340","modified":1621403400183},{"_id":"source/_posts/css基础/1571519724473.png","hash":"00e76f4b0cae097c56a5c02dffc75a4179321f79","modified":1621404795460},{"_id":"source/_posts/css基础/1571519739775.png","hash":"aea49619d708c9170249bc831a6c42850cbd6e69","modified":1621404795460},{"_id":"source/_posts/css基础/1571520092646.png","hash":"84dc682e594b0222b15f36198bb3a4fa92e78a6a","modified":1621404795460},{"_id":"source/_posts/css基础/1571520411345.png","hash":"b348f6fee43b7a79bd2113fffa8a9af5ca7d1dd9","modified":1621404795461},{"_id":"source/_posts/css基础/1571520965966.png","hash":"95bb003673e50867c37b82de9ce41cb1a615e9b9","modified":1621404795463},{"_id":"source/_posts/css基础/1571521183026.png","hash":"30cfcf0cd382a7d36cc6b418088e8a0c20c3ae93","modified":1621404795464},{"_id":"source/_posts/css基础/1571521805183.png","hash":"f824423845e96b9bf4735042e8a743576031cf33","modified":1621404795465},{"_id":"source/_posts/css基础/1571522023413.png","hash":"4e4db71cd1ded971a9f823c983946f8f9f5c1bef","modified":1621404795464},{"_id":"source/_posts/css基础/1571522040645.png","hash":"3fbb054d5459f60ffb869fa74e78ecb9dd2b9c03","modified":1621404795465},{"_id":"source/_posts/css基础/1571522093729.png","hash":"8d816b185b36df97d6994110e873b66cab5794ed","modified":1621404795466},{"_id":"source/_posts/css基础/1571522317809.png","hash":"4e2532be7a52a6e2f513a2e7532253150efdb4ab","modified":1621404795466},{"_id":"source/_posts/css基础/1571522334591.png","hash":"d655eba1fcd5854386c57185de64ae94430e015e","modified":1621404795466},{"_id":"source/_posts/css基础/1571522683897.png","hash":"2126318fe6ee9be3d6e616d40041ee20be74d49a","modified":1621404795466},{"_id":"source/_posts/css基础/1571522761996.png","hash":"c635ea7665f388945bc3916a4ef5f82d5e4cdda9","modified":1621404795466},{"_id":"source/_posts/css基础/1571522898744.png","hash":"9d174035204de13a8bc870208fd5b40b44bf2efc","modified":1621404795467},{"_id":"source/_posts/css基础/04.png","hash":"aa52ae9c2b8129b67931e689dc4c6ec813ad1cbc","modified":1621393605137},{"_id":"source/_posts/css基础/1571522910580.png","hash":"ac702c72d85506ecbb37a54cea16b1b1e66facc0","modified":1621404795467},{"_id":"source/_posts/css基础/1571541874805.png","hash":"47d1ff271ddad30fb215c81641934004d633c35d","modified":1621403648826},{"_id":"source/_posts/css基础/1571541954222.png","hash":"30d2d17d5e4e4ca8a1485a163c06d060f2805308","modified":1621403648816},{"_id":"source/_posts/css基础/1571544664994.png","hash":"465818b3d6682bc6e20cc63a62cc1e38f938fe85","modified":1621403648816},{"_id":"source/_posts/css基础/1571543209934.png","hash":"b718f3f2819299a00c585211042e4dc9859f6bfd","modified":1621403648816},{"_id":"source/_posts/css基础/1571544725757.png","hash":"e41c92d0bdc149aba267daef758a1fa92c8b0e2c","modified":1621403648816},{"_id":"source/_posts/css基础/1571548058053.png","hash":"825b2e6dcbb21a96e26821cf927c3994bbd4051a","modified":1621404795467},{"_id":"source/_posts/css基础/1571548099631.png","hash":"dd0d12feb618e2d64a5c072be83141cef9367122","modified":1621404795467},{"_id":"source/_posts/css基础/1571550959181.png","hash":"7e59d0d931aa58eb6e3e82774f1be85ed6dabe4a","modified":1621404795467},{"_id":"source/_posts/css基础/1571551000391.png","hash":"10966ed80bc31cc5af50fee45a4121ecdf33057d","modified":1621404795467},{"_id":"source/_posts/css基础/1571555883628.png","hash":"d730e4b7bc9885ea79a583f5392daf709fc84ce4","modified":1621403648826},{"_id":"source/_posts/css基础/1571555980419.png","hash":"5a88ecc704c27d94a03358d99f17dfa954051492","modified":1621403648826},{"_id":"source/_posts/css基础/1571544991989.png","hash":"4fa741a023a40963521c5c394116ae232c043fc4","modified":1621403648826},{"_id":"source/_posts/css基础/26定位的概念.png","hash":"294a87184414565894612045c2321d5954fd7f14","modified":1621404442449},{"_id":"source/_posts/html基础.md","hash":"6f707de179074b5dde67b9b50a9b8aaeebb81ab8","modified":1621389029649},{"_id":"source/_posts/css基础/29none.png","hash":"967c19b438f887a71d867d904cfab037998f0665","modified":1621404442452},{"_id":"source/_posts/css基础/27子绝父相.png","hash":"b05b532b06d2cf4bfc5256ea9e796c07a47d71b0","modified":1621404442450},{"_id":"source/_posts/css基础/3.png","hash":"7a7e9197683cee614f4915c4eb5f22f7723cc0c2","modified":1621404217766},{"_id":"source/_posts/css基础/33overflow.png","hash":"58009078e30d8e414842eec93a3caacd86f244f6","modified":1621404442480},{"_id":"source/_posts/css基础/30visibility.png","hash":"45dcc0a08e6b3f7db1a349511fd87fe156e14e4d","modified":1621404442453},{"_id":"source/_posts/css基础/5.png","hash":"6fce6c8352af57abd8972671a1d59146d967a9f1","modified":1621404217763},{"_id":"source/_posts/css基础/6.png","hash":"df51e42126c4119863078f52f1e22b610a673191","modified":1621404217763},{"_id":"source/_posts/css基础/css属性规则.png","hash":"f255ecc61cd187fbe5ec66e8891a726ac2eb8d41","modified":1621391021569},{"_id":"source/_posts/css基础/css引入方式总结.png","hash":"4f8d3002211bfab189fa398542a8832d8f364f36","modified":1621391021572},{"_id":"source/_posts/css基础/修饰文本.png","hash":"8db369a3fbcf62f95b20d83677c9181ef46757be","modified":1621391021571},{"_id":"source/_posts/css基础/字体总结.png","hash":"9948ec2f1afce86f4113b2c2234beff8140a5f19","modified":1621391021571},{"_id":"source/_posts/css基础/字体粗细.png","hash":"87eceb9c19a601876532992e03c2c286896bfe2b","modified":1621391021569},{"_id":"source/_posts/css基础/对齐文本.png","hash":"960c15c8b1d4d0374836a8d371eced1cc1c20255","modified":1621391021571},{"_id":"source/_posts/css基础/文字倾斜.png","hash":"14e5c7683688db74750fddd6a722d62e6e8dbdb3","modified":1621391021570},{"_id":"source/_posts/css基础/文本缩进.png","hash":"b7415fd9bb9660b27eb4bfdc31b806a325610c4a","modified":1621391021571},{"_id":"source/_posts/css基础/颜色值.png","hash":"064b90c27e6e8b3cb21a05a1d7c0f773741bdd43","modified":1621391021570},{"_id":"source/_posts/html基础/图片属性.png","hash":"987ef1117511284a5aa2f2f093b19ed30a807525","modified":1621389029649},{"_id":"source/_posts/html基础/列表总结.png","hash":"259856e562cbfa1eb8b623fdc81c2046506bf222","modified":1621389029649},{"_id":"source/_posts/html基础/格式化标签.png","hash":"86c9dfe7f4e69a69978a9db0eeec6ece5a42df30","modified":1621389029665},{"_id":"source/_posts/html基础/浏览器内核.png","hash":"39e2d681a32d4809c641503278dcb6f8d07785d2","modified":1621389029665},{"_id":"source/_posts/html基础/特殊字符.png","hash":"4e9198220e444b009bfb8563bcd3eafc3547b7aa","modified":1621389029665},{"_id":"source/_posts/html基础/表单常用属性.png","hash":"7a6891273ac18b3447805a04e1cca7470e08fbd1","modified":1621389029665},{"_id":"source/_posts/html基础/表单标签.png","hash":"ff5f27dccab6a630d0dbae870be830f232c2f130","modified":1621389029665},{"_id":"source/_posts/html基础/路径.png","hash":"7d90d80adac71038d357e06aba49f276fdc0070b","modified":1621389029665},{"_id":"source/_posts/images/图片属性.png","hash":"987ef1117511284a5aa2f2f093b19ed30a807525","modified":1621389029680},{"_id":"source/_posts/images/列表总结.png","hash":"259856e562cbfa1eb8b623fdc81c2046506bf222","modified":1621389029680},{"_id":"source/_posts/images/格式化标签.png","hash":"86c9dfe7f4e69a69978a9db0eeec6ece5a42df30","modified":1621389029680},{"_id":"source/_posts/css基础/1571556500074.png","hash":"b8d648b3ae2f6ca272b3bb6d7a2f01ef8985a5e3","modified":1621403648828},{"_id":"source/_posts/images/浏览器内核.png","hash":"39e2d681a32d4809c641503278dcb6f8d07785d2","modified":1621389029680},{"_id":"source/about/index.md","hash":"5effe92a78c846b4f3436e0a1daf4f7ff68d8f73","modified":1621389029696},{"_id":"source/_posts/images/特殊字符.png","hash":"4e9198220e444b009bfb8563bcd3eafc3547b7aa","modified":1621389029680},{"_id":"source/_posts/images/表单常用属性.png","hash":"7a6891273ac18b3447805a04e1cca7470e08fbd1","modified":1621389029696},{"_id":"source/_posts/images/表单标签.png","hash":"ff5f27dccab6a630d0dbae870be830f232c2f130","modified":1621389029696},{"_id":"source/images/列表总结.png","hash":"259856e562cbfa1eb8b623fdc81c2046506bf222","modified":1621389029696},{"_id":"source/images/图片属性.png","hash":"987ef1117511284a5aa2f2f093b19ed30a807525","modified":1621389029711},{"_id":"source/_posts/images/路径.png","hash":"7d90d80adac71038d357e06aba49f276fdc0070b","modified":1621389029696},{"_id":"source/images/格式化标签.png","hash":"86c9dfe7f4e69a69978a9db0eeec6ece5a42df30","modified":1621389029711},{"_id":"source/images/浏览器内核.png","hash":"39e2d681a32d4809c641503278dcb6f8d07785d2","modified":1621389029711},{"_id":"source/images/特殊字符.png","hash":"4e9198220e444b009bfb8563bcd3eafc3547b7aa","modified":1621389029711},{"_id":"source/_posts/css基础.md","hash":"fee7ca99862879236c66bc390c5ecec574634663","modified":1621404935481},{"_id":"source/images/表单常用属性.png","hash":"7a6891273ac18b3447805a04e1cca7470e08fbd1","modified":1621389029727},{"_id":"source/_posts/css基础/10_绝对定位水平居中.png","hash":"197b2422dfecdbce5eaf8d21802c9188215a86b0","modified":1621404442483},{"_id":"source/_posts/css基础/1570868930472.png","hash":"575653f4aa243f3582c10e64a51695df06b78f1a","modified":1621393605138},{"_id":"source/_posts/css基础/1570888283511.png","hash":"72f6b16f08f7e1c355ad5c80c7c09906998ebde1","modified":1621403298374},{"_id":"source/_posts/css基础/1571300529539.png","hash":"12c3100a7a4f261133270f80d1afa4b1fec9b65d","modified":1621404217764},{"_id":"source/_posts/css基础/1571303715362.png","hash":"9afa7563aae3816163a849d09a75300b214f4e8d","modified":1621404217766},{"_id":"source/_posts/css基础/1571385860679.png","hash":"62c83068522a588fa9985da6936680c8be3a519a","modified":1621404442482},{"_id":"source/_posts/css基础/1571482435259.png","hash":"4bd891c14d0f7b2200544b88d72904ca21becd45","modified":1621404796002},{"_id":"source/_posts/css基础/1571493298248.png","hash":"477c4c0610b42a01d2badd147248fab2846974de","modified":1621403400185},{"_id":"source/_posts/css基础/1571519067073.png","hash":"5f1068b7d54376ffd40f0599c0b80fd9ec332a01","modified":1621404795735},{"_id":"source/_posts/css基础/1571519368229.png","hash":"5ea01ef6105396acfa1154430cb96c7f282c3ec3","modified":1621404795736},{"_id":"source/_posts/css基础/1571520554317.png","hash":"4ba993496a1fb0572d2ffa9d9d01a5a6eb956159","modified":1621404795734},{"_id":"source/_posts/css基础/1571520485350.png","hash":"36e4d9224c686777703a5d6c290427e12b1547cc","modified":1621404795735},{"_id":"source/_posts/css基础/id与类名的区别.png","hash":"851aabe6025c8193267aeb18734e55676b69f2dd","modified":1621391021574},{"_id":"source/_posts/css基础/04_相对定位案例.png","hash":"4cfb52f08b9e56ac48646b7ffeec46f1c97e224e","modified":1621404442485},{"_id":"source/images/路径.png","hash":"7d90d80adac71038d357e06aba49f276fdc0070b","modified":1621389029727},{"_id":"source/images/表单标签.png","hash":"ff5f27dccab6a630d0dbae870be830f232c2f130","modified":1621389029727},{"_id":"source/_posts/css基础/11_绝对定位居中示意图.png","hash":"3253a418dd0ccfc2d7f7ed57f8e11255307ebfc1","modified":1621404442499},{"_id":"source/_posts/css基础/1571304358699.png","hash":"bc88b58ff30760af94646285afc6cbd6855b88f9","modified":1621404217772},{"_id":"source/_posts/css基础/1571522777745.png","hash":"dd886dec98dada604a65a93615d20811c49d9898","modified":1621404796005},{"_id":"source/_posts/css基础/淘宝网多类名.png","hash":"d2c4e33b77348748313aca2aad625cc41ee54da8","modified":1621391021588},{"_id":"source/_posts/html基础/表单其他属性.png","hash":"7a98eb968fd79953dc6f2b555810c9a638c6329a","modified":1621389029665},{"_id":"source/_posts/images/表单其他属性.png","hash":"7a98eb968fd79953dc6f2b555810c9a638c6329a","modified":1621389029696},{"_id":"source/images/表单其他属性.png","hash":"7a98eb968fd79953dc6f2b555810c9a638c6329a","modified":1621389029727},{"_id":"source/_posts/css基础/1571492536942.png","hash":"300c6a0108f5cb114ba80f7a940b994318b7aa29","modified":1621403400285},{"_id":"source/_posts/css基础/1571522666082.png","hash":"33a6ebe4a66c68c17c11d1ce070721bc3c545840","modified":1621404797516},{"_id":"source/_posts/css基础/小鸟.png","hash":"c9a2116825e8f32c4967b7b3b98214dfb30ba7f0","modified":1621391021591},{"_id":"source/_posts/css基础/文字环绕图片.png","hash":"f794ba40255e8b643a8bd75e732247d217d3967b","modified":1621404442499},{"_id":"source/_posts/css基础/08_固定定位案例.png","hash":"9c31caba8b8a4e4cc2c19288b5bd324dc7c17f30","modified":1621404442598},{"_id":"source/_posts/css基础/06_绝对定位_父级有定位.png","hash":"1b5c73bad3a55ba8d16a3c4bfd80f8feb0c61c7c","modified":1621404442674},{"_id":"source/_posts/css基础/05_绝对定位_父级无定位.png","hash":"f142a110e774d23e54e7d839e95b9de3a30b4bad","modified":1621404442596},{"_id":"themes/3-hexo/_config.yml","hash":"e5cbd5fb1ae647494eab5b1c3f30b830e0d54509","modified":1621389029743},{"_id":"themes/3-hexo/languages/en.yml","hash":"616e02c035c86033ab4a97c5ae9e0a9e5f0b8ea3","modified":1621389029743},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"83633d45420c96dfac41333aeac3f3616dca5286","modified":1621389029743},{"_id":"themes/3-hexo/.gitignore","hash":"46eca80fe689a00cbe4d015c094702af54119021","modified":1621389029727},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1621389029727},{"_id":"themes/3-hexo/README.md","hash":"19b8cfe6690c28427492f342e74dda5ed49a1664","modified":1621389029727},{"_id":"themes/3-hexo/layout/index.ejs","hash":"1c185288c2925a652d577965626718e12df07f65","modified":1621389029789},{"_id":"themes/3-hexo/layout/indexs.md","hash":"7804d0ea54f6d824cc5784773dc6d85d0f55e711","modified":1621389029789},{"_id":"themes/3-hexo/layout/post.ejs","hash":"a0eaba41e7ec9db5843af482470a45531049b457","modified":1621389029789},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"1c2f8b7d7cf46f219adb3a628bdf380f29ff4a6b","modified":1621389029868},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1621389029868},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1621389029868},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1621389029868},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1621389029883},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1621389029883},{"_id":"themes/3-hexo/source/css/style.styl","hash":"29fa7f6619519c2dcfec4efac4314c5af659a92a","modified":1621389029868},{"_id":"themes/3-hexo/source/js/script.js","hash":"36275888d57fecb6afd2c6f9291c46c2b3894ac5","modified":1621389029899},{"_id":"themes/3-hexo/source/js/search.js","hash":"788c610149a5f9361295f9f0207c8523f37ddb8b","modified":1621389029899},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"7299ac046ddd6e6a4267d435f7b4c8198baaaccc","modified":1621389029899},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"d18f94e04ef0cf7abb432a8e707ccb3abc7fe435","modified":1621389029743},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"9e5afcc26f47f93c165072b0a2b5cbf72efb7ef9","modified":1621389029743},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"9e1cdec49d5b9b44399348d96ecd7331f3ee7d85","modified":1621389029743},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"b2a01cc1f0326965f0a186ce3c9b3c991fd4e2c9","modified":1621389029758},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"9087af9647a87c3fa9ef87632de5427ba4abe9c4","modified":1621389029758},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"e6dd90be668195016d6e1c51a6baefb50676e6ab","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"60a085fab3165ea1fc6370abac0bd6ab1b2f2510","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"1e04b617fe38acca8b3d3774c5dbfcb74a02db6b","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"e2be0e37f3d48e63e65a47d819bfb800b9aa3784","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"ab6329ddd908b0567c18f39ac6a8553c6fec67c5","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"f3cc395fbb4e308776a38e369faefbc9e5891807","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"7942c661b48e15fced4a97acf86fac7fea013378","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"8704e6bd833d270cc6a494d4e7cf1dfeddedba40","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"33f7a4bfca1bb9835ec8f0d1e73188d1f56cc8b9","modified":1621389029774},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"4c09f47e899fe36bfe36d92b12996219c2b5f622","modified":1621389029758},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1621389029836},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1621389029836},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1621389029836},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1621389029836},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1621389029852},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1621389029852},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1621389029821},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1621389029821},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1621389029821},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1621389029868},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1621389029821},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1621389029821},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1621389029821},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1621389029821},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1621389029836},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"d5fa333970a2eac66937d42eeb16fdb362e121ed","modified":1621389029789},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f0eac1dc1f5dbed1769d032bb5fd5f002faaee26","modified":1621389029789},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1621389029836},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"02c7510a26f306e240f23ddbf772a69be2c890dd","modified":1621389029789},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"3db01e603985e6dbcacb6b0f13dbd804f5849e3c","modified":1621389029789},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"0a067ced25025000aa33c8f5017c87fff0971378","modified":1621389029805},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"9a732af065d0a80c9e420934be0f3582bf0129dc","modified":1621389029805},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"2620a02169a6aeb75137fd368eac2c36423d8498","modified":1621389029805},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"588b75e3b83ed95e526154bf3c0336c6f33e2be7","modified":1621389029805},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"f7ef35459ece22e1da950b86126be1c2bfe97fcf","modified":1621389029805},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"f1251e2a3b5334af3a22b51fc0293c2456568b50","modified":1621389029805},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"b6456a4eabcffd95e822d1d7adce96da524d481a","modified":1621389029836},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"05b09c45b379ffeb4f48c1604044d88829f90799","modified":1621389029743},{"_id":"source/_posts/css基础/1571522162225.png","hash":"6644c3913616b6bcf25f020d04c40dbb751f290c","modified":1621404796005},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"32ce7b48d366b9c888ff2ceb911a3cd82f864537","modified":1621389029758},{"_id":"source/_posts/css基础/土豆网案例.png","hash":"4620f7342f6f83c24f127f82588de0247332628b","modified":1621404442673},{"_id":"source/_posts/css基础/基础选择器总结.png","hash":"ab72f36f9b6430c2e484976d473957aff873a2c7","modified":1621391021767},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"01567e010cf4f2dd141fe2019490d3f0d5aa2529","modified":1621389029758},{"_id":"source/_posts/html基础/基本结构.png","hash":"54d9984e057b81201e3803de5cf75ad824ae0a25","modified":1621389029649},{"_id":"source/_posts/images/基本结构.png","hash":"54d9984e057b81201e3803de5cf75ad824ae0a25","modified":1621389029680},{"_id":"source/_posts/css基础/2.png","hash":"162b999ca42986931a48beabe05a3c1e377e8995","modified":1621404217947},{"_id":"source/images/基本结构.png","hash":"54d9984e057b81201e3803de5cf75ad824ae0a25","modified":1621389029711},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"eaf2b6f297282606b630ad55fb9e38af7e2829dc","modified":1621389029758},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1621389029868},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"8c2a4f10a4da3d9615a3a81542494c6d21479b3d","modified":1621389029899},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1621389029899},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"3dc58e9a3fd63a3144d5fe850eb55e3dc885c9fb","modified":1621389029836},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1621389029821},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"2d115e79cadedc2d5d8f4b5618559640d986e01f","modified":1621389029758},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"8f2d4f42fbad351677c82e72420224587a5bd666","modified":1621389029758},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1621389029852},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1621389029883},{"_id":"source/_posts/css基础/谷歌调试工具.png","hash":"d0fd9c5d072e6596d772d2e41e36a73d1d810977","modified":1621391021820},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"67984b83cd46ff4300d4fd959bf6c17dd66b4136","modified":1621389029899},{"_id":"source/_posts/css基础/ding.png","hash":"eb610bf449b5452d75590682cc9ce6471ea28656","modified":1621404443232},{"_id":"source/_posts/css基础/1571492334739.png","hash":"4a8db04c25c113843d897683bff24e9c6b83a55f","modified":1621403400524},{"_id":"source/_posts/css基础/字体图标加载的原理.gif","hash":"250cac9c13f2f9bf48703a71d90db466fbf06528","modified":1621404798253},{"_id":"source/_posts/css基础/4.png","hash":"16f8dbc7d25a0c3dfb97beead6be097cdc08ed71","modified":1621404218446},{"_id":"source/_posts/css基础/sample1.gif","hash":"14bbda266c92afdc423f030fd6da97b7c46c432b","modified":1621404218582},{"_id":"source/_posts/css基础/淘宝焦点图.png","hash":"6de4abb2559825c238ff0f4738f847b64ee40571","modified":1621404444540},{"_id":"source/_posts/css基础/07_子绝父相截图.png","hash":"951a88d2e4b1221641ac76efc8b9bd8f2a140d43","modified":1621404445108},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"a95b598d998c4723f978ed21614127150075bf40","modified":1621389029883},{"_id":"source/_posts/css基础/01_定位示例1.gif","hash":"8e3db9d01d59eb33936cd17b5e023e5bd389c052","modified":1621404446911},{"_id":"public/about/index.html","hash":"a9a6e895e72e97b2dba3f7dbdcfb9687c857e345","modified":1621405018796},{"_id":"public/2021/05/19/css基础/index.html","hash":"e754b0a4fbbc67290d3b48d3a2e605f58a0ec998","modified":1621405018796},{"_id":"public/2021/05/19/hello-world/index.html","hash":"552758983215499f422da6a5f775faabf5267a29","modified":1621405018796},{"_id":"public/2021/05/18/html基础/index.html","hash":"a12b0f0e2c5f803b5d368dda9344137e3838bdf4","modified":1621405018796},{"_id":"public/2021/05/14/hwk/index.html","hash":"50af2224ebd956597ae64ae657391ed0d36c179e","modified":1621405018796},{"_id":"public/archives/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/archives/2021/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/archives/2021/05/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/categories/工具/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/categories/前端/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/tags/hexo/index.html","hash":"e65044109734f80de155a14027040029c75808b1","modified":1621405018796},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1621405018796},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1621405018796},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1621405018796},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1621405018796},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1621405018796},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1621405018796},{"_id":"public/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1621405018796},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1621405018796},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1621405018796},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1621405018796},{"_id":"public/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1621405018796},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1621405018796},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1621405018796},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1621405018796},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1621405018796},{"_id":"public/images/列表总结.png","hash":"259856e562cbfa1eb8b623fdc81c2046506bf222","modified":1621405018796},{"_id":"public/images/图片属性.png","hash":"987ef1117511284a5aa2f2f093b19ed30a807525","modified":1621405018796},{"_id":"public/images/格式化标签.png","hash":"86c9dfe7f4e69a69978a9db0eeec6ece5a42df30","modified":1621405018796},{"_id":"public/images/浏览器内核.png","hash":"39e2d681a32d4809c641503278dcb6f8d07785d2","modified":1621405018796},{"_id":"public/images/特殊字符.png","hash":"4e9198220e444b009bfb8563bcd3eafc3547b7aa","modified":1621405018796},{"_id":"public/images/表单常用属性.png","hash":"7a6891273ac18b3447805a04e1cca7470e08fbd1","modified":1621405018796},{"_id":"public/images/表单标签.png","hash":"ff5f27dccab6a630d0dbae870be830f232c2f130","modified":1621405018796},{"_id":"public/images/路径.png","hash":"7d90d80adac71038d357e06aba49f276fdc0070b","modified":1621405018796},{"_id":"public/2021/05/18/html基础/图片属性.png","hash":"987ef1117511284a5aa2f2f093b19ed30a807525","modified":1621405018796},{"_id":"public/2021/05/18/html基础/格式化标签.png","hash":"86c9dfe7f4e69a69978a9db0eeec6ece5a42df30","modified":1621405018796},{"_id":"public/2021/05/18/html基础/浏览器内核.png","hash":"39e2d681a32d4809c641503278dcb6f8d07785d2","modified":1621405018796},{"_id":"public/2021/05/18/html基础/表单标签.png","hash":"ff5f27dccab6a630d0dbae870be830f232c2f130","modified":1621405018796},{"_id":"public/2021/05/18/html基础/表单常用属性.png","hash":"7a6891273ac18b3447805a04e1cca7470e08fbd1","modified":1621405018796},{"_id":"public/2021/05/18/html基础/路径.png","hash":"7d90d80adac71038d357e06aba49f276fdc0070b","modified":1621405018796},{"_id":"public/2021/05/19/css基础/01.png","hash":"08bcca4a5c575331e5811d02ae3b4c008bb3e339","modified":1621405018796},{"_id":"public/2021/05/19/css基础/02.png","hash":"969a410fb914d4a02e59543d125214459caa021a","modified":1621405018796},{"_id":"public/2021/05/18/html基础/特殊字符.png","hash":"4e9198220e444b009bfb8563bcd3eafc3547b7aa","modified":1621405018796},{"_id":"public/2021/05/19/css基础/03.png","hash":"22dcae452d3362202c6b72f7e37e6460af253a8c","modified":1621405018796},{"_id":"public/2021/05/19/css基础/04.png","hash":"aa52ae9c2b8129b67931e689dc4c6ec813ad1cbc","modified":1621405018796},{"_id":"public/2021/05/19/css基础/05.png","hash":"77894e296f8e7456696715c39a5b92b14fe139fc","modified":1621405018796},{"_id":"public/2021/05/19/css基础/06.png","hash":"c6a09d89c687f78dff9f1d992b8e7cd8e0452898","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1.png","hash":"164dff5dc3b824740f24d6ddae258f45257efb1f","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570868845786.png","hash":"1ebf780f5f12cc26ac3bc80c716d7f5733306faa","modified":1621405018796},{"_id":"public/2021/05/19/css基础/12_zindex示意图.png","hash":"138e7c9f6165aa14d2a4ea260c6f55d655045849","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570868891669.png","hash":"73acfa63796033e272af5b80c56bbaa7b8fdd1d1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570870368253.png","hash":"2b29b81a9411d7fcf66ee4822d91d1d49c082c0f","modified":1621405018796},{"_id":"public/2021/05/18/html基础/列表总结.png","hash":"259856e562cbfa1eb8b623fdc81c2046506bf222","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570870387089.png","hash":"abb6767d9e66176db97d2d854a1a87d1a6bf66b4","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570870718415.png","hash":"9caf1f7513975d1011937766f39a844d16a94502","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886137899.png","hash":"ceaf8bb23446ee1111099df9053f70baae5b2535","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886176292.png","hash":"191623636e55f95d39bd51d606b2cc2cf95532f3","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886322557.png","hash":"3006076a1fab68776fd5872c121b0a1f27ab456c","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886362813.png","hash":"d3a620a1b3d6d9157d684de36d402e5348c52fd6","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886648887.png","hash":"c53544e86b80f4cd3fcc50563aa20f6db4965d18","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886688306.png","hash":"33a7a00890e7eeb10b10c589650b93cb94edf0c4","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570886973530.png","hash":"3d88d67609f04fc3017701dcc942664058c79593","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570887034135.png","hash":"a9c7425c5226fcdea49442e71990f17de6f0a4b5","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570887652404.png","hash":"47c9d1175dc37bb374e5de3ca4332e1f21583226","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570887699177.png","hash":"f5a863f4891e4a5b5acc28e5f6f2b471639f4bd9","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570887809455.png","hash":"ee2ddedd49a5c0a02c474dd81ecd0a8cfc6a2e79","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570887978061.png","hash":"99bc469a5dbc0b3ff0ae16a05583b473dbea1aee","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571299959992.png","hash":"343114da5200df73e8418508817f1926c790a758","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571301270696.png","hash":"e01b5d5404fc544d5e2a0c9c0a94464ad2a34759","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571301357818.png","hash":"c14dd07408d3e5da168ca969092f0d4be0cbf755","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571302032310.png","hash":"2485fddfdd7bed98b5037286095624aecd0cdee7","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571302286467.png","hash":"921e78335aa30dc0dd64c3f6b28f1f6b4dab2a15","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571305757590.png","hash":"a73795e58b13277bd91be8462d4fd1c6518727f3","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571307430101.png","hash":"2ff673483d9e8a5349387a18a1e9fbd54d671674","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571314623135.png","hash":"c1cfb73a6531adb34ab53b876460ff61b33bced4","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571314874385.png","hash":"5c33570c5ffa750f71a9625711750f2c4e84c2a1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571389108805.png","hash":"17c5371befba6875b4ffe04cf55768316d3e5b33","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571300150618.png","hash":"4be997b766218badbdbe7e741e17812f72c51112","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571397019689.png","hash":"f2ec7d78ed301f51621526ce4fd0853e4703444b","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571389241926.png","hash":"f8a70993be7a164fcddccd84c90a84a450384362","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571490015544.png","hash":"def341d44a751d3f1108b4f69c2886a6835bb126","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571490049279.png","hash":"a76abeaa8de57b59fe345259a689539d7ee6cc39","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571492659260.png","hash":"6eedeabe03693af2936605057839c7ac231ffed1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571493260536.png","hash":"e0ce15fceec89c3878657b569037e214f29cfaff","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571493741272.png","hash":"7d6d62512ed68a53cd570a62acd7d13f132e429d","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571494239103.png","hash":"ec3af3851d92214d3c01cdf9f4e5d0e6dbe057f8","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571494373778.png","hash":"b3425c2f7dceddb28ff81c41f23975fa31197340","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571519724473.png","hash":"00e76f4b0cae097c56a5c02dffc75a4179321f79","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571519739775.png","hash":"aea49619d708c9170249bc831a6c42850cbd6e69","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571520092646.png","hash":"84dc682e594b0222b15f36198bb3a4fa92e78a6a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571520411345.png","hash":"b348f6fee43b7a79bd2113fffa8a9af5ca7d1dd9","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571520965966.png","hash":"95bb003673e50867c37b82de9ce41cb1a615e9b9","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571521183026.png","hash":"30cfcf0cd382a7d36cc6b418088e8a0c20c3ae93","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522023413.png","hash":"4e4db71cd1ded971a9f823c983946f8f9f5c1bef","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571521805183.png","hash":"f824423845e96b9bf4735042e8a743576031cf33","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522093729.png","hash":"8d816b185b36df97d6994110e873b66cab5794ed","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522040645.png","hash":"3fbb054d5459f60ffb869fa74e78ecb9dd2b9c03","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522317809.png","hash":"4e2532be7a52a6e2f513a2e7532253150efdb4ab","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522334591.png","hash":"d655eba1fcd5854386c57185de64ae94430e015e","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522683897.png","hash":"2126318fe6ee9be3d6e616d40041ee20be74d49a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522761996.png","hash":"c635ea7665f388945bc3916a4ef5f82d5e4cdda9","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522898744.png","hash":"9d174035204de13a8bc870208fd5b40b44bf2efc","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522910580.png","hash":"ac702c72d85506ecbb37a54cea16b1b1e66facc0","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571541874805.png","hash":"47d1ff271ddad30fb215c81641934004d633c35d","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571541954222.png","hash":"30d2d17d5e4e4ca8a1485a163c06d060f2805308","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571543209934.png","hash":"b718f3f2819299a00c585211042e4dc9859f6bfd","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571544664994.png","hash":"465818b3d6682bc6e20cc63a62cc1e38f938fe85","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571544725757.png","hash":"e41c92d0bdc149aba267daef758a1fa92c8b0e2c","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571544991989.png","hash":"4fa741a023a40963521c5c394116ae232c043fc4","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571548058053.png","hash":"825b2e6dcbb21a96e26821cf927c3994bbd4051a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571548099631.png","hash":"dd0d12feb618e2d64a5c072be83141cef9367122","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571550959181.png","hash":"7e59d0d931aa58eb6e3e82774f1be85ed6dabe4a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571551000391.png","hash":"10966ed80bc31cc5af50fee45a4121ecdf33057d","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571555883628.png","hash":"d730e4b7bc9885ea79a583f5392daf709fc84ce4","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571555980419.png","hash":"5a88ecc704c27d94a03358d99f17dfa954051492","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571556500074.png","hash":"b8d648b3ae2f6ca272b3bb6d7a2f01ef8985a5e3","modified":1621405018796},{"_id":"public/2021/05/19/css基础/26定位的概念.png","hash":"294a87184414565894612045c2321d5954fd7f14","modified":1621405018796},{"_id":"public/2021/05/19/css基础/27子绝父相.png","hash":"b05b532b06d2cf4bfc5256ea9e796c07a47d71b0","modified":1621405018796},{"_id":"public/2021/05/19/css基础/29none.png","hash":"967c19b438f887a71d867d904cfab037998f0665","modified":1621405018796},{"_id":"public/2021/05/19/css基础/3.png","hash":"7a7e9197683cee614f4915c4eb5f22f7723cc0c2","modified":1621405018796},{"_id":"public/2021/05/19/css基础/30visibility.png","hash":"45dcc0a08e6b3f7db1a349511fd87fe156e14e4d","modified":1621405018796},{"_id":"public/2021/05/19/css基础/33overflow.png","hash":"58009078e30d8e414842eec93a3caacd86f244f6","modified":1621405018796},{"_id":"public/2021/05/19/css基础/5.png","hash":"6fce6c8352af57abd8972671a1d59146d967a9f1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/css属性规则.png","hash":"f255ecc61cd187fbe5ec66e8891a726ac2eb8d41","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571490129794.png","hash":"e624e91603ae8b84d5b9525e985ef2521ca0d7af","modified":1621405018796},{"_id":"public/2021/05/19/css基础/css引入方式总结.png","hash":"4f8d3002211bfab189fa398542a8832d8f364f36","modified":1621405018796},{"_id":"public/2021/05/19/css基础/修饰文本.png","hash":"8db369a3fbcf62f95b20d83677c9181ef46757be","modified":1621405018796},{"_id":"public/2021/05/19/css基础/字体总结.png","hash":"9948ec2f1afce86f4113b2c2234beff8140a5f19","modified":1621405018796},{"_id":"public/2021/05/19/css基础/字体粗细.png","hash":"87eceb9c19a601876532992e03c2c286896bfe2b","modified":1621405018796},{"_id":"public/2021/05/19/css基础/对齐文本.png","hash":"960c15c8b1d4d0374836a8d371eced1cc1c20255","modified":1621405018796},{"_id":"public/2021/05/19/css基础/文字倾斜.png","hash":"14e5c7683688db74750fddd6a722d62e6e8dbdb3","modified":1621405018796},{"_id":"public/2021/05/19/css基础/文本缩进.png","hash":"b7415fd9bb9660b27eb4bfdc31b806a325610c4a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/颜色值.png","hash":"064b90c27e6e8b3cb21a05a1d7c0f773741bdd43","modified":1621405018796},{"_id":"public/2021/05/19/css基础/6.png","hash":"df51e42126c4119863078f52f1e22b610a673191","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571388901848.png","hash":"c8dd0ed852802fb4509ef274ee408957b1e44696","modified":1621405018796},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1621405018796},{"_id":"public/2021/05/19/css基础/10_绝对定位水平居中.png","hash":"197b2422dfecdbce5eaf8d21802c9188215a86b0","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570868930472.png","hash":"575653f4aa243f3582c10e64a51695df06b78f1a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1570888283511.png","hash":"72f6b16f08f7e1c355ad5c80c7c09906998ebde1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571300529539.png","hash":"12c3100a7a4f261133270f80d1afa4b1fec9b65d","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571303715362.png","hash":"9afa7563aae3816163a849d09a75300b214f4e8d","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571385860679.png","hash":"62c83068522a588fa9985da6936680c8be3a519a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571482435259.png","hash":"4bd891c14d0f7b2200544b88d72904ca21becd45","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571493298248.png","hash":"477c4c0610b42a01d2badd147248fab2846974de","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571519067073.png","hash":"5f1068b7d54376ffd40f0599c0b80fd9ec332a01","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571519368229.png","hash":"5ea01ef6105396acfa1154430cb96c7f282c3ec3","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571520485350.png","hash":"36e4d9224c686777703a5d6c290427e12b1547cc","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571520554317.png","hash":"4ba993496a1fb0572d2ffa9d9d01a5a6eb956159","modified":1621405018796},{"_id":"public/2021/05/19/css基础/id与类名的区别.png","hash":"851aabe6025c8193267aeb18734e55676b69f2dd","modified":1621405018796},{"_id":"public/css/mobile.css","hash":"5998f6fc27998596beb1e40e4bc3c43be2ed764c","modified":1621405018796},{"_id":"public/images/表单其他属性.png","hash":"7a98eb968fd79953dc6f2b555810c9a638c6329a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/11_绝对定位居中示意图.png","hash":"3253a418dd0ccfc2d7f7ed57f8e11255307ebfc1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/04_相对定位案例.png","hash":"4cfb52f08b9e56ac48646b7ffeec46f1c97e224e","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571304358699.png","hash":"bc88b58ff30760af94646285afc6cbd6855b88f9","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522162225.png","hash":"6644c3913616b6bcf25f020d04c40dbb751f290c","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522777745.png","hash":"dd886dec98dada604a65a93615d20811c49d9898","modified":1621405018796},{"_id":"public/2021/05/19/css基础/文字环绕图片.png","hash":"f794ba40255e8b643a8bd75e732247d217d3967b","modified":1621405018796},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1621405018796},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1621405018796},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1621405018796},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1621405018796},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1621405018796},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1621405018796},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1621405018796},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1621405018796},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1621405018796},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1621405018796},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1621405018796},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1621405018796},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1621405018796},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1621405018796},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1621405018796},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1621405018796},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1621405018796},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1621405018796},{"_id":"public/css/style.css","hash":"db3b1cc156de2bd7563399cf74eeabf9abde50a7","modified":1621405018796},{"_id":"public/2021/05/18/html基础/表单其他属性.png","hash":"7a98eb968fd79953dc6f2b555810c9a638c6329a","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571492536942.png","hash":"300c6a0108f5cb114ba80f7a940b994318b7aa29","modified":1621405018796},{"_id":"public/2021/05/19/css基础/小鸟.png","hash":"c9a2116825e8f32c4967b7b3b98214dfb30ba7f0","modified":1621405018796},{"_id":"public/2021/05/19/css基础/淘宝网多类名.png","hash":"d2c4e33b77348748313aca2aad625cc41ee54da8","modified":1621405018796},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1621405018796},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1621405018796},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1621405018796},{"_id":"public/2021/05/19/css基础/05_绝对定位_父级无定位.png","hash":"f142a110e774d23e54e7d839e95b9de3a30b4bad","modified":1621405018796},{"_id":"public/2021/05/19/css基础/06_绝对定位_父级有定位.png","hash":"1b5c73bad3a55ba8d16a3c4bfd80f8feb0c61c7c","modified":1621405018796},{"_id":"public/2021/05/19/css基础/08_固定定位案例.png","hash":"9c31caba8b8a4e4cc2c19288b5bd324dc7c17f30","modified":1621405018796},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1621405018796},{"_id":"public/js/script.js","hash":"d7efd27ade371c6e50d0d7481ffc0ec47018bad2","modified":1621405018796},{"_id":"public/2021/05/18/html基础/基本结构.png","hash":"54d9984e057b81201e3803de5cf75ad824ae0a25","modified":1621405018796},{"_id":"public/2021/05/19/css基础/基础选择器总结.png","hash":"ab72f36f9b6430c2e484976d473957aff873a2c7","modified":1621405018796},{"_id":"public/2021/05/19/css基础/土豆网案例.png","hash":"4620f7342f6f83c24f127f82588de0247332628b","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571522666082.png","hash":"33a6ebe4a66c68c17c11d1ce070721bc3c545840","modified":1621405018796},{"_id":"public/2021/05/19/css基础/2.png","hash":"162b999ca42986931a48beabe05a3c1e377e8995","modified":1621405018796},{"_id":"public/images/基本结构.png","hash":"54d9984e057b81201e3803de5cf75ad824ae0a25","modified":1621405018796},{"_id":"public/2021/05/19/css基础/谷歌调试工具.png","hash":"d0fd9c5d072e6596d772d2e41e36a73d1d810977","modified":1621405018796},{"_id":"public/2021/05/19/css基础/1571492334739.png","hash":"4a8db04c25c113843d897683bff24e9c6b83a55f","modified":1621405018796},{"_id":"public/2021/05/19/css基础/ding.png","hash":"eb610bf449b5452d75590682cc9ce6471ea28656","modified":1621405018796},{"_id":"public/2021/05/19/css基础/字体图标加载的原理.gif","hash":"250cac9c13f2f9bf48703a71d90db466fbf06528","modified":1621405018796},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1621405018796},{"_id":"public/2021/05/19/css基础/4.png","hash":"16f8dbc7d25a0c3dfb97beead6be097cdc08ed71","modified":1621405018796},{"_id":"public/2021/05/19/css基础/sample1.gif","hash":"14bbda266c92afdc423f030fd6da97b7c46c432b","modified":1621405018796},{"_id":"public/2021/05/19/css基础/淘宝焦点图.png","hash":"6de4abb2559825c238ff0f4738f847b64ee40571","modified":1621405018796},{"_id":"public/2021/05/19/css基础/07_子绝父相截图.png","hash":"951a88d2e4b1221641ac76efc8b9bd8f2a140d43","modified":1621405018796},{"_id":"public/js/gitalk.js","hash":"a75ead28e6a1fab2a006cc7332ca2d2e868ce8e1","modified":1621405018796},{"_id":"public/2021/05/19/css基础/01_定位示例1.gif","hash":"8e3db9d01d59eb33936cd17b5e023e5bd389c052","modified":1621405018796}],"Category":[{"name":"工具","_id":"ckov2oomo00049wrc02qz52ao"},{"name":"前端","_id":"ckov2oomr00069wrc7r33027c"}],"Data":[],"Page":[{"title":"about","date":"2021-05-16T03:41:03.000Z","_content":"# 暂无","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-05-16 11:41:03\n---\n# 暂无","updated":"2021-05-19T01:50:29.696Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckov2oolu00009wrce7rea3uh","content":"<h1 id=\"暂无\"><a href=\"#暂无\" class=\"headerlink\" title=\"暂无\"></a>暂无</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"暂无\"><a href=\"#暂无\" class=\"headerlink\" title=\"暂无\"></a>暂无</h1>"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-05-19T01:50:29.649Z","updated":"2021-05-19T01:50:29.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckov2oomg00019wrcfm3ya2m0","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hwk","date":"2021-05-14T08:54:07.000Z","_content":"\n# 流口水了思路老师\n\n","source":"_posts/hwk.md","raw":"---\ntitle: hwk\ndate: 2021-05-14 16:54:07\ncategories:\n- 工具\ntags:\n- hexo\n---\n\n# 流口水了思路老师\n\n","slug":"hwk","published":1,"updated":"2021-05-19T01:50:29.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckov2oomk00029wrcfghce4z1","content":"<h1 id=\"流口水了思路老师\"><a href=\"#流口水了思路老师\" class=\"headerlink\" title=\"流口水了思路老师\"></a>流口水了思路老师</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"流口水了思路老师\"><a href=\"#流口水了思路老师\" class=\"headerlink\" title=\"流口水了思路老师\"></a>流口水了思路老师</h1>"},{"title":"html基础","date":"2021-05-18T09:23:44.000Z","_content":"\n# HTML\n\n## 网页开发网页的相关概念:\n\n### 什么是网页：\n\n 1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。\n 2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。\n\n### 网页的组成：\n\n 1.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。\n\n### 什么是HTML：\n\n 1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。\n 2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。\n 标记语言是一套标记标签 (markup tag)。\n\n### 网页的总结：\n\n 1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)\n 2.网页生成制作:  有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.\n 3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…\n\n### 浏览器内核（渲染引擎）\n\n+  负责读取网页内容，整理讯息，计算网页的显示方式并显示页面\n   ![浏览器内核](html基础/浏览器内核.png)\n+  目前国内一般浏览器都会采用 Webkit/Blink 内核，如 360、UC、QQ、搜狗等。\n\n## web标准：\n\n+ Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。\n\n  ### 为什么需要Web标准：\n\n+ 浏览器不同，它们显示页面或者排版就有些许差异\n\n+ 遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：\n\n  1.让 Web 的发展前景更广阔。 \n  2.内容能被更广泛的设备访问。\n  3.更容易被搜寻引擎搜索。\n  4.降低网站流量费用。\n  5.使网站更易于维护。\n  6.提高页面浏览速度。\n\n  ### web标准的构成：\n\n  主要包括 《结构Structure》 、《表现（Presentation）》和《行为（Behavior）》三个方面。\n  Web 标准提出的最佳体验方案：**结构、样式、行为相分离**。  \n  简单理解：**结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中**\n\n  1.结构类似身体\n\n  2.表现类似外观装饰\n\n  3.行为类似行为动作\n\n  4.相比较而言, 三者中结构最重要.\n\n## HTML标签的导读：\n\n### HTML语法规则：\n\n​    1.HTML 标签是由尖括号包围的关键词，例如 \\html>。\n​    2.HTML 标签通常是成对出现的，例如 \\<html> 和 \\</html> ，我们称为**双标签**。\n​    3.签。标签对中的第一个标签是开始标签，第二个标签是结束标签。 \n有些特殊的标签必须是单个标签（极少情况），例如 \\<br />，我们称为**单标签**。\n\n### 标签的关系：\n\n 双标签关系可以分为两类：包含关系和并列关系\n 包含标签：\n\n```html\n<head>  \n  <title> </title> \n</head>\n```\n\n 并列关系：\n\n```\n  <head> </head>\n  <body> </body>\n```\n\n### 基本结构标签：\n\n​    每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写\n\n![基本结构](html基础/基本结构.png)\n\n### 开发工具-VSCode的简单使用：\n\n       1. 双击打开软件。\n          2. 新建文件（Ctrl + N ）。\n             3. 保存（Ctrl + S ）, 注意移动要保存为 .html 文件\n             4. Ctrl + 加号键 ，Ctrl + 减号键  可以放大缩小视图 \n             5. 生成页面骨架结构。 输入! 按下 Tab 键。\n             6. 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。\n                **DOCTYPE\n\n2.简单骨架生产类型：\n\na.\\<!DOCTYPE html>  文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.\n\nb.**lang 语言种类**\n    用来定义当前文档显示的语言。\n    en定义语言为英语\n    zh-CN定义语言为中文\n    简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页\n    其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文\n    这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的\nc.**字符集**\n    1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。\n    2.在\\head>标签内，可以通过\\<meta> 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。\n    3.\\<meta charset=\" UTF-8\" />\n    4.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.\n    5.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 \"UTF-8\"，不要写成  \"utf8\" 或 \"UTF8\"。\n\n ### 语义化标签：\n\n​    学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。\n###什么是语义化标签：\n​    根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。\n\n### 常用的标签：\n\n#### 标题标签\n\n​    **标题标签 \\<h1> - \\<h6>（重要)**\n​    为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即\\<h1> - \\<h6> 。\n​    具体实现：\n\n```\n   <h1> 我是一级标题 </h1>\n```\n\n​    特点：\n​    1.加了标题的文字会变的加粗，字号也会依次变大。\n\n    2. 一个标题独占一行。\n        来！！！左边。。。右边。。。中间：\n        \n        ```\n        <h1>标题一共六级选,</h1>\n        <h2>文字加粗一行显。</h2>\n        <h3>由大到小依次减，</h3>\n        <h4>从重到轻随之变。</h4>\n        <h5>语法规范书写后，</h5>\n        <h6>具体效果刷新见。</h6>\n        ```\n\n#### 段落标签：\n\n​    在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<p>标签用于定义段落，它可以将整个网页分为若干个段落。\n​    具体实现：\n​         \\<p> 我是一个段落标签 \\</p>\n​    特点：\n\n           1. 文本在一个段落中会根据浏览器窗口的大小自动换行。\n              落和段落之间保有空隙。\n\n#### 换行标签\n\n​    在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 \\<br />。\n​    具体实现：\n​         \\<br />\n​    特点：\n\n        1. <br /> 是个单标签。\n                2. <br /> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。\n\n#### 文本格式化标签：\n\n​    在网页中，有时需要为文字设置粗体、斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。\n![格式化标签](html基础/格式化标签.png)\n\n#### div和span标签\n\n```\n    <div> 和 <span> 是没有语义的，它们就是一个盒子，用来装内容的。\n    具体实现：\n        \n    </div>\n    <div> 这是头部 </div>    \n    <span> 今日价格 </span>\n```\n\n​    特点：\n\n              1.  &lt;div&gt;标签用来布局，但是现在一行只能放一个\\<div>。 大盒子\n                             2.\\<span> 标签用来布局，一行上可以多个 \\<span>。小盒子\n\n#### 图片标签：\n\n​    在 HTML 标签中，\\<img> 标签用于定义 HTML 页面中的图像。\n​    具体实现：\n​          <img src=\"图像URL\" />\n​    解释：\n​        src 是\\<img>标签的必须属性，它用于指定图像文件的路径和文件名。\n​        所谓属性：简单理解就是属于这个图像标签的特性。\n​    图像标签的其他属性：\n\n![图片属性](html基础/图片属性.png)\n\n 图像标签注意点：\n        1.图像标签可以拥有多个属性，必须写在标签名的后面。\n        2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\n        3.属性采取键值对的格式，即 key=“value\" 的格式，属性 =“属性值”。\n\n        3.属性采取键值对的格式，即 key=“value\" 的格式，属性 =“属性值”。\n\n#### 路径：\n\n​    分为相对路径和绝对路径：\n​        **路径之相对路径**\n​        相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。 \n​        这里简单来说，图片相对于 HTML 页面的位置\n\n​    特点：![路径](html基础/路径.png)\n​        相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。\n​        路径之绝对路径：\n​            绝对路径：\n​            1.是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。\n​            例如，“D:\\web\\img\\logo.gif”或完整的网络地址“http://www.itcast.cn/images/logo.gif”\n\n#### 链接标签：\n\n​     链接的语法格式\n​        \\<a href=\"跳转目标\" target=\"目标窗口的弹出方式\"> 文本或图像\\ \\</a>\n​    属性：\n​        1.href：用于指定链接目标的url地址\n​        2.target:用于指定链接页面的打开方式_self默认值 _blank新窗口打开\n​        3.#：空链接\n链接分类：\n​    1.外部链接: 例如 < a href=\"http:// www.baidu.com \"> 百度\\</a >。\n​    2.内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 < a href=\"index.html\"> 首页 \\</a >。\n​    3.空链接: 如果当时没有确定链接目标时，< a href=\"#\"> 首页 \\</a > 。\n​    4.下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。\n​    5.网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.\n​    6.锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置. \n\n  \t* 在链接文本的 href 属性中，设置属性值为 #名字 的形式，如&lt;a href=\"#two\"> 第2集 &lt;/a> \n  \t* 找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&lt;h3 id=\"two\">第2集介绍&lt;/h3>\n\n### 特殊字符：\n\n在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。\n\n![特殊字符](html基础/特殊字符.png)\n\n### 表格\n\n#### 表格的主要作用\n\n​    1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理\n\n​\t2.表格不是用来布局页面的,而是用来展示数据的。\n\n​    3.表格的具体用法：\n\n```\n         <table>\n            <tr>\n                <td>单元格内的文字</td>\n                ...\n            </tr>\n            ...\n        </table>\n        1.<table> </table> 是用于定义表格的标签。\n        2.<tr> </tr> 标签用于定义表格中的行，必须嵌套在 <table> </table>标签中。\n        3.<td> </td> 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。\n        4.字母 td 指表格数据（table data），即数据单元格的内容。\n```\n\n#### 表头单元格标签：\n\n```\n        表头标签的具体实现：\n         <table>\n            <tr>\n                <th>姓名</th>\n                ...\n            </tr>\n            ...\n        </table>\n        1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            <th> 标签表示 HTML 表格的表头部分(table head 的缩写)\n        2.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            <th> 标签表示 HTML 表格的表头部分(table head 的缩写)\n   \t\t3.表头单元格也是单元格，常用于表格第一行突出重要性，表头单元格里面的文字会加粗居中\n```\n\n#### 表格属性：\n\n​    1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.\n\n#### 表格结构标签：\n\n​    使用场景:\n​        因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.在表格标签中，分别用：\\<thead>标签 表格的头部区域、\\<tbody>标签 表格的主体区域. 这样可以更好的分清表格结构。\n\n```\n总结:\n    1. <thead></thead>：用于定义表格的头部。<thead> 内部必须拥有 <tr> 标签。 一般是位于第一行。\n    2. <tbody></tbody>：用于定义表格的主体，主要用于放数据本体 。\n    3.  以上标签都是放在 <table></table> 标签中。\n```\n\n#### 合并单元格：\n\n​    特殊情况下,可以把多个单元格合并为一个单元格,  这里同学们会最简单的合并单元格即可.\n​    1.合并单元格方式\n​    2.目标单元格\n​    3.合并单元格的步骤\n\n**合并单元格方式：**\n\n**跨行合并**：rowspan=\"合并单元格的个数\"     \n\n​\t最上侧单元格为目标单元格, 写合并代码\n\n **跨列合并**：colspan=\"合并单元格的个数\"\n\n​\t最左侧单元格为目标单元格, 写合并代码\n\n**合并单元格三步曲：**\n\n先确定是跨行还是跨列合并。\n\n找到目标单元格. 写上合并方式 = 合并的单元格数量。\n\n比如：\\<td colspan=\"2\">\\</td>。删除多余的单元格。\n\n**表格总结**\n\n​\t表格学习整体可以分为三大部分:\n\n**表格的相关标签**\n\n​\ttable   thead  body  tr  th  td \n\n**表格的相关属性**\n\n​\tcellspacing    cellpadding     width  height  border \n\n**合并单元格**\n\n​\t  rowspan   collspan\n\n### 列表\n\n​    表格是用来显示数据的，那么列表就是用来布局的。 \n​    列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。\n​    根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。\n\n#### 无序：\n\n`<ul>` 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 \\<li> 标签定义。\n\n无序列表的基本语法格式如下：\n\n```\n<ul> \n <li>列表项1</li>   <li>列表项2</li>   <li>列表项3</li>   ... \n</ul>\n\n1. 无序列表的各个列表项之间没有顺序级别之分，是并列的。\n\n2. <ul></ul> 中只能嵌套 <li></li>，直接在 <ul></ul> 标签中输入其他标签或者文字的做法是不被允许的。\n\n3. <li> 与 </li> 之间相当于一个容器，可以容纳所有元素。\n\n4. 无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。\n```\n\n#### 有序：\n\n有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，\\<ol> 标签用于定义有序列表，列表排序以数字来显示，并且使用 \\<li> 标签来定义列表项。有序列表的基本语法格式如下：\n\n```\n<ol>   \n    <li>列表项1</li>   \n    <li>列表项2</li>   \n    <li>列表项3</li>   ... \n</ol>\n\n1. <ol></ol>中只能嵌套<li></li>，直接在<ol></ol>标签中输入其他标签或者文字的做法是不被允许的。\n\n2. <li> 与 </li>之间相当于一个容器，可以容纳所有元素。\n\n3. 有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。\n```\n\n#### 自定义列表：\n\n自定义列表的使用场景:自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，\\<dl> 标签用于定义描述列表（或定义列表），该标签会与 \\<dt>（定义项目/名字）和 \\<dd>（描述每一个项目/名字）一起使用。语法如下：\n\n```\n <dl>   \n     <dt>名词1</dt>   \n     <dd>名词1解释1</dd>   \n     <dd>名词1解释2</dd> \n </dl>\n```\n\n#### 列表总结\n\n![列表总结](html基础/列表总结.png)\n\n### 表单\n\n#### 为什么需要表单：\n\n​    使用表单目的是为了收集用户信息。\n​    在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。\n\n#### 表单的组成：\n\n​    在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。\n\n#### 表单域：\n\n​    表单域是一个包含表单元素的区域。\n​    在 HTML 标签中， \\<form> 标签用于定义表单域，以实现用户信息的收集和传递。\n\n```\n <form> 会把它范围内的表单元素信息提交给服务器.\n    实现代码：\n <form action=“url地址” method=“提交方式” name=“表单域名称\">各种表单元素控件</form>\n```\n\n#### 表单域的常用属性：\n\n![表单常用属性](html基础/表单常用属性.png)\n\n这里只需要记住两点:\n1.在我们写表单元素之前,应该有个表单域把他们进行包含.\n2.表单域是 form标签.\n\n#### 表单控件(表单元素)\n\n \\<input> 表单元素\n\n在英文单词中，input 是输入的意思，而在表单元素中 \\<input> 标签用于收集用户信息。在 \\<input> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。\n\n\\<input type=\"属性值\"  />\n\n\\<input /> 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型\n\ntype 属性的属性值及其描述如下：\n\n![表单标签](html基础/表单标签.png)\n\n除 type 属性外，\\<input>标签还有其他很多属性，其常用属性如下：\n\n![表单其他属性](html基础/表单其他属性.png)\n\n1. name 和value 是每个表单元素都有的属性值,主要给后台人员使用. \n2. name 表单元素的名字, 要求 单选按钮和复选框要有相同的name值.\n3. checked属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以默认选中某个表单元素. \n4. maxlength 是用户可以在表单元素输入的最大字符数, 一般较少使用.\n\n#### \\<label> 标签\n\n\\<label> 标签为 input 元素定义标注（标签）。\n\\<label> 标签用于绑定一个表单元素, 当点击\\<label> 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.\n语法：\n     \\<label for=\"sex\">男\\</label>\n    \\<input type=\"radio\" name=\"sex\"  id=\"sex\" />\n    核心： \\<label> 标签的 for 属性应当与相关元素的 id 属性相同。\n\n#### \\<select> 表单元素\n\n使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用\\<select>标签控件定义下拉列表。\n\n```\n语法： \n<select>\n   <option>选项1</option>\n   <option>选项2</option>\n   <option>选项3</option>\n   ...\n </select>\n```\n\n#### \\<textarea> 表单元素\n\n1. 使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 \\<textarea> 标签。\n2. 在表单元素中，\\<textarea> 标签是用于定义多行文本输入的控件。\n3. 使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。\n\n语法：\n\n​\t\\<textarea rows=\"3\" cols=\"20\">   文本内容 \\</textarea>\n\n通过 \\<textarea> 标签可以轻松地创建多行文本输入框。cols=“每行中的字符数” ，rows=“显示的行数”，\n\n我们在实际开发中不会使用，都是用 CSS 来改变大小。\n\n表单元素我们学习了三大组  input 输入表单元素  select 下拉表单元素  textarea 文本域表单元素.这三组表单元素都应该包含在form表单域里面,并且有 name 属性.\n\n具体代码：\n\n​\t\\<form>\n\n​\t\t<input type=“text \" name=“username”>\n\n​\t\t\\<select name=\"jiguan\">  \n\n​\t\t \\<option>北京\\</option>\n\n​\t\t\\</select> \n\n​\t\t\\<textarea name= \"message\">\n\n​\t\t\\</textarea>\n\n​\t\\</form>\n\n1. 有三个名字非常相似的标签:\n\n- 表单域   form    使用场景:  提交区域内表单元素给后台服务器\n- 文件域   file      是input type 属性值   使用场景: 上传文件\n- 文本域   textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等…\n\n2. 我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.\n\n","source":"_posts/html基础.md","raw":"---\ntitle: html基础\ndate: 2021-05-18 17:23:44\ncategories:\n- 前端\ntags:\n---\n\n# HTML\n\n## 网页开发网页的相关概念:\n\n### 什么是网页：\n\n 1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。\n 2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。\n\n### 网页的组成：\n\n 1.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。\n\n### 什么是HTML：\n\n 1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。\n 2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。\n 标记语言是一套标记标签 (markup tag)。\n\n### 网页的总结：\n\n 1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)\n 2.网页生成制作:  有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.\n 3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…\n\n### 浏览器内核（渲染引擎）\n\n+  负责读取网页内容，整理讯息，计算网页的显示方式并显示页面\n   ![浏览器内核](html基础/浏览器内核.png)\n+  目前国内一般浏览器都会采用 Webkit/Blink 内核，如 360、UC、QQ、搜狗等。\n\n## web标准：\n\n+ Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。\n\n  ### 为什么需要Web标准：\n\n+ 浏览器不同，它们显示页面或者排版就有些许差异\n\n+ 遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：\n\n  1.让 Web 的发展前景更广阔。 \n  2.内容能被更广泛的设备访问。\n  3.更容易被搜寻引擎搜索。\n  4.降低网站流量费用。\n  5.使网站更易于维护。\n  6.提高页面浏览速度。\n\n  ### web标准的构成：\n\n  主要包括 《结构Structure》 、《表现（Presentation）》和《行为（Behavior）》三个方面。\n  Web 标准提出的最佳体验方案：**结构、样式、行为相分离**。  \n  简单理解：**结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中**\n\n  1.结构类似身体\n\n  2.表现类似外观装饰\n\n  3.行为类似行为动作\n\n  4.相比较而言, 三者中结构最重要.\n\n## HTML标签的导读：\n\n### HTML语法规则：\n\n​    1.HTML 标签是由尖括号包围的关键词，例如 \\html>。\n​    2.HTML 标签通常是成对出现的，例如 \\<html> 和 \\</html> ，我们称为**双标签**。\n​    3.签。标签对中的第一个标签是开始标签，第二个标签是结束标签。 \n有些特殊的标签必须是单个标签（极少情况），例如 \\<br />，我们称为**单标签**。\n\n### 标签的关系：\n\n 双标签关系可以分为两类：包含关系和并列关系\n 包含标签：\n\n```html\n<head>  \n  <title> </title> \n</head>\n```\n\n 并列关系：\n\n```\n  <head> </head>\n  <body> </body>\n```\n\n### 基本结构标签：\n\n​    每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写\n\n![基本结构](html基础/基本结构.png)\n\n### 开发工具-VSCode的简单使用：\n\n       1. 双击打开软件。\n          2. 新建文件（Ctrl + N ）。\n             3. 保存（Ctrl + S ）, 注意移动要保存为 .html 文件\n             4. Ctrl + 加号键 ，Ctrl + 减号键  可以放大缩小视图 \n             5. 生成页面骨架结构。 输入! 按下 Tab 键。\n             6. 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。\n                **DOCTYPE\n\n2.简单骨架生产类型：\n\na.\\<!DOCTYPE html>  文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.\n\nb.**lang 语言种类**\n    用来定义当前文档显示的语言。\n    en定义语言为英语\n    zh-CN定义语言为中文\n    简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页\n    其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文\n    这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的\nc.**字符集**\n    1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。\n    2.在\\head>标签内，可以通过\\<meta> 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。\n    3.\\<meta charset=\" UTF-8\" />\n    4.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.\n    5.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 \"UTF-8\"，不要写成  \"utf8\" 或 \"UTF8\"。\n\n ### 语义化标签：\n\n​    学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。\n###什么是语义化标签：\n​    根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。\n\n### 常用的标签：\n\n#### 标题标签\n\n​    **标题标签 \\<h1> - \\<h6>（重要)**\n​    为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即\\<h1> - \\<h6> 。\n​    具体实现：\n\n```\n   <h1> 我是一级标题 </h1>\n```\n\n​    特点：\n​    1.加了标题的文字会变的加粗，字号也会依次变大。\n\n    2. 一个标题独占一行。\n        来！！！左边。。。右边。。。中间：\n        \n        ```\n        <h1>标题一共六级选,</h1>\n        <h2>文字加粗一行显。</h2>\n        <h3>由大到小依次减，</h3>\n        <h4>从重到轻随之变。</h4>\n        <h5>语法规范书写后，</h5>\n        <h6>具体效果刷新见。</h6>\n        ```\n\n#### 段落标签：\n\n​    在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<p>标签用于定义段落，它可以将整个网页分为若干个段落。\n​    具体实现：\n​         \\<p> 我是一个段落标签 \\</p>\n​    特点：\n\n           1. 文本在一个段落中会根据浏览器窗口的大小自动换行。\n              落和段落之间保有空隙。\n\n#### 换行标签\n\n​    在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 \\<br />。\n​    具体实现：\n​         \\<br />\n​    特点：\n\n        1. <br /> 是个单标签。\n                2. <br /> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。\n\n#### 文本格式化标签：\n\n​    在网页中，有时需要为文字设置粗体、斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。\n![格式化标签](html基础/格式化标签.png)\n\n#### div和span标签\n\n```\n    <div> 和 <span> 是没有语义的，它们就是一个盒子，用来装内容的。\n    具体实现：\n        \n    </div>\n    <div> 这是头部 </div>    \n    <span> 今日价格 </span>\n```\n\n​    特点：\n\n              1.  &lt;div&gt;标签用来布局，但是现在一行只能放一个\\<div>。 大盒子\n                             2.\\<span> 标签用来布局，一行上可以多个 \\<span>。小盒子\n\n#### 图片标签：\n\n​    在 HTML 标签中，\\<img> 标签用于定义 HTML 页面中的图像。\n​    具体实现：\n​          <img src=\"图像URL\" />\n​    解释：\n​        src 是\\<img>标签的必须属性，它用于指定图像文件的路径和文件名。\n​        所谓属性：简单理解就是属于这个图像标签的特性。\n​    图像标签的其他属性：\n\n![图片属性](html基础/图片属性.png)\n\n 图像标签注意点：\n        1.图像标签可以拥有多个属性，必须写在标签名的后面。\n        2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\n        3.属性采取键值对的格式，即 key=“value\" 的格式，属性 =“属性值”。\n\n        3.属性采取键值对的格式，即 key=“value\" 的格式，属性 =“属性值”。\n\n#### 路径：\n\n​    分为相对路径和绝对路径：\n​        **路径之相对路径**\n​        相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。 \n​        这里简单来说，图片相对于 HTML 页面的位置\n\n​    特点：![路径](html基础/路径.png)\n​        相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。\n​        路径之绝对路径：\n​            绝对路径：\n​            1.是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。\n​            例如，“D:\\web\\img\\logo.gif”或完整的网络地址“http://www.itcast.cn/images/logo.gif”\n\n#### 链接标签：\n\n​     链接的语法格式\n​        \\<a href=\"跳转目标\" target=\"目标窗口的弹出方式\"> 文本或图像\\ \\</a>\n​    属性：\n​        1.href：用于指定链接目标的url地址\n​        2.target:用于指定链接页面的打开方式_self默认值 _blank新窗口打开\n​        3.#：空链接\n链接分类：\n​    1.外部链接: 例如 < a href=\"http:// www.baidu.com \"> 百度\\</a >。\n​    2.内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 < a href=\"index.html\"> 首页 \\</a >。\n​    3.空链接: 如果当时没有确定链接目标时，< a href=\"#\"> 首页 \\</a > 。\n​    4.下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。\n​    5.网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.\n​    6.锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置. \n\n  \t* 在链接文本的 href 属性中，设置属性值为 #名字 的形式，如&lt;a href=\"#two\"> 第2集 &lt;/a> \n  \t* 找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&lt;h3 id=\"two\">第2集介绍&lt;/h3>\n\n### 特殊字符：\n\n在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。\n\n![特殊字符](html基础/特殊字符.png)\n\n### 表格\n\n#### 表格的主要作用\n\n​    1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理\n\n​\t2.表格不是用来布局页面的,而是用来展示数据的。\n\n​    3.表格的具体用法：\n\n```\n         <table>\n            <tr>\n                <td>单元格内的文字</td>\n                ...\n            </tr>\n            ...\n        </table>\n        1.<table> </table> 是用于定义表格的标签。\n        2.<tr> </tr> 标签用于定义表格中的行，必须嵌套在 <table> </table>标签中。\n        3.<td> </td> 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。\n        4.字母 td 指表格数据（table data），即数据单元格的内容。\n```\n\n#### 表头单元格标签：\n\n```\n        表头标签的具体实现：\n         <table>\n            <tr>\n                <th>姓名</th>\n                ...\n            </tr>\n            ...\n        </table>\n        1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            <th> 标签表示 HTML 表格的表头部分(table head 的缩写)\n        2.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            <th> 标签表示 HTML 表格的表头部分(table head 的缩写)\n   \t\t3.表头单元格也是单元格，常用于表格第一行突出重要性，表头单元格里面的文字会加粗居中\n```\n\n#### 表格属性：\n\n​    1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.\n\n#### 表格结构标签：\n\n​    使用场景:\n​        因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.在表格标签中，分别用：\\<thead>标签 表格的头部区域、\\<tbody>标签 表格的主体区域. 这样可以更好的分清表格结构。\n\n```\n总结:\n    1. <thead></thead>：用于定义表格的头部。<thead> 内部必须拥有 <tr> 标签。 一般是位于第一行。\n    2. <tbody></tbody>：用于定义表格的主体，主要用于放数据本体 。\n    3.  以上标签都是放在 <table></table> 标签中。\n```\n\n#### 合并单元格：\n\n​    特殊情况下,可以把多个单元格合并为一个单元格,  这里同学们会最简单的合并单元格即可.\n​    1.合并单元格方式\n​    2.目标单元格\n​    3.合并单元格的步骤\n\n**合并单元格方式：**\n\n**跨行合并**：rowspan=\"合并单元格的个数\"     \n\n​\t最上侧单元格为目标单元格, 写合并代码\n\n **跨列合并**：colspan=\"合并单元格的个数\"\n\n​\t最左侧单元格为目标单元格, 写合并代码\n\n**合并单元格三步曲：**\n\n先确定是跨行还是跨列合并。\n\n找到目标单元格. 写上合并方式 = 合并的单元格数量。\n\n比如：\\<td colspan=\"2\">\\</td>。删除多余的单元格。\n\n**表格总结**\n\n​\t表格学习整体可以分为三大部分:\n\n**表格的相关标签**\n\n​\ttable   thead  body  tr  th  td \n\n**表格的相关属性**\n\n​\tcellspacing    cellpadding     width  height  border \n\n**合并单元格**\n\n​\t  rowspan   collspan\n\n### 列表\n\n​    表格是用来显示数据的，那么列表就是用来布局的。 \n​    列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。\n​    根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。\n\n#### 无序：\n\n`<ul>` 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 \\<li> 标签定义。\n\n无序列表的基本语法格式如下：\n\n```\n<ul> \n <li>列表项1</li>   <li>列表项2</li>   <li>列表项3</li>   ... \n</ul>\n\n1. 无序列表的各个列表项之间没有顺序级别之分，是并列的。\n\n2. <ul></ul> 中只能嵌套 <li></li>，直接在 <ul></ul> 标签中输入其他标签或者文字的做法是不被允许的。\n\n3. <li> 与 </li> 之间相当于一个容器，可以容纳所有元素。\n\n4. 无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。\n```\n\n#### 有序：\n\n有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，\\<ol> 标签用于定义有序列表，列表排序以数字来显示，并且使用 \\<li> 标签来定义列表项。有序列表的基本语法格式如下：\n\n```\n<ol>   \n    <li>列表项1</li>   \n    <li>列表项2</li>   \n    <li>列表项3</li>   ... \n</ol>\n\n1. <ol></ol>中只能嵌套<li></li>，直接在<ol></ol>标签中输入其他标签或者文字的做法是不被允许的。\n\n2. <li> 与 </li>之间相当于一个容器，可以容纳所有元素。\n\n3. 有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。\n```\n\n#### 自定义列表：\n\n自定义列表的使用场景:自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，\\<dl> 标签用于定义描述列表（或定义列表），该标签会与 \\<dt>（定义项目/名字）和 \\<dd>（描述每一个项目/名字）一起使用。语法如下：\n\n```\n <dl>   \n     <dt>名词1</dt>   \n     <dd>名词1解释1</dd>   \n     <dd>名词1解释2</dd> \n </dl>\n```\n\n#### 列表总结\n\n![列表总结](html基础/列表总结.png)\n\n### 表单\n\n#### 为什么需要表单：\n\n​    使用表单目的是为了收集用户信息。\n​    在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。\n\n#### 表单的组成：\n\n​    在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。\n\n#### 表单域：\n\n​    表单域是一个包含表单元素的区域。\n​    在 HTML 标签中， \\<form> 标签用于定义表单域，以实现用户信息的收集和传递。\n\n```\n <form> 会把它范围内的表单元素信息提交给服务器.\n    实现代码：\n <form action=“url地址” method=“提交方式” name=“表单域名称\">各种表单元素控件</form>\n```\n\n#### 表单域的常用属性：\n\n![表单常用属性](html基础/表单常用属性.png)\n\n这里只需要记住两点:\n1.在我们写表单元素之前,应该有个表单域把他们进行包含.\n2.表单域是 form标签.\n\n#### 表单控件(表单元素)\n\n \\<input> 表单元素\n\n在英文单词中，input 是输入的意思，而在表单元素中 \\<input> 标签用于收集用户信息。在 \\<input> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。\n\n\\<input type=\"属性值\"  />\n\n\\<input /> 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型\n\ntype 属性的属性值及其描述如下：\n\n![表单标签](html基础/表单标签.png)\n\n除 type 属性外，\\<input>标签还有其他很多属性，其常用属性如下：\n\n![表单其他属性](html基础/表单其他属性.png)\n\n1. name 和value 是每个表单元素都有的属性值,主要给后台人员使用. \n2. name 表单元素的名字, 要求 单选按钮和复选框要有相同的name值.\n3. checked属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以默认选中某个表单元素. \n4. maxlength 是用户可以在表单元素输入的最大字符数, 一般较少使用.\n\n#### \\<label> 标签\n\n\\<label> 标签为 input 元素定义标注（标签）。\n\\<label> 标签用于绑定一个表单元素, 当点击\\<label> 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.\n语法：\n     \\<label for=\"sex\">男\\</label>\n    \\<input type=\"radio\" name=\"sex\"  id=\"sex\" />\n    核心： \\<label> 标签的 for 属性应当与相关元素的 id 属性相同。\n\n#### \\<select> 表单元素\n\n使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用\\<select>标签控件定义下拉列表。\n\n```\n语法： \n<select>\n   <option>选项1</option>\n   <option>选项2</option>\n   <option>选项3</option>\n   ...\n </select>\n```\n\n#### \\<textarea> 表单元素\n\n1. 使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 \\<textarea> 标签。\n2. 在表单元素中，\\<textarea> 标签是用于定义多行文本输入的控件。\n3. 使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。\n\n语法：\n\n​\t\\<textarea rows=\"3\" cols=\"20\">   文本内容 \\</textarea>\n\n通过 \\<textarea> 标签可以轻松地创建多行文本输入框。cols=“每行中的字符数” ，rows=“显示的行数”，\n\n我们在实际开发中不会使用，都是用 CSS 来改变大小。\n\n表单元素我们学习了三大组  input 输入表单元素  select 下拉表单元素  textarea 文本域表单元素.这三组表单元素都应该包含在form表单域里面,并且有 name 属性.\n\n具体代码：\n\n​\t\\<form>\n\n​\t\t<input type=“text \" name=“username”>\n\n​\t\t\\<select name=\"jiguan\">  \n\n​\t\t \\<option>北京\\</option>\n\n​\t\t\\</select> \n\n​\t\t\\<textarea name= \"message\">\n\n​\t\t\\</textarea>\n\n​\t\\</form>\n\n1. 有三个名字非常相似的标签:\n\n- 表单域   form    使用场景:  提交区域内表单元素给后台服务器\n- 文件域   file      是input type 属性值   使用场景: 上传文件\n- 文本域   textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等…\n\n2. 我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.\n\n","slug":"html基础","published":1,"updated":"2021-05-19T01:50:29.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckov2oomm00039wrc1pu1ed7i","content":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"网页开发网页的相关概念\"><a href=\"#网页开发网页的相关概念\" class=\"headerlink\" title=\"网页开发网页的相关概念:\"></a>网页开发网页的相关概念:</h2><h3 id=\"什么是网页：\"><a href=\"#什么是网页：\" class=\"headerlink\" title=\"什么是网页：\"></a>什么是网页：</h3><p> 1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。<br> 2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。</p>\n<h3 id=\"网页的组成：\"><a href=\"#网页的组成：\" class=\"headerlink\" title=\"网页的组成：\"></a>网页的组成：</h3><p> 1.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</p>\n<h3 id=\"什么是HTML：\"><a href=\"#什么是HTML：\" class=\"headerlink\" title=\"什么是HTML：\"></a>什么是HTML：</h3><p> 1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。<br> 2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。<br> 标记语言是一套标记标签 (markup tag)。</p>\n<h3 id=\"网页的总结：\"><a href=\"#网页的总结：\" class=\"headerlink\" title=\"网页的总结：\"></a>网页的总结：</h3><p> 1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)<br> 2.网页生成制作:  有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.<br> 3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…</p>\n<h3 id=\"浏览器内核（渲染引擎）\"><a href=\"#浏览器内核（渲染引擎）\" class=\"headerlink\" title=\"浏览器内核（渲染引擎）\"></a>浏览器内核（渲染引擎）</h3><ul>\n<li>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面 <img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png\" class title=\"浏览器内核\"></li>\n<li> 目前国内一般浏览器都会采用 Webkit/Blink 内核，如 360、UC、QQ、搜狗等。</li>\n</ul>\n<h2 id=\"web标准：\"><a href=\"#web标准：\" class=\"headerlink\" title=\"web标准：\"></a>web标准：</h2><ul>\n<li><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p>\n<h3 id=\"为什么需要Web标准：\"><a href=\"#为什么需要Web标准：\" class=\"headerlink\" title=\"为什么需要Web标准：\"></a>为什么需要Web标准：</h3></li>\n<li><p>浏览器不同，它们显示页面或者排版就有些许差异</p>\n</li>\n<li><p>遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p>\n<p>1.让 Web 的发展前景更广阔。<br>2.内容能被更广泛的设备访问。<br>3.更容易被搜寻引擎搜索。<br>4.降低网站流量费用。<br>5.使网站更易于维护。<br>6.提高页面浏览速度。</p>\n<h3 id=\"web标准的构成：\"><a href=\"#web标准的构成：\" class=\"headerlink\" title=\"web标准的构成：\"></a>web标准的构成：</h3><p>主要包括 《结构Structure》 、《表现（Presentation）》和《行为（Behavior）》三个方面。<br>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。<br>简单理解：<strong>结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中</strong></p>\n<p>1.结构类似身体</p>\n<p>2.表现类似外观装饰</p>\n<p>3.行为类似行为动作</p>\n<p>4.相比较而言, 三者中结构最重要.</p>\n</li>\n</ul>\n<h2 id=\"HTML标签的导读：\"><a href=\"#HTML标签的导读：\" class=\"headerlink\" title=\"HTML标签的导读：\"></a>HTML标签的导读：</h2><h3 id=\"HTML语法规则：\"><a href=\"#HTML语法规则：\" class=\"headerlink\" title=\"HTML语法规则：\"></a>HTML语法规则：</h3><p>​    1.HTML 标签是由尖括号包围的关键词，例如 \\html&gt;。<br>​    2.HTML 标签通常是成对出现的，例如 &lt;html&gt; 和 &lt;/html&gt; ，我们称为<strong>双标签</strong>。<br>​    3.签。标签对中的第一个标签是开始标签，第二个标签是结束标签。<br>有些特殊的标签必须是单个标签（极少情况），例如 &lt;br /&gt;，我们称为<strong>单标签</strong>。</p>\n<h3 id=\"标签的关系：\"><a href=\"#标签的关系：\" class=\"headerlink\" title=\"标签的关系：\"></a>标签的关系：</h3><p> 双标签关系可以分为两类：包含关系和并列关系<br> 包含标签：</p>\n<pre><code class=\"html\">&lt;head&gt;  \n  &lt;title&gt; &lt;/title&gt; \n&lt;/head&gt;\n</code></pre>\n<p> 并列关系：</p>\n<pre><code>  &lt;head&gt; &lt;/head&gt;\n  &lt;body&gt; &lt;/body&gt;\n</code></pre>\n<h3 id=\"基本结构标签：\"><a href=\"#基本结构标签：\" class=\"headerlink\" title=\"基本结构标签：\"></a>基本结构标签：</h3><p>​    每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png\" class title=\"基本结构\">\n\n<h3 id=\"开发工具-VSCode的简单使用：\"><a href=\"#开发工具-VSCode的简单使用：\" class=\"headerlink\" title=\"开发工具-VSCode的简单使用：\"></a>开发工具-VSCode的简单使用：</h3><pre><code>   1. 双击打开软件。\n      2. 新建文件（Ctrl + N ）。\n         3. 保存（Ctrl + S ）, 注意移动要保存为 .html 文件\n         4. Ctrl + 加号键 ，Ctrl + 减号键  可以放大缩小视图 \n         5. 生成页面骨架结构。 输入! 按下 Tab 键。\n         6. 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。\n            **DOCTYPE\n</code></pre>\n<p>2.简单骨架生产类型：</p>\n<p>a.&lt;!DOCTYPE html&gt;  文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.</p>\n<p>b.<strong>lang 语言种类</strong><br>    用来定义当前文档显示的语言。<br>    en定义语言为英语<br>    zh-CN定义语言为中文<br>    简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页<br>    其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文<br>    这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的<br>c.<strong>字符集</strong><br>    1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。<br>    2.在\\head&gt;标签内，可以通过&lt;meta&gt; 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。<br>    3.&lt;meta charset=” UTF-8” /&gt;<br>    4.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.<br>    5.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 “UTF-8”，不要写成  “utf8” 或 “UTF8”。</p>\n<h3 id=\"语义化标签：\"><a href=\"#语义化标签：\" class=\"headerlink\" title=\"语义化标签：\"></a>语义化标签：</h3><p>​    学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。<br>###什么是语义化标签：<br>​    根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p>\n<h3 id=\"常用的标签：\"><a href=\"#常用的标签：\" class=\"headerlink\" title=\"常用的标签：\"></a>常用的标签：</h3><h4 id=\"标题标签\"><a href=\"#标题标签\" class=\"headerlink\" title=\"标题标签\"></a>标题标签</h4><p>​    <strong>标题标签 &lt;h1&gt; - &lt;h6&gt;（重要)</strong><br>​    为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即&lt;h1&gt; - &lt;h6&gt; 。<br>​    具体实现：</p>\n<pre><code>   &lt;h1&gt; 我是一级标题 &lt;/h1&gt;\n</code></pre>\n<p>​    特点：<br>​    1.加了标题的文字会变的加粗，字号也会依次变大。</p>\n<pre><code>2. 一个标题独占一行。\n    来！！！左边。。。右边。。。中间：\n    \n    ```\n    &lt;h1&gt;标题一共六级选,&lt;/h1&gt;\n    &lt;h2&gt;文字加粗一行显。&lt;/h2&gt;\n    &lt;h3&gt;由大到小依次减，&lt;/h3&gt;\n    &lt;h4&gt;从重到轻随之变。&lt;/h4&gt;\n    &lt;h5&gt;语法规范书写后，&lt;/h5&gt;\n    &lt;h6&gt;具体效果刷新见。&lt;/h6&gt;\n    ```\n</code></pre>\n<h4 id=\"段落标签：\"><a href=\"#段落标签：\" class=\"headerlink\" title=\"段落标签：\"></a>段落标签：</h4><p>​    在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，</p><p>标签用于定义段落，它可以将整个网页分为若干个段落。<br>​    具体实现：<br>​         &lt;p&gt; 我是一个段落标签 &lt;/p&gt;<br>​    特点：</p>\n<pre><code>       1. 文本在一个段落中会根据浏览器窗口的大小自动换行。\n          落和段落之间保有空隙。\n</code></pre>\n<h4 id=\"换行标签\"><a href=\"#换行标签\" class=\"headerlink\" title=\"换行标签\"></a>换行标签</h4><p>​    在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 &lt;br /&gt;。<br>​    具体实现：<br>​         &lt;br /&gt;<br>​    特点：</p>\n<pre><code>    1. &lt;br /&gt; 是个单标签。\n            2. &lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。\n</code></pre>\n<h4 id=\"文本格式化标签：\"><a href=\"#文本格式化标签：\" class=\"headerlink\" title=\"文本格式化标签：\"></a>文本格式化标签：</h4><p>​    在网页中，有时需要为文字设置粗体、斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png\" class title=\"格式化标签\">\n\n<h4 id=\"div和span标签\"><a href=\"#div和span标签\" class=\"headerlink\" title=\"div和span标签\"></a>div和span标签</h4><pre><code>    &lt;div&gt; 和 &lt;span&gt; 是没有语义的，它们就是一个盒子，用来装内容的。\n    具体实现：\n        \n    &lt;/div&gt;\n    &lt;div&gt; 这是头部 &lt;/div&gt;    \n    &lt;span&gt; 今日价格 &lt;/span&gt;\n</code></pre>\n<p>​    特点：</p>\n<pre><code>          1.  &amp;lt;div&amp;gt;标签用来布局，但是现在一行只能放一个\\&lt;div&gt;。 大盒子\n                         2.\\&lt;span&gt; 标签用来布局，一行上可以多个 \\&lt;span&gt;。小盒子\n</code></pre>\n<h4 id=\"图片标签：\"><a href=\"#图片标签：\" class=\"headerlink\" title=\"图片标签：\"></a>图片标签：</h4><p>​    在 HTML 标签中，&lt;img&gt; 标签用于定义 HTML 页面中的图像。<br>​    具体实现：<br>​          <img src=\"/sixofspace/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/图像URL\"><br>​    解释：<br>​        src 是&lt;img&gt;标签的必须属性，它用于指定图像文件的路径和文件名。<br>​        所谓属性：简单理解就是属于这个图像标签的特性。<br>​    图像标签的其他属性：</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%89%87%E5%B1%9E%E6%80%A7.png\" class title=\"图片属性\">\n\n<p> 图像标签注意点：<br>        1.图像标签可以拥有多个属性，必须写在标签名的后面。<br>        2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>        3.属性采取键值对的格式，即 key=“value” 的格式，属性 =“属性值”。</p>\n<pre><code>    3.属性采取键值对的格式，即 key=“value&quot; 的格式，属性 =“属性值”。\n</code></pre>\n<h4 id=\"路径：\"><a href=\"#路径：\" class=\"headerlink\" title=\"路径：\"></a>路径：</h4><p>​    分为相对路径和绝对路径：<br>​        <strong>路径之相对路径</strong><br>​        相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。<br>​        这里简单来说，图片相对于 HTML 页面的位置</p>\n<p>​    特点：<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%B7%AF%E5%BE%84.png\" class title=\"路径\"><br>​        相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。<br>​        路径之绝对路径：<br>​            绝对路径：<br>​            1.是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。<br>​            例如，“D:\\web\\img\\logo.gif”或完整的网络地址“<a href=\"http://www.itcast.cn/images/logo.gif%E2%80%9D\">http://www.itcast.cn/images/logo.gif”</a></p>\n<h4 id=\"链接标签：\"><a href=\"#链接标签：\" class=\"headerlink\" title=\"链接标签：\"></a>链接标签：</h4><p>​     链接的语法格式<br>​        &lt;a href=”跳转目标” target=”目标窗口的弹出方式”&gt; 文本或图像\\ &lt;/a&gt;<br>​    属性：<br>​        1.href：用于指定链接目标的url地址<br>​        2.target:用于指定链接页面的打开方式_self默认值 _blank新窗口打开<br>​        3.#：空链接<br>链接分类：<br>​    1.外部链接: 例如 &lt; a href=”http:// <a href=\"http://www.baidu.com/\">www.baidu.com</a> “&gt; 百度&lt;/a &gt;。<br>​    2.内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href=”index.html”&gt; 首页 &lt;/a &gt;。<br>​    3.空链接: 如果当时没有确定链接目标时，&lt; a href=”#”&gt; 首页 &lt;/a &gt; 。<br>​    4.下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。<br>​    5.网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.<br>​    6.锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置. </p>\n<pre><code>  * 在链接文本的 href 属性中，设置属性值为 #名字 的形式，如&amp;lt;a href=&quot;#two&quot;&gt; 第2集 &amp;lt;/a&gt; \n  * 找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&amp;lt;h3 id=&quot;two&quot;&gt;第2集介绍&amp;lt;/h3&gt;\n</code></pre>\n<h3 id=\"特殊字符：\"><a href=\"#特殊字符：\" class=\"headerlink\" title=\"特殊字符：\"></a>特殊字符：</h3><p>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png\" class title=\"特殊字符\">\n\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><h4 id=\"表格的主要作用\"><a href=\"#表格的主要作用\" class=\"headerlink\" title=\"表格的主要作用\"></a>表格的主要作用</h4><p>​    1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理</p>\n<p>​    2.表格不是用来布局页面的,而是用来展示数据的。</p>\n<p>​    3.表格的具体用法：</p>\n<pre><code>         &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;单元格内的文字&lt;/td&gt;\n                ...\n            &lt;/tr&gt;\n            ...\n        &lt;/table&gt;\n        1.&lt;table&gt; &lt;/table&gt; 是用于定义表格的标签。\n        2.&lt;tr&gt; &lt;/tr&gt; 标签用于定义表格中的行，必须嵌套在 &lt;table&gt; &lt;/table&gt;标签中。\n        3.&lt;td&gt; &lt;/td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。\n        4.字母 td 指表格数据（table data），即数据单元格的内容。\n</code></pre>\n<h4 id=\"表头单元格标签：\"><a href=\"#表头单元格标签：\" class=\"headerlink\" title=\"表头单元格标签：\"></a>表头单元格标签：</h4><pre><code>        表头标签的具体实现：\n         &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;姓名&lt;/th&gt;\n                ...\n            &lt;/tr&gt;\n            ...\n        &lt;/table&gt;\n        1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)\n        2.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)\n           3.表头单元格也是单元格，常用于表格第一行突出重要性，表头单元格里面的文字会加粗居中\n</code></pre>\n<h4 id=\"表格属性：\"><a href=\"#表格属性：\" class=\"headerlink\" title=\"表格属性：\"></a>表格属性：</h4><p>​    1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.</p>\n<h4 id=\"表格结构标签：\"><a href=\"#表格结构标签：\" class=\"headerlink\" title=\"表格结构标签：\"></a>表格结构标签：</h4><p>​    使用场景:<br>​        因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.在表格标签中，分别用：&lt;thead&gt;标签 表格的头部区域、&lt;tbody&gt;标签 表格的主体区域. 这样可以更好的分清表格结构。</p>\n<pre><code>总结:\n    1. &lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。&lt;thead&gt; 内部必须拥有 &lt;tr&gt; 标签。 一般是位于第一行。\n    2. &lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体，主要用于放数据本体 。\n    3.  以上标签都是放在 &lt;table&gt;&lt;/table&gt; 标签中。\n</code></pre>\n<h4 id=\"合并单元格：\"><a href=\"#合并单元格：\" class=\"headerlink\" title=\"合并单元格：\"></a>合并单元格：</h4><p>​    特殊情况下,可以把多个单元格合并为一个单元格,  这里同学们会最简单的合并单元格即可.<br>​    1.合并单元格方式<br>​    2.目标单元格<br>​    3.合并单元格的步骤</p>\n<p><strong>合并单元格方式：</strong></p>\n<p><strong>跨行合并</strong>：rowspan=”合并单元格的个数”     </p>\n<p>​    最上侧单元格为目标单元格, 写合并代码</p>\n<p> <strong>跨列合并</strong>：colspan=”合并单元格的个数”</p>\n<p>​    最左侧单元格为目标单元格, 写合并代码</p>\n<p><strong>合并单元格三步曲：</strong></p>\n<p>先确定是跨行还是跨列合并。</p>\n<p>找到目标单元格. 写上合并方式 = 合并的单元格数量。</p>\n<p>比如：&lt;td colspan=”2”&gt;&lt;/td&gt;。删除多余的单元格。</p>\n<p><strong>表格总结</strong></p>\n<p>​    表格学习整体可以分为三大部分:</p>\n<p><strong>表格的相关标签</strong></p>\n<p>​    table   thead  body  tr  th  td </p>\n<p><strong>表格的相关属性</strong></p>\n<p>​    cellspacing    cellpadding     width  height  border </p>\n<p><strong>合并单元格</strong></p>\n<p>​      rowspan   collspan</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>​    表格是用来显示数据的，那么列表就是用来布局的。<br>​    列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。<br>​    根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。</p>\n<h4 id=\"无序：\"><a href=\"#无序：\" class=\"headerlink\" title=\"无序：\"></a>无序：</h4><p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 &lt;li&gt; 标签定义。</p>\n<p>无序列表的基本语法格式如下：</p>\n<pre><code>&lt;ul&gt; \n &lt;li&gt;列表项1&lt;/li&gt;   &lt;li&gt;列表项2&lt;/li&gt;   &lt;li&gt;列表项3&lt;/li&gt;   ... \n&lt;/ul&gt;\n\n1. 无序列表的各个列表项之间没有顺序级别之分，是并列的。\n\n2. &lt;ul&gt;&lt;/ul&gt; 中只能嵌套 &lt;li&gt;&lt;/li&gt;，直接在 &lt;ul&gt;&lt;/ul&gt; 标签中输入其他标签或者文字的做法是不被允许的。\n\n3. &lt;li&gt; 与 &lt;/li&gt; 之间相当于一个容器，可以容纳所有元素。\n\n4. 无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。\n</code></pre>\n<h4 id=\"有序：\"><a href=\"#有序：\" class=\"headerlink\" title=\"有序：\"></a>有序：</h4><p>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，&lt;ol&gt; 标签用于定义有序列表，列表排序以数字来显示，并且使用 &lt;li&gt; 标签来定义列表项。有序列表的基本语法格式如下：</p>\n<pre><code>&lt;ol&gt;   \n    &lt;li&gt;列表项1&lt;/li&gt;   \n    &lt;li&gt;列表项2&lt;/li&gt;   \n    &lt;li&gt;列表项3&lt;/li&gt;   ... \n&lt;/ol&gt;\n\n1. &lt;ol&gt;&lt;/ol&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或者文字的做法是不被允许的。\n\n2. &lt;li&gt; 与 &lt;/li&gt;之间相当于一个容器，可以容纳所有元素。\n\n3. 有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。\n</code></pre>\n<h4 id=\"自定义列表：\"><a href=\"#自定义列表：\" class=\"headerlink\" title=\"自定义列表：\"></a>自定义列表：</h4><p>自定义列表的使用场景:自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，&lt;dl&gt; 标签用于定义描述列表（或定义列表），该标签会与 &lt;dt&gt;（定义项目/名字）和 &lt;dd&gt;（描述每一个项目/名字）一起使用。语法如下：</p>\n<pre><code> &lt;dl&gt;   \n     &lt;dt&gt;名词1&lt;/dt&gt;   \n     &lt;dd&gt;名词1解释1&lt;/dd&gt;   \n     &lt;dd&gt;名词1解释2&lt;/dd&gt; \n &lt;/dl&gt;\n</code></pre>\n<h4 id=\"列表总结\"><a href=\"#列表总结\" class=\"headerlink\" title=\"列表总结\"></a>列表总结</h4><img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E5%88%97%E8%A1%A8%E6%80%BB%E7%BB%93.png\" class title=\"列表总结\">\n\n<h3 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h3><h4 id=\"为什么需要表单：\"><a href=\"#为什么需要表单：\" class=\"headerlink\" title=\"为什么需要表单：\"></a>为什么需要表单：</h4><p>​    使用表单目的是为了收集用户信息。<br>​    在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。</p>\n<h4 id=\"表单的组成：\"><a href=\"#表单的组成：\" class=\"headerlink\" title=\"表单的组成：\"></a>表单的组成：</h4><p>​    在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。</p>\n<h4 id=\"表单域：\"><a href=\"#表单域：\" class=\"headerlink\" title=\"表单域：\"></a>表单域：</h4><p>​    表单域是一个包含表单元素的区域。<br>​    在 HTML 标签中， &lt;form&gt; 标签用于定义表单域，以实现用户信息的收集和传递。</p>\n<pre><code> &lt;form&gt; 会把它范围内的表单元素信息提交给服务器.\n    实现代码：\n &lt;form action=“url地址” method=“提交方式” name=“表单域名称&quot;&gt;各种表单元素控件&lt;/form&gt;\n</code></pre>\n<h4 id=\"表单域的常用属性：\"><a href=\"#表单域的常用属性：\" class=\"headerlink\" title=\"表单域的常用属性：\"></a>表单域的常用属性：</h4><img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png\" class title=\"表单常用属性\">\n\n<p>这里只需要记住两点:<br>1.在我们写表单元素之前,应该有个表单域把他们进行包含.<br>2.表单域是 form标签.</p>\n<h4 id=\"表单控件-表单元素\"><a href=\"#表单控件-表单元素\" class=\"headerlink\" title=\"表单控件(表单元素)\"></a>表单控件(表单元素)</h4><p> &lt;input&gt; 表单元素</p>\n<p>在英文单词中，input 是输入的意思，而在表单元素中 &lt;input&gt; 标签用于收集用户信息。在 &lt;input&gt; 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p>\n<p>&lt;input type=”属性值”  /&gt;</p>\n<p>&lt;input /&gt; 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型</p>\n<p>type 属性的属性值及其描述如下：</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png\" class title=\"表单标签\">\n\n<p>除 type 属性外，&lt;input&gt;标签还有其他很多属性，其常用属性如下：</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7.png\" class title=\"表单其他属性\">\n\n<ol>\n<li>name 和value 是每个表单元素都有的属性值,主要给后台人员使用. </li>\n<li>name 表单元素的名字, 要求 单选按钮和复选框要有相同的name值.</li>\n<li>checked属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以默认选中某个表单元素. </li>\n<li>maxlength 是用户可以在表单元素输入的最大字符数, 一般较少使用.</li>\n</ol>\n<h4 id=\"lt-label-gt-标签\"><a href=\"#lt-label-gt-标签\" class=\"headerlink\" title=\"&lt;label&gt; 标签\"></a>&lt;label&gt; 标签</h4><p>&lt;label&gt; 标签为 input 元素定义标注（标签）。<br>&lt;label&gt; 标签用于绑定一个表单元素, 当点击&lt;label&gt; 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.<br>语法：<br>     &lt;label for=”sex”&gt;男&lt;/label&gt;<br>    &lt;input type=”radio” name=”sex”  id=”sex” /&gt;<br>    核心： &lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同。</p>\n<h4 id=\"lt-select-gt-表单元素\"><a href=\"#lt-select-gt-表单元素\" class=\"headerlink\" title=\"&lt;select&gt; 表单元素\"></a>&lt;select&gt; 表单元素</h4><p>使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用&lt;select&gt;标签控件定义下拉列表。</p>\n<pre><code>语法： \n&lt;select&gt;\n   &lt;option&gt;选项1&lt;/option&gt;\n   &lt;option&gt;选项2&lt;/option&gt;\n   &lt;option&gt;选项3&lt;/option&gt;\n   ...\n &lt;/select&gt;\n</code></pre>\n<h4 id=\"lt-textarea-gt-表单元素\"><a href=\"#lt-textarea-gt-表单元素\" class=\"headerlink\" title=\"&lt;textarea&gt; 表单元素\"></a>&lt;textarea&gt; 表单元素</h4><ol>\n<li>使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 &lt;textarea&gt; 标签。</li>\n<li>在表单元素中，&lt;textarea&gt; 标签是用于定义多行文本输入的控件。</li>\n<li>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</li>\n</ol>\n<p>语法：</p>\n<p>​    &lt;textarea rows=”3” cols=”20”&gt;   文本内容 &lt;/textarea&gt;</p>\n<p>通过 &lt;textarea&gt; 标签可以轻松地创建多行文本输入框。cols=“每行中的字符数” ，rows=“显示的行数”，</p>\n<p>我们在实际开发中不会使用，都是用 CSS 来改变大小。</p>\n<p>表单元素我们学习了三大组  input 输入表单元素  select 下拉表单元素  textarea 文本域表单元素.这三组表单元素都应该包含在form表单域里面,并且有 name 属性.</p>\n<p>具体代码：</p>\n<p>​    &lt;form&gt;</p>\n<p>​        &lt;input type=“text “ name=“username”&gt;</p>\n<p>​        &lt;select name=”jiguan”&gt;  </p>\n<p>​         &lt;option&gt;北京&lt;/option&gt;</p>\n<p>​        &lt;/select&gt; </p>\n<p>​        &lt;textarea name= “message”&gt;</p>\n<p>​        &lt;/textarea&gt;</p>\n<p>​    &lt;/form&gt;</p>\n<ol>\n<li>有三个名字非常相似的标签:</li>\n</ol>\n<ul>\n<li>表单域   form    使用场景:  提交区域内表单元素给后台服务器</li>\n<li>文件域   file      是input type 属性值   使用场景: 上传文件</li>\n<li>文本域   textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等…</li>\n</ul>\n<ol start=\"2\">\n<li>我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"网页开发网页的相关概念\"><a href=\"#网页开发网页的相关概念\" class=\"headerlink\" title=\"网页开发网页的相关概念:\"></a>网页开发网页的相关概念:</h2><h3 id=\"什么是网页：\"><a href=\"#什么是网页：\" class=\"headerlink\" title=\"什么是网页：\"></a>什么是网页：</h3><p> 1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。<br> 2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。</p>\n<h3 id=\"网页的组成：\"><a href=\"#网页的组成：\" class=\"headerlink\" title=\"网页的组成：\"></a>网页的组成：</h3><p> 1.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</p>\n<h3 id=\"什么是HTML：\"><a href=\"#什么是HTML：\" class=\"headerlink\" title=\"什么是HTML：\"></a>什么是HTML：</h3><p> 1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。<br> 2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。<br> 标记语言是一套标记标签 (markup tag)。</p>\n<h3 id=\"网页的总结：\"><a href=\"#网页的总结：\" class=\"headerlink\" title=\"网页的总结：\"></a>网页的总结：</h3><p> 1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)<br> 2.网页生成制作:  有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.<br> 3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…</p>\n<h3 id=\"浏览器内核（渲染引擎）\"><a href=\"#浏览器内核（渲染引擎）\" class=\"headerlink\" title=\"浏览器内核（渲染引擎）\"></a>浏览器内核（渲染引擎）</h3><ul>\n<li>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面 <img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png\" class title=\"浏览器内核\"></li>\n<li> 目前国内一般浏览器都会采用 Webkit/Blink 内核，如 360、UC、QQ、搜狗等。</li>\n</ul>\n<h2 id=\"web标准：\"><a href=\"#web标准：\" class=\"headerlink\" title=\"web标准：\"></a>web标准：</h2><ul>\n<li><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p>\n<h3 id=\"为什么需要Web标准：\"><a href=\"#为什么需要Web标准：\" class=\"headerlink\" title=\"为什么需要Web标准：\"></a>为什么需要Web标准：</h3></li>\n<li><p>浏览器不同，它们显示页面或者排版就有些许差异</p>\n</li>\n<li><p>遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p>\n<p>1.让 Web 的发展前景更广阔。<br>2.内容能被更广泛的设备访问。<br>3.更容易被搜寻引擎搜索。<br>4.降低网站流量费用。<br>5.使网站更易于维护。<br>6.提高页面浏览速度。</p>\n<h3 id=\"web标准的构成：\"><a href=\"#web标准的构成：\" class=\"headerlink\" title=\"web标准的构成：\"></a>web标准的构成：</h3><p>主要包括 《结构Structure》 、《表现（Presentation）》和《行为（Behavior）》三个方面。<br>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。<br>简单理解：<strong>结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中</strong></p>\n<p>1.结构类似身体</p>\n<p>2.表现类似外观装饰</p>\n<p>3.行为类似行为动作</p>\n<p>4.相比较而言, 三者中结构最重要.</p>\n</li>\n</ul>\n<h2 id=\"HTML标签的导读：\"><a href=\"#HTML标签的导读：\" class=\"headerlink\" title=\"HTML标签的导读：\"></a>HTML标签的导读：</h2><h3 id=\"HTML语法规则：\"><a href=\"#HTML语法规则：\" class=\"headerlink\" title=\"HTML语法规则：\"></a>HTML语法规则：</h3><p>​    1.HTML 标签是由尖括号包围的关键词，例如 \\html&gt;。<br>​    2.HTML 标签通常是成对出现的，例如 &lt;html&gt; 和 &lt;/html&gt; ，我们称为<strong>双标签</strong>。<br>​    3.签。标签对中的第一个标签是开始标签，第二个标签是结束标签。<br>有些特殊的标签必须是单个标签（极少情况），例如 &lt;br /&gt;，我们称为<strong>单标签</strong>。</p>\n<h3 id=\"标签的关系：\"><a href=\"#标签的关系：\" class=\"headerlink\" title=\"标签的关系：\"></a>标签的关系：</h3><p> 双标签关系可以分为两类：包含关系和并列关系<br> 包含标签：</p>\n<pre><code class=\"html\">&lt;head&gt;  \n  &lt;title&gt; &lt;/title&gt; \n&lt;/head&gt;\n</code></pre>\n<p> 并列关系：</p>\n<pre><code>  &lt;head&gt; &lt;/head&gt;\n  &lt;body&gt; &lt;/body&gt;\n</code></pre>\n<h3 id=\"基本结构标签：\"><a href=\"#基本结构标签：\" class=\"headerlink\" title=\"基本结构标签：\"></a>基本结构标签：</h3><p>​    每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png\" class title=\"基本结构\">\n\n<h3 id=\"开发工具-VSCode的简单使用：\"><a href=\"#开发工具-VSCode的简单使用：\" class=\"headerlink\" title=\"开发工具-VSCode的简单使用：\"></a>开发工具-VSCode的简单使用：</h3><pre><code>   1. 双击打开软件。\n      2. 新建文件（Ctrl + N ）。\n         3. 保存（Ctrl + S ）, 注意移动要保存为 .html 文件\n         4. Ctrl + 加号键 ，Ctrl + 减号键  可以放大缩小视图 \n         5. 生成页面骨架结构。 输入! 按下 Tab 键。\n         6. 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。\n            **DOCTYPE\n</code></pre>\n<p>2.简单骨架生产类型：</p>\n<p>a.&lt;!DOCTYPE html&gt;  文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.</p>\n<p>b.<strong>lang 语言种类</strong><br>    用来定义当前文档显示的语言。<br>    en定义语言为英语<br>    zh-CN定义语言为中文<br>    简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页<br>    其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文<br>    这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的<br>c.<strong>字符集</strong><br>    1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。<br>    2.在\\head&gt;标签内，可以通过&lt;meta&gt; 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。<br>    3.&lt;meta charset=” UTF-8” /&gt;<br>    4.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.<br>    5.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 “UTF-8”，不要写成  “utf8” 或 “UTF8”。</p>\n<h3 id=\"语义化标签：\"><a href=\"#语义化标签：\" class=\"headerlink\" title=\"语义化标签：\"></a>语义化标签：</h3><p>​    学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。<br>###什么是语义化标签：<br>​    根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p>\n<h3 id=\"常用的标签：\"><a href=\"#常用的标签：\" class=\"headerlink\" title=\"常用的标签：\"></a>常用的标签：</h3><h4 id=\"标题标签\"><a href=\"#标题标签\" class=\"headerlink\" title=\"标题标签\"></a>标题标签</h4><p>​    <strong>标题标签 &lt;h1&gt; - &lt;h6&gt;（重要)</strong><br>​    为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即&lt;h1&gt; - &lt;h6&gt; 。<br>​    具体实现：</p>\n<pre><code>   &lt;h1&gt; 我是一级标题 &lt;/h1&gt;\n</code></pre>\n<p>​    特点：<br>​    1.加了标题的文字会变的加粗，字号也会依次变大。</p>\n<pre><code>2. 一个标题独占一行。\n    来！！！左边。。。右边。。。中间：\n    \n    ```\n    &lt;h1&gt;标题一共六级选,&lt;/h1&gt;\n    &lt;h2&gt;文字加粗一行显。&lt;/h2&gt;\n    &lt;h3&gt;由大到小依次减，&lt;/h3&gt;\n    &lt;h4&gt;从重到轻随之变。&lt;/h4&gt;\n    &lt;h5&gt;语法规范书写后，&lt;/h5&gt;\n    &lt;h6&gt;具体效果刷新见。&lt;/h6&gt;\n    ```\n</code></pre>\n<h4 id=\"段落标签：\"><a href=\"#段落标签：\" class=\"headerlink\" title=\"段落标签：\"></a>段落标签：</h4><p>​    在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，</p><p>标签用于定义段落，它可以将整个网页分为若干个段落。<br>​    具体实现：<br>​         &lt;p&gt; 我是一个段落标签 &lt;/p&gt;<br>​    特点：</p>\n<pre><code>       1. 文本在一个段落中会根据浏览器窗口的大小自动换行。\n          落和段落之间保有空隙。\n</code></pre>\n<h4 id=\"换行标签\"><a href=\"#换行标签\" class=\"headerlink\" title=\"换行标签\"></a>换行标签</h4><p>​    在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 &lt;br /&gt;。<br>​    具体实现：<br>​         &lt;br /&gt;<br>​    特点：</p>\n<pre><code>    1. &lt;br /&gt; 是个单标签。\n            2. &lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。\n</code></pre>\n<h4 id=\"文本格式化标签：\"><a href=\"#文本格式化标签：\" class=\"headerlink\" title=\"文本格式化标签：\"></a>文本格式化标签：</h4><p>​    在网页中，有时需要为文字设置粗体、斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png\" class title=\"格式化标签\">\n\n<h4 id=\"div和span标签\"><a href=\"#div和span标签\" class=\"headerlink\" title=\"div和span标签\"></a>div和span标签</h4><pre><code>    &lt;div&gt; 和 &lt;span&gt; 是没有语义的，它们就是一个盒子，用来装内容的。\n    具体实现：\n        \n    &lt;/div&gt;\n    &lt;div&gt; 这是头部 &lt;/div&gt;    \n    &lt;span&gt; 今日价格 &lt;/span&gt;\n</code></pre>\n<p>​    特点：</p>\n<pre><code>          1.  &amp;lt;div&amp;gt;标签用来布局，但是现在一行只能放一个\\&lt;div&gt;。 大盒子\n                         2.\\&lt;span&gt; 标签用来布局，一行上可以多个 \\&lt;span&gt;。小盒子\n</code></pre>\n<h4 id=\"图片标签：\"><a href=\"#图片标签：\" class=\"headerlink\" title=\"图片标签：\"></a>图片标签：</h4><p>​    在 HTML 标签中，&lt;img&gt; 标签用于定义 HTML 页面中的图像。<br>​    具体实现：<br>​          <img src=\"/sixofspace/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/图像URL\"><br>​    解释：<br>​        src 是&lt;img&gt;标签的必须属性，它用于指定图像文件的路径和文件名。<br>​        所谓属性：简单理解就是属于这个图像标签的特性。<br>​    图像标签的其他属性：</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%89%87%E5%B1%9E%E6%80%A7.png\" class title=\"图片属性\">\n\n<p> 图像标签注意点：<br>        1.图像标签可以拥有多个属性，必须写在标签名的后面。<br>        2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>        3.属性采取键值对的格式，即 key=“value” 的格式，属性 =“属性值”。</p>\n<pre><code>    3.属性采取键值对的格式，即 key=“value&quot; 的格式，属性 =“属性值”。\n</code></pre>\n<h4 id=\"路径：\"><a href=\"#路径：\" class=\"headerlink\" title=\"路径：\"></a>路径：</h4><p>​    分为相对路径和绝对路径：<br>​        <strong>路径之相对路径</strong><br>​        相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。<br>​        这里简单来说，图片相对于 HTML 页面的位置</p>\n<p>​    特点：<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%B7%AF%E5%BE%84.png\" class title=\"路径\"><br>​        相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。<br>​        路径之绝对路径：<br>​            绝对路径：<br>​            1.是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。<br>​            例如，“D:\\web\\img\\logo.gif”或完整的网络地址“<a href=\"http://www.itcast.cn/images/logo.gif%E2%80%9D\">http://www.itcast.cn/images/logo.gif”</a></p>\n<h4 id=\"链接标签：\"><a href=\"#链接标签：\" class=\"headerlink\" title=\"链接标签：\"></a>链接标签：</h4><p>​     链接的语法格式<br>​        &lt;a href=”跳转目标” target=”目标窗口的弹出方式”&gt; 文本或图像\\ &lt;/a&gt;<br>​    属性：<br>​        1.href：用于指定链接目标的url地址<br>​        2.target:用于指定链接页面的打开方式_self默认值 _blank新窗口打开<br>​        3.#：空链接<br>链接分类：<br>​    1.外部链接: 例如 &lt; a href=”http:// <a href=\"http://www.baidu.com/\">www.baidu.com</a> “&gt; 百度&lt;/a &gt;。<br>​    2.内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href=”index.html”&gt; 首页 &lt;/a &gt;。<br>​    3.空链接: 如果当时没有确定链接目标时，&lt; a href=”#”&gt; 首页 &lt;/a &gt; 。<br>​    4.下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。<br>​    5.网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.<br>​    6.锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置. </p>\n<pre><code>  * 在链接文本的 href 属性中，设置属性值为 #名字 的形式，如&amp;lt;a href=&quot;#two&quot;&gt; 第2集 &amp;lt;/a&gt; \n  * 找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&amp;lt;h3 id=&quot;two&quot;&gt;第2集介绍&amp;lt;/h3&gt;\n</code></pre>\n<h3 id=\"特殊字符：\"><a href=\"#特殊字符：\" class=\"headerlink\" title=\"特殊字符：\"></a>特殊字符：</h3><p>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png\" class title=\"特殊字符\">\n\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><h4 id=\"表格的主要作用\"><a href=\"#表格的主要作用\" class=\"headerlink\" title=\"表格的主要作用\"></a>表格的主要作用</h4><p>​    1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理</p>\n<p>​    2.表格不是用来布局页面的,而是用来展示数据的。</p>\n<p>​    3.表格的具体用法：</p>\n<pre><code>         &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;单元格内的文字&lt;/td&gt;\n                ...\n            &lt;/tr&gt;\n            ...\n        &lt;/table&gt;\n        1.&lt;table&gt; &lt;/table&gt; 是用于定义表格的标签。\n        2.&lt;tr&gt; &lt;/tr&gt; 标签用于定义表格中的行，必须嵌套在 &lt;table&gt; &lt;/table&gt;标签中。\n        3.&lt;td&gt; &lt;/td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。\n        4.字母 td 指表格数据（table data），即数据单元格的内容。\n</code></pre>\n<h4 id=\"表头单元格标签：\"><a href=\"#表头单元格标签：\" class=\"headerlink\" title=\"表头单元格标签：\"></a>表头单元格标签：</h4><pre><code>        表头标签的具体实现：\n         &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;姓名&lt;/th&gt;\n                ...\n            &lt;/tr&gt;\n            ...\n        &lt;/table&gt;\n        1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)\n        2.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.\n            &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)\n           3.表头单元格也是单元格，常用于表格第一行突出重要性，表头单元格里面的文字会加粗居中\n</code></pre>\n<h4 id=\"表格属性：\"><a href=\"#表格属性：\" class=\"headerlink\" title=\"表格属性：\"></a>表格属性：</h4><p>​    1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.</p>\n<h4 id=\"表格结构标签：\"><a href=\"#表格结构标签：\" class=\"headerlink\" title=\"表格结构标签：\"></a>表格结构标签：</h4><p>​    使用场景:<br>​        因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.在表格标签中，分别用：&lt;thead&gt;标签 表格的头部区域、&lt;tbody&gt;标签 表格的主体区域. 这样可以更好的分清表格结构。</p>\n<pre><code>总结:\n    1. &lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。&lt;thead&gt; 内部必须拥有 &lt;tr&gt; 标签。 一般是位于第一行。\n    2. &lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体，主要用于放数据本体 。\n    3.  以上标签都是放在 &lt;table&gt;&lt;/table&gt; 标签中。\n</code></pre>\n<h4 id=\"合并单元格：\"><a href=\"#合并单元格：\" class=\"headerlink\" title=\"合并单元格：\"></a>合并单元格：</h4><p>​    特殊情况下,可以把多个单元格合并为一个单元格,  这里同学们会最简单的合并单元格即可.<br>​    1.合并单元格方式<br>​    2.目标单元格<br>​    3.合并单元格的步骤</p>\n<p><strong>合并单元格方式：</strong></p>\n<p><strong>跨行合并</strong>：rowspan=”合并单元格的个数”     </p>\n<p>​    最上侧单元格为目标单元格, 写合并代码</p>\n<p> <strong>跨列合并</strong>：colspan=”合并单元格的个数”</p>\n<p>​    最左侧单元格为目标单元格, 写合并代码</p>\n<p><strong>合并单元格三步曲：</strong></p>\n<p>先确定是跨行还是跨列合并。</p>\n<p>找到目标单元格. 写上合并方式 = 合并的单元格数量。</p>\n<p>比如：&lt;td colspan=”2”&gt;&lt;/td&gt;。删除多余的单元格。</p>\n<p><strong>表格总结</strong></p>\n<p>​    表格学习整体可以分为三大部分:</p>\n<p><strong>表格的相关标签</strong></p>\n<p>​    table   thead  body  tr  th  td </p>\n<p><strong>表格的相关属性</strong></p>\n<p>​    cellspacing    cellpadding     width  height  border </p>\n<p><strong>合并单元格</strong></p>\n<p>​      rowspan   collspan</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>​    表格是用来显示数据的，那么列表就是用来布局的。<br>​    列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。<br>​    根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。</p>\n<h4 id=\"无序：\"><a href=\"#无序：\" class=\"headerlink\" title=\"无序：\"></a>无序：</h4><p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 &lt;li&gt; 标签定义。</p>\n<p>无序列表的基本语法格式如下：</p>\n<pre><code>&lt;ul&gt; \n &lt;li&gt;列表项1&lt;/li&gt;   &lt;li&gt;列表项2&lt;/li&gt;   &lt;li&gt;列表项3&lt;/li&gt;   ... \n&lt;/ul&gt;\n\n1. 无序列表的各个列表项之间没有顺序级别之分，是并列的。\n\n2. &lt;ul&gt;&lt;/ul&gt; 中只能嵌套 &lt;li&gt;&lt;/li&gt;，直接在 &lt;ul&gt;&lt;/ul&gt; 标签中输入其他标签或者文字的做法是不被允许的。\n\n3. &lt;li&gt; 与 &lt;/li&gt; 之间相当于一个容器，可以容纳所有元素。\n\n4. 无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。\n</code></pre>\n<h4 id=\"有序：\"><a href=\"#有序：\" class=\"headerlink\" title=\"有序：\"></a>有序：</h4><p>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，&lt;ol&gt; 标签用于定义有序列表，列表排序以数字来显示，并且使用 &lt;li&gt; 标签来定义列表项。有序列表的基本语法格式如下：</p>\n<pre><code>&lt;ol&gt;   \n    &lt;li&gt;列表项1&lt;/li&gt;   \n    &lt;li&gt;列表项2&lt;/li&gt;   \n    &lt;li&gt;列表项3&lt;/li&gt;   ... \n&lt;/ol&gt;\n\n1. &lt;ol&gt;&lt;/ol&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或者文字的做法是不被允许的。\n\n2. &lt;li&gt; 与 &lt;/li&gt;之间相当于一个容器，可以容纳所有元素。\n\n3. 有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。\n</code></pre>\n<h4 id=\"自定义列表：\"><a href=\"#自定义列表：\" class=\"headerlink\" title=\"自定义列表：\"></a>自定义列表：</h4><p>自定义列表的使用场景:自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，&lt;dl&gt; 标签用于定义描述列表（或定义列表），该标签会与 &lt;dt&gt;（定义项目/名字）和 &lt;dd&gt;（描述每一个项目/名字）一起使用。语法如下：</p>\n<pre><code> &lt;dl&gt;   \n     &lt;dt&gt;名词1&lt;/dt&gt;   \n     &lt;dd&gt;名词1解释1&lt;/dd&gt;   \n     &lt;dd&gt;名词1解释2&lt;/dd&gt; \n &lt;/dl&gt;\n</code></pre>\n<h4 id=\"列表总结\"><a href=\"#列表总结\" class=\"headerlink\" title=\"列表总结\"></a>列表总结</h4><img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E5%88%97%E8%A1%A8%E6%80%BB%E7%BB%93.png\" class title=\"列表总结\">\n\n<h3 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h3><h4 id=\"为什么需要表单：\"><a href=\"#为什么需要表单：\" class=\"headerlink\" title=\"为什么需要表单：\"></a>为什么需要表单：</h4><p>​    使用表单目的是为了收集用户信息。<br>​    在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。</p>\n<h4 id=\"表单的组成：\"><a href=\"#表单的组成：\" class=\"headerlink\" title=\"表单的组成：\"></a>表单的组成：</h4><p>​    在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。</p>\n<h4 id=\"表单域：\"><a href=\"#表单域：\" class=\"headerlink\" title=\"表单域：\"></a>表单域：</h4><p>​    表单域是一个包含表单元素的区域。<br>​    在 HTML 标签中， &lt;form&gt; 标签用于定义表单域，以实现用户信息的收集和传递。</p>\n<pre><code> &lt;form&gt; 会把它范围内的表单元素信息提交给服务器.\n    实现代码：\n &lt;form action=“url地址” method=“提交方式” name=“表单域名称&quot;&gt;各种表单元素控件&lt;/form&gt;\n</code></pre>\n<h4 id=\"表单域的常用属性：\"><a href=\"#表单域的常用属性：\" class=\"headerlink\" title=\"表单域的常用属性：\"></a>表单域的常用属性：</h4><img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png\" class title=\"表单常用属性\">\n\n<p>这里只需要记住两点:<br>1.在我们写表单元素之前,应该有个表单域把他们进行包含.<br>2.表单域是 form标签.</p>\n<h4 id=\"表单控件-表单元素\"><a href=\"#表单控件-表单元素\" class=\"headerlink\" title=\"表单控件(表单元素)\"></a>表单控件(表单元素)</h4><p> &lt;input&gt; 表单元素</p>\n<p>在英文单词中，input 是输入的意思，而在表单元素中 &lt;input&gt; 标签用于收集用户信息。在 &lt;input&gt; 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p>\n<p>&lt;input type=”属性值”  /&gt;</p>\n<p>&lt;input /&gt; 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型</p>\n<p>type 属性的属性值及其描述如下：</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png\" class title=\"表单标签\">\n\n<p>除 type 属性外，&lt;input&gt;标签还有其他很多属性，其常用属性如下：</p>\n<img src=\"/sixofspace/2021/05/18/html%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7.png\" class title=\"表单其他属性\">\n\n<ol>\n<li>name 和value 是每个表单元素都有的属性值,主要给后台人员使用. </li>\n<li>name 表单元素的名字, 要求 单选按钮和复选框要有相同的name值.</li>\n<li>checked属性主要针对于单选按钮和复选框, 主要作用一打开页面,就要可以默认选中某个表单元素. </li>\n<li>maxlength 是用户可以在表单元素输入的最大字符数, 一般较少使用.</li>\n</ol>\n<h4 id=\"lt-label-gt-标签\"><a href=\"#lt-label-gt-标签\" class=\"headerlink\" title=\"&lt;label&gt; 标签\"></a>&lt;label&gt; 标签</h4><p>&lt;label&gt; 标签为 input 元素定义标注（标签）。<br>&lt;label&gt; 标签用于绑定一个表单元素, 当点击&lt;label&gt; 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.<br>语法：<br>     &lt;label for=”sex”&gt;男&lt;/label&gt;<br>    &lt;input type=”radio” name=”sex”  id=”sex” /&gt;<br>    核心： &lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同。</p>\n<h4 id=\"lt-select-gt-表单元素\"><a href=\"#lt-select-gt-表单元素\" class=\"headerlink\" title=\"&lt;select&gt; 表单元素\"></a>&lt;select&gt; 表单元素</h4><p>使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用&lt;select&gt;标签控件定义下拉列表。</p>\n<pre><code>语法： \n&lt;select&gt;\n   &lt;option&gt;选项1&lt;/option&gt;\n   &lt;option&gt;选项2&lt;/option&gt;\n   &lt;option&gt;选项3&lt;/option&gt;\n   ...\n &lt;/select&gt;\n</code></pre>\n<h4 id=\"lt-textarea-gt-表单元素\"><a href=\"#lt-textarea-gt-表单元素\" class=\"headerlink\" title=\"&lt;textarea&gt; 表单元素\"></a>&lt;textarea&gt; 表单元素</h4><ol>\n<li>使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 &lt;textarea&gt; 标签。</li>\n<li>在表单元素中，&lt;textarea&gt; 标签是用于定义多行文本输入的控件。</li>\n<li>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</li>\n</ol>\n<p>语法：</p>\n<p>​    &lt;textarea rows=”3” cols=”20”&gt;   文本内容 &lt;/textarea&gt;</p>\n<p>通过 &lt;textarea&gt; 标签可以轻松地创建多行文本输入框。cols=“每行中的字符数” ，rows=“显示的行数”，</p>\n<p>我们在实际开发中不会使用，都是用 CSS 来改变大小。</p>\n<p>表单元素我们学习了三大组  input 输入表单元素  select 下拉表单元素  textarea 文本域表单元素.这三组表单元素都应该包含在form表单域里面,并且有 name 属性.</p>\n<p>具体代码：</p>\n<p>​    &lt;form&gt;</p>\n<p>​        &lt;input type=“text “ name=“username”&gt;</p>\n<p>​        &lt;select name=”jiguan”&gt;  </p>\n<p>​         &lt;option&gt;北京&lt;/option&gt;</p>\n<p>​        &lt;/select&gt; </p>\n<p>​        &lt;textarea name= “message”&gt;</p>\n<p>​        &lt;/textarea&gt;</p>\n<p>​    &lt;/form&gt;</p>\n<ol>\n<li>有三个名字非常相似的标签:</li>\n</ol>\n<ul>\n<li>表单域   form    使用场景:  提交区域内表单元素给后台服务器</li>\n<li>文件域   file      是input type 属性值   使用场景: 上传文件</li>\n<li>文本域   textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等…</li>\n</ul>\n<ol start=\"2\">\n<li>我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.</li>\n</ol>\n"},{"title":"css基础","date":"2021-05-19T02:22:37.000Z","_content":"\n# css基础\n## 一.css简介\n\n​    CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.\n​    有时我们也会称之为 CSS 样式表或级联样式表。\n​    CSS 是也是一种标记语言\n​    CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。\n​    CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。\n​    CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离\n\n![](css基础/小鸟.png)\n\n### css语法规范\n​    1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解CSS 样式规则。\n​    2.CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。\n\n![](css基础/css属性规则.png)\n\n 1.选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式\n 2.属性和属性值以“键值对”的形式出现\n 3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等\n 4.属性和属性值之间用英文“:”分开\n 5.多个“键值对”之间用英文“;”进行区分\n 例如：\n    所有的样式，都包含在 \\<style> 标签内，表示是样式表。\\<style> 一般写到 \\</head> 上方\n\n```\n    <head>\n        <style>\n            h4 {\n                color: blue;\n                font-size: 100px;\n            }\n        </style>\n    </head>\n```\n\n\n\n### css代码风格：\n\n    1. 样式格式书写\n        1.紧凑格式   \n            h3 { color: deeppink;font-size: 20px;}\n        2.展开格式   \n         h3 {\n            color: pink;\n            font-size: 20px;    \n         }\n        强烈推荐第二种格式， 因为更直观。\n    \n            2. 样式大小写风格\n            1.小写格式\n                h3 {\n                color: pink;\n                }\n            2.大写格式\n                  H3 {\n                COLOR: PINK;   \n            }\n            强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。\n            \n                3. 样式空格风格\n        1. h3 {\n        color: pink;    \n        }\n            属性值前面，冒号后面，保留一个空格\n        选择器（标签）和大括号中间保留空格\n            ### css选择器的作用\n        答：选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。  简单来说，就是选择标签用的。\n        ​    ![](css基础/css属性规则.png)\n            找到所有的 h1 标签。  选择器（选对人）\n            设置这些标签的样式，比如颜色为红色（做对事)。\n        \n            ### css基础选择器\n\n基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器\n#### 标签选择器：\n​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。\n语法：\n​    标签选择器{\n​        属性：属性值\n​        ...\n​    }\n作用：\n​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。\n\n#### 类选择器\n\n​    如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.\n语法：\n​    .类名 {\n​        属性1: 属性值1;  \n​        ...\n​    } \n​    结构需要用class属性来调用  class  类的意思\n​    \\<div class=\"类名\"> 变红色 \\</div>\n​    1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。\n​    2.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。\n​    3.类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。\n​    4.可以理解为给这个标签起了一个名字，来表示。\n​    5.长名称或词组可以使用中横线来为选择器命名。\n​    6.不要使用纯数字、中文等命名，尽量使用英文字母来表示。\n​    7.命名要有意义，尽量使别人一眼就知道这个类名的目的。\n#### 多类名选择器\n​    我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.\n​    简单理解就是一个标签有多个名字. \n\n![](css基础/淘宝网多类名.png)\n    多类名的具体使用：\n        1. \\<div class=\"red font20\">亚瑟\\</div>\n        注意：\n        ​        1.在标签class 属性中写 多个类名\n        ​        2.多个类名中间必须用空格分开\n        ​        3.这个标签就可以分别具有这些类名的样式\n#### id选择器：\n​    id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。\n​    HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#\" 来定义。\n​    语法：\n​         #id名 {\n​            属性1: 属性值1;  \n​            ...\n​        } \n​        注意：id 属性只能在每个 HTML 文档中出现一次\n\n#### id选择器和类选择器的区别：\n\n​    1.类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。\n​    2.id 选择器好比人的身份证号码，全中国是唯一的，不得重复。\n​    3.id 选择器和类选择器最大的不同在于使用次数上。\n​    4.类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。\n\n![](css基础/id与类名的区别.png)\n\n#### 通配符选择器：\n\n​    语法：\n        * {\n            属性1: 属性值1;  \n            ...\n                }\n        通配符选择器不需要调用， 自动就给所有的元素使用样式\n        特殊情况才使用，后面讲解使用场景(以下是清除所有的元素标签的内外边距,后期讲)\n     \n               * {\n              margin: 0;\n          padding: 0;\n               } \n            \n              #### 选择器总结\n\n![](css基础/基础选择器总结.png)\n\n## 二.css字体属性:\n### 字体大小：\n\n​    CSS 使用 font-size 属性定义字体大小。 \n语法：\n​     p {  \n​        font-size: 20px; \n​    }\n​    1.px（像素）大小是我们网页的最常用的单位\n​    2.谷歌浏览器默认的文字大小为16px\n​    3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小\n​    4.可以给 body 指定整个页面文字的大小\n\n### 字体粗细：\n\n​    CSS 使用 font-weight 属性设置文本字体的粗细。\n语法：\n​    p {  \n​        font-weight: bold; \n​    }\n\n![](css基础/字体粗细.png)\n\n1.学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗\n2.实际开发时，我们更喜欢用数字表示粗细\n### 字体样式：\n​    CSS 使用 font-style 属性设置文本的风格。\n语法：\n​    p {  \n​        font-style: normal;\n​    }\n\n![](css基础/文字倾斜.png)\n\n### 字体的综合写法\n\n字体属性可以把以上文字样式综合来写, 这样可以更节约代码:\n\n body {   font: font-style  font-weight  font-size/line-height  font-family;}\n\n使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用\n\n### 字体总结：\n\n![](css基础/字体总结.png)\n\n## 三.css文本属性：\n### 文本颜色：\n\n​    color 属性用于定义文本的颜色。\n语法：\n​    div { \n​        color: red;\n​    }\n\n![](css基础/颜色值.png)\n\n开发中最常用的是十六进制\n\n### 文本对齐：\n\ntext-align 属性用于设置元素内文本内容的水平对齐方式。\n语法：\n    div { \n        text-align: center;\n    }\n\n![](css基础/对齐文本.png)\n\n### 修饰文本：\n\n​    语法：\n​     div { \n​        text-decoration：underline；\n​     }\n\n![](css基础/修饰文本.png)\n\n重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.\n\n### 文本缩进\n语法：\n    div { \n        text-indent：20px；\n    }\n    div { \n        text-indent：2em；\n    }\n\n![](css基础/文本缩进.png)\n\n    em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。\n\n### 行间距：\n​    line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离\n语法：\n​    p { \n​        line-height: 26px;\n​    }\n​    行高的文本分为 上间距  文本高度 下间距 = 行间距\n## 四.css样式表：\n​    按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类： \n\n### 行内样式表（行内式）\n\n​        行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.\n​        语法：\n\n            <div style=\"color: red; font-size: 12px;\">青春不常在，抓紧谈恋爱</div>\n​        1.style 其实就是标签的属性\n​        在双引号中间，写法要符合 CSS 规范\n​        2.可以控制当前的标签设置样式\n​        3.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用\n​        4.使用行内样式表设定 CSS，通常也被称为行内式引入\n\n### 内部样式表（嵌入式）\n​        内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 \\<style> 标签中\n​        语法：\n\n```\n            <style>\n                div {\n                color: red;\n                font-size: 12px;\n                }\n            </style>\n```\n\n​        1.\\<style> 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的\\<head>标签中\n​        2.通过此种方式，可以方便控制当前整个页面中的元素样式设置\n​        3.代码结构清晰，但是并没有实现结构与样式完全分离\n​        4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式\n### 外部样式表（链接式）\n​    实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用.\n​    引入外部样式表分为两步：\n\n    1. 新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。\n        2. 在 HTML 页面中，使用\\<link> 标签引入这个文件。\n        语法：\n            \\<link rel=\"stylesheet\"  href=\"css文件路径\">\n\n![](css基础/css引入方式总结.png)\n\n## Chrome调试工具：\n\n![](css基础/谷歌调试工具.png)\n\n 1.Ctrl+滚轮 可以放大开发者工具代码大小。\n 2.左边是 HTML 元素结构，右边是 CSS 样式。\n 3.右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。\n 4.Ctrl + 0 复原浏览器大小。\n 5.如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。\n 6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。\n\n\n\n## 五、emmet语法\n\n### 1、简介\n\n​\t\tEmmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法。\n\n​\t\t快速生成HTML结构语法\n\n​\t\t快速生成CSS样式语法\n\n### 2、快速生成HTML结构语法\n\n- 生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 \\<div>\\</div>\n- 如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div\n- 如果有父子级关系的标签，可以用 >  比如   ul > li就可以了\n- 如果有兄弟关系的标签，用  +  就可以了 比如 div+p  \n- 如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了\n- 如果生成的div 类名是有顺序的， 可以用 自增符号  $ \n- 如果想要在生成的标签内部写内容可以用  { }  表示\n\n### 3、快速生成CSS样式语法\n\nCSS 基本采取简写形式即可\n\n​\t\t比如 w200   按tab  可以 生成  width: 200px;\n\n​\t\t比如 lh26px   按tab  可以生成  line-height: 26px;\n\n### 4、快速格式化代码\n\nVscode  快速格式化代码:   shift+alt+f\n\n也可以设置 当我们 保存页面的时候自动格式化代码:\n\n1）文件 ------.>【首选项】---------->【设置】；\n\n2）搜索emmet.include;\n\n3）在settings.json下的【工作区设置】中添加以下语句：\n\n​\t\t\"editor.formatOnType\": true,\n\n​\t\t\"editor.formatOnSave\": true\n\n## 六、css的复合选择器\n\n### 1、什么是复合选择器？\n\n​\t\t在 CSS 中，可以根据选择器的类型把选择器分为***基础选择器***和***复合选择器***，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。 \n​\t\t复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签）\n​\t\t常用的复合选择器包括：**后代选择器、子选择器、并集选择器、伪类选择器**等等\n\n### 2、后代选择器 (重要）\n\n**定义：**\n\n​\t\t后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n**语法：**\n\n![1570867555401](css基础/01.png)\n\n​\t\t上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。\n\n**语法说明**：\n\n- 元素1 和 元素2 中间用空格隔开\n- 元素1 是父级，元素2 是子级，最终选择的是元素2\n- 元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可\n- 元素1 和 元素2 可以是任意基础选择器\n\n**例子：**\n\n![1570867652832](css基础/02.png)\n\n### 3、子选择器 (重要）\n\n**定义：**\n\n​\t\t子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。\n\n​\t\t（简单理解就是选亲儿子元素）\n\n**语法：**\n\n<img src=\"css基础/03.png\"/>\n\n​\t\t上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。\n\n**语法说明**：\n\n- 元素1 和 元素2 中间用 大于号 隔开\n- 元素1 是父级，元素2 是子级，最终选择的是元素2\n- 元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器\n\n**例子：**\n\n![1570867652832](css基础/04.png)\n\n### 4、并集选择器 (重要）\n\n**定义：**\n\n​\t\t并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明。并集选择器是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。\n\n**语法：**\n\n<img src=\"css基础/05.png\"/>\n\n​\t\t上述语法表示选择元素1 和 元素2。\n\n**语法说明**：\n\n- 元素1 和 元素2 中间用逗号隔开\n- 逗号可以理解为和的意思\n- 并集选择器通常用于集体声明\n\n**例子：**\n\n![1570867652832](css基础/06.png)\n\n### 5、伪类选择器\n\n**定义：**\n\n​\t\t伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。\n\n**语法：**\n\n​\t\t伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。\n\n\n\n### 6、链接伪类选择器\n\n**定义：**\n\n​\t\t伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。\n\n**语法：**\n\n​\t\t伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。\n\n​\t\ta:link\t没有点击过的(访问过的)链接\n​\t\ta:visited\t点击过的(访问过的)链接\n​\t\ta:hover\t鼠标经过的那个链接\n​\t\ta:active\t鼠标正在按下还没有弹起鼠标的那个链接\n\n**链接伪类选择器注意事项**\n\n​\t\t为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。\n\n​\t\t记忆法：love hate 或者 lv 包包 hao 。\n\n​\t\t因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。\n\n**链接伪类选择器实际工作开发中的写法**：\n\n![1570868845786](css基础/1570868845786.png)\n\n\n\n### 7、:focus 伪类选择器\n\n**定义：**\n\n​\t\t:focus 伪类选择器用于选取获得焦点的表单元素。\n\n​\t\t焦点就是光标，一般情况 \\<input> 类表单元素才能获取\n\n例子：\n\n![1570868891669](css基础/1570868891669.png)\n\n\n\n### 复合选择器总结\n\n![1570868930472](css基础/1570868930472.png)\n\n## 七、css的显示模式\n\n### 1、什么是元素的显示模式\n\n**定义：**\n\n​\t\t元素显示模式就是元素（标签）以什么方式进行显示，比如\\<div>自己占一行，比如一行可以放多个\\<span>。\n\n**作用：**\n\n​\t\t网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。\n\n### 2、元素显示模式的分类\n\n#### 2.1、块元素\n\n**常见的块元素**：\n\n```\n<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>\n```\n\n​\t\t\\<div> 标签是最典型的块元素。\n\n**块级元素的特点**：\n\n- 比较霸道，自己独占一行。\n- 高度，宽度、外边距以及内边距都可以控制。\n- 宽度默认是容器（父级宽度）的100%。\n- 是一个容器及盒子，里面可以放行内或者块级元素。\n\n\n\n**注意：**\n\n​\t\t文字类的元素内不能放块级元素\n\n```\n<p> 标签主要用于存放文字，因此 <p> 里面不能放块级元素，特别是不能放<div> \n同理， <h1>~<h6>等都是文字类块级标签，里面也不能放其他块级元素\n```\n\n\n\n#### 2.2、行内元素\n\n**常见的行内元素：**\n\n```\n<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>\n```\n\n​\t\t\\<span> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。\n\n\n\n**行内元素的特点：**\n\n- 相邻行内元素在一行上，一行可以显示多个。\n\n- 高、宽直接设置是无效的。\n\n- 默认宽度就是它本身内容的宽度。\n\n- 行内元素只能容纳文本或其他行内元素。\n\n\n\n**注意：**\n\t\t链接里面不能再放链接\n\t\t特殊情况链接 \\<a> 里面可以放块级元素，但是给 \\<a> 转换一下块级模式最安全\n\n\n\n#### 2.3、行内块元素\n\n**常见的行内块标签**：\n\n```\n<img />、<input />、<td>\n```\n\n​\t\t它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。\n\n**行内块元素的特点**：\n\n- 和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。\n- 一行可以显示多个（行内元素特点）。\n- 默认宽度就是它本身内容的宽度（行内元素特点）。\n- 高度，行高、外边距以及内边距都可以控制（块级元素特点）。\n\n#### 2.4、元素显示模式总结\n\n![1570870718415](css基础/1570870718415.png)\n\n​\t\t学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。\n\n### 3、元素显示模式的转换\n\n**简单理解**: \n\n​\t\t一个模式的元素需要另外一种模式的特性\n​\t\t比如想要增加链接 \\<a> 的触发范围。   \n\n**转换方式**\n\n- 转换为块元素：display:block;\n- 转换为行内元素：display:inline;\n- 转换为行内块：display: inline-block;\n\n### 4、单行文字垂直居中的代码\n\n**解决方案**:    \n\n​\t\t让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中\n\n\n\n![1570870368253](css基础/1570870368253.png)\n\n![1570870387089](css基础/1570870387089.png)\n\n\n\n**简单理解**: \n\n​\t\t行高的上空隙和下空隙把文字挤到中间了，\n\n​\t\t如果行高小于盒子高度,文字会偏上，\n\n​\t\t如果行高大于盒子高度,则文字偏下。\n\n\n\n## 八、css的背景\n\n通过 CSS 背景属性，可以给页面元素添加背景样式。\n背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。\n\n### 1、背景颜色\n\n**样式名称**：\n\n​\t\tbackground-color 定义元素的背景颜色\n\n**使用方式**：\n\n![1570886137899](css基础/1570886137899.png)\n\n**其他说明**：\n\n​\t\t元素背景颜色默认值是 transparent（透明）\n\n![1570886176292](css基础/1570886176292.png)\n\n### 2、背景图片\n\n**样式名称**：\n\n​\t\tbackground-image  定义元素的背景图片\n\n**使用方式**：\n\n![1570886322557](css基础/1570886322557.png)\n\n![1570886362813](css基础/1570886362813.png)\n\n**其他说明**：\n\n​\t\t实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)\n\n​\t\t注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径**不要加引号**。\n\n\n\n### 3、背景平铺\n\n**样式名称：**\n\n​\t\tbackground-repeat 设置元素背景图像的平铺 \n\n**使用方式：**\n\n![1570886648887](css基础/1570886648887.png)\n\n![1570886688306](css基础/1570886688306.png)\n\n### 4、背景图片位置\n\n**样式名称：**\n\n​\t\tbackground-position 属性可以改变图片在背景中的位置\n\n**使用方式：**\n\n​\t\t![1570886973530](css基础/1570886973530.png)\n\n​\t\t参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位\n\n![1570887034135](css基础/1570887034135.png)\n\n**其他说明：**\n\n1、参数是方位名词\n\n​\t\t如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致\n\n​\t\t如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐\n\n2、参数是精确单位\n\n​\t\t如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标\n\n​\t\t如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中\n\n3、参数是混合单位\n\n​\t\t如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标\n\n### 5、背景图片固定\n\n**样式名称：**\n\n​\t\tbackground-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。\n\n**使用方式：**\n\n​\t\t![1570887652404](css基础/1570887652404.png)\n\n![1570887699177](css基础/1570887699177.png)\n\n**其他说明：**\n\n​\t\tbackground-attachment 后期可以制作视差滚动的效果。\n\n### 6、背景样式合写\n\n**背景合写样式：**\n\n​\t\tbackground: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;\n\n**使用方式：**\n\n![1570887809455](css基础/1570887809455.png)\n\n### 7、背景色半透明\n\nCSS3 提供了背景颜色半透明的效果。 \n\n**使用方式：**\n\n![1570887978061](css基础/1570887978061.png)\n\n- 最后一个参数是 alpha 透明度，取值范围在 0~1之间\n- 我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);\n\n**注意**：\n\n- 背景半透明是指盒子背景半透明，盒子里面的内容不受影响\n- CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用\n\n### 8、背景总结\n\n![1570888283511](css基础/1570888283511.png)\n\n\n\n## 九、css三大特性\n\n### 1、层叠性\n\n​\t\t相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题\n\n​\t\t层叠性原则:\n\n- 样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式\n- 样式不冲突，不会层叠\n\n![1571490015544](css基础/1571490015544.png)\n\n### 2、继承性\n\n​\t\tCSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。\n\n![1571490049279](css基础/1571490049279.png)\n\n\n\n子元素可以继承父元素的样式：\n\n​\t（text-，font-，line-这些元素开头的可以继承，以及color属性）\n\n继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞\n\n\n\n行高的继承性：\n\n```css\n body {\n   font:12px/1.5 Microsoft YaHei；\n }\n```\n\n- 行高可以跟单位也可以不跟单位\n- 如果子元素没有设置行高，则会继承父元素的行高为 1.5\n- 此时子元素的行高是：当前子元素的文字大小 * 1.5\n- body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高\n\n### 3、优先级\n\n当同一个元素指定多个选择器，就会有优先级的产生。\n\n- 选择器相同，则执行层叠性\n- 选择器不同，则根据选择器权重执行\n\n\n\n选择器优先级计算表格：\n\n![1571490129794](css基础/1571490129794.png)\n\n\n\n优先级注意点:\n\n1. 权重是有4组数字组成,但是不会有进位。\n\n2. 可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..\n\n3. 等级判断从左向右，如果某一位数值相同，则判断下一位数值。\n\n4. 可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.\n\n5. 继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。\n\n   \n\n权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。\n\n- div ul  li   ------>      0,0,0,3\n- .nav ul li   ------>      0,0,1,2\n- a:hover      -----—>   0,0,1,1\n- .nav a       ------>      0,0,1,1\n\n## 十、盒子模型\n\n### 1、网页布局的本质\n\n网页布局的核心本质： 就是利用 CSS 摆盒子。\n\n![1571492334739](css基础/1571492334739.png)\n\n网页布局过程：\n\n1. 先准备好相关的网页元素，网页元素基本都是盒子 Box 。\n2. 利用 CSS 设置好盒子样式，然后摆放到相应位置。\n3. 往盒子里面装内容\n\n### 2、盒子模型（Box Model）组成\n\n​\t\t盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。\n\n​\t\tCSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：**边框**、**外边距**、**内边距**、和 **实际内容**\n\n![1571492536942](css基础/1571492536942.png)\n\n### 3、边框（border）\n\n#### 3.1、边框的使用\n\n1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；\n\n2、语法：\n\n```css\n border : border-width || border-style || border-color;   \n```\n\n![1571492659260](css基础/1571492659260.png)\n\n边框样式 border-style 可以设置如下值：\n\n- none：没有边框即忽略所有边框的宽度（默认值）\n- solid：边框为单实线(最为常用的)\n- dashed：边框为虚线  \n- dotted：边框为点线\n\n3、边框的合写分写\n\n边框简写：\n\n```css\n border: 1px solid red;  \n```\n\n边框分开写法：\n\n```css\n border-top: 1px solid red;  /* 只设定上边框， 其余同理 */   \n```\n\n#### 3.2、表格的细线边框\n\n1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。\n\n2、语法：\n\n```css\n border-collapse:collapse; \n```\n\ncollapse 单词是合并的意思\n\nborder-collapse: collapse; 表示相邻边框合并在一起\n\n#### 3.3、边框会影响盒子实际大小\n\n边框会额外增加盒子的实际大小。因此我们有两种方案解决：\n\n- 测量盒子大小的时候,不量边框。\n- 如果测量的时候包含了边框,则需要 width/height 减去边框宽度\n\n### 4、内边距（padding）\n\n#### 4.1、内边距的使用方式\n\n1、padding 属性用于设置内边距，即边框与内容之间的距离。\n\n2、语法：\n\n合写属性：\n\n![1571493298248](css基础/1571493298248.png)\n\n分写属性：\n\n![1571493260536](css基础/1571493260536.png)\n\n#### 4.2、内边距会影响盒子实际大小\n\n1、当我们给盒子指定 padding 值之后，发生了 2 件事情：\n\n1. 内容和边框有了距离，添加了内边距。\n2. padding影响了盒子实际大小。\n\n2、内边距对盒子大小的影响：\n\n- 如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。\n- 如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。\n\n3、解决方案：\n\n​\t\t如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。\n\n### 5、外边距（margin）\n\n#### 5.1、外边距的使用方式\n\nmargin 属性用于设置外边距，即控制盒子和盒子之间的距离。\n\n![1571493741272](css基础/1571493741272.png)\n\n#### 5.2、外边距典型应用\n\n外边距可以让块级盒子水平居中的两个条件：\n\n- 盒子必须指定了宽度（width）。\n- 盒子左右的外边距都设置为 auto 。\n\n常见的写法，以下三种都可以：\n\n```css\nmargin-left: auto;   margin-right: auto;\nmargin: auto;\nmargin: 0 auto;\n```\n\n注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。\n\n#### 5.3、外边距合并\n\n使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n主要有两种情况:\n\n1、相邻块元素垂直外边距的合并\n\n​\t\t当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。\n\n![1571494239103](css基础/1571494239103.png)\n\n解决方案：\n\t\t尽量只给一个盒子添加 margin 值。\n\n2、嵌套块元素垂直外边距的塌陷\n\n​\t\t对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。\n\n![1571494373778](css基础/1571494373778.png)\n\n解决方案：\n\n- 可以为父元素定义上边框。\n- 可以为父元素定义上内边距。\n- 可以为父元素添加 overflow:hidden。\n\n#### 5.4、清除内外边距\n\n​\t\t网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。\n\n```css\n * {\n    padding:0;   /* 清除内边距 */\n    margin:0;    /* 清除外边距 */\n  }\n```\n\n​\t\t注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了\n\n## 十一、css的其他样式\t\n\n### 1、圆角边框\n\n在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。\n\nborder-radius 属性用于设置元素的外边框圆角。\n\n语法：\n\n```css\n border-radius:length;    \n```\n\n- 参数值可以为数值或百分比的形式\n- 如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%\n- 该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角\n- 分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius\n- 兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用\n\n### 2、盒子阴影\n\nCSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。\n语法：\n\n```css\n box-shadow: h-shadow v-shadow blur spread color inset; \n```\n\n![1571541874805](css基础/1571541874805.png)\n\n### 3、文字阴影\n\n在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。\n语法：\n\n```css\n text-shadow: h-shadow v-shadow blur color;\n```\n\n![1571541954222](css基础/1571541954222.png)\n\n## 十二、浮动\n\n### 1、传统网页布局的三种方式\n\n​\tCSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：\n\n- 普通流（标准流）\n\n- 浮动\n\n- 定位\n\n  这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。\n\n注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。\n\n### 2、标准流（普通流/文档流）\n\n所谓的标准流:  就是标签按照规定好默认方式排列\n\n1. 块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table\n2. 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 \n\n以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。\n\n### 3、为什么需要浮动？\n\n​\t\t总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.\n\n​\t\t浮动最典型的应用：可以让多个块级元素一行内排列显示。\n\n​\t\t网页布局第一准则：**多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动**。\n\n### 4、什么是浮动？\n\n​\t\tfloat 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。\n\n语法：\n\n```css\n 选择器 { float: 属性值; }\n```\n\n![1571543209934](css基础/1571543209934.png)\n\n\n\n### 5、浮动特性\n\n加了浮动之后的元素,会具有很多特性,需要我们掌握的.\n\n1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)\n\n![1571544664994](css基础/1571544664994.png)\n\n2、浮动的元素会一行内显示并且元素顶部对齐\n\n![1571544725757](css基础/1571544725757.png)\n\n注意： \n\n​\t\t浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。\n\n3、浮动的元素会具有行内块元素的特性\n\n​\t\t浮动元素的大小根据内容来决定\n\n​\t\t浮动的盒子中间是没有缝隙的\n\n### 6、浮动元素经常和标准流父级搭配使用\n\n为了约束浮动元素位置, 我们网页布局一般采取的策略是:\n\n​\t\t先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧\n\n![1571544991989](css基础/1571544991989.png)\n\n## 十三、常见网页布局\n\n### 浮动布局注意点\n\n1、浮动和标准流的父盒子搭配。\n\n先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置\n\n2、一个元素浮动了，理论上其余的兄弟元素也要浮动。\n\n一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。\n\n浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.\n\n## 十四、清除浮动\n\n### 1、为什么需要清除浮动？\n\n​\t\t由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。\n\n![1571555883628](css基础/1571555883628.png)\n\n### 2、清除浮动本质\n\n清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度\n\n注意：\n\n- 如果父盒子本身有高度，则不需要清除浮动\n- 清除浮动之后，父级就会根据浮动的子盒子自动检测高度。\n- 父级有了高度，就不会影响下面的标准流了\n\n### 3、清除浮动样式\n\n语法：\n\n```css\n 选择器{clear:属性值;} \n```\n\n![1571555980419](css基础/1571555980419.png)\n\n我们实际工作中， 几乎只用 clear: both;\n\n清除浮动的策略是:  闭合浮动. \n\n### 4、清除浮动的多种方式\n\n#### 4.1、额外标签法\n\n额外标签法也称为隔墙法，是 W3C 推荐的做法。\n\n使用方式：\n\n​\t\t额外标签法会在浮动元素末尾添加一个空的标签。\n\n```html\n例如 <div style=\"clear:both\"></div>，或者其他标签（如<br />等）。\n```\n\n​\t\t优点： 通俗易懂，书写方便\n\n​\t\t缺点： 添加许多无意义的标签，结构化较差\n\n​\t\t注意： 要求这个新的空标签必须是块级元素。\n\n总结:\n\n​\t1、清除浮动本质是?\n\n​\t\t\t清除浮动的本质是清除浮动元素脱离标准流造成的影响\n\n​\t2、清除浮动策略是?\n\n​\t\t\t闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.\n\n​\t3、额外标签法?\n\n​\t\t\t隔墙法, 就是在最后一个浮动的子元素后面添\n\n​\t4、加一个额外标签, 添加 清除浮动样式.\n\n​\t\t\t实际工作可能会遇到,但是不常用\n\n#### 4.2、父级添加 overflow 属性\n\n可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。\n\n例如：\n\n```css\noverflow:hidden | auto | scroll;\n```\n\n优点：代码简洁\n\n缺点：无法显示溢出的部分\n\n注意：是给父元素添加代码\n\n#### 4.3、父级添加after伪元素\n\n:after 方式是额外标签法的升级版。给父元素添加：\n\n```css\n .clearfix:after {  \n   content: \"\"; \n   display: block; \n   height: 0; \n   clear: both; \n   visibility: hidden;  \n } \n .clearfix {  /* IE6、7 专有 */ \n   *zoom: 1;\n }   \n```\n\n优点：没有增加标签，结构更简单\n\n缺点：照顾低版本浏览器\n\n代表网站： 百度、淘宝网、网易等\n\n#### 4.4、父级添加双伪元素\n\n给父元素添加\n\n```css\n .clearfix:before,.clearfix:after {   content:\"\";   display:table;  } .clearfix:after {   clear:both; } .clearfix {    *zoom:1; }   \n```\n\n优点：代码更简洁\n\n缺点：照顾低版本浏览器\n\n代表网站：小米、腾讯等\n\n### 总结\n\n为什么需要清除浮动？\n\n1. 父级没高度。\n2. 子盒子浮动了。\n3. 影响下面布局了，我们就应该清除浮动了。\n\n![1571556500074](../../../../../Personal Files/leetcode/资料/阶段一：前端开发基础资料/02-CSS资料/06-前端基础CSS第四天（14-16小节）/笔记/images/1571556500074.png)\n\n## 十五、PS 切图\n\n### 1、图层切图\n\n```html\n最简单的切图方式：右击图层 → 导出 → 切片。\n```\n\n### 2、切片切图\n\n2.1、利用切片选中图片\n\n```\n 利用切片工具手动划出\n```\n\n2.2、导出选中的图片\n\n```html\n文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。\n```\n\n### 3、PS插件切图\n\n​\t\tCutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 \"导出 web 所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。\n\n官网：http://www.cutterman.cn/zh/cutterman\n\n注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。\n\n## 1. PS 切图\n\n### 1.1. 常见的图片格式\n\n| 序号 | 格式 | 特点和常用的用途                                             |\n| ---- | ---- | ------------------------------------------------------------ |\n| 1    | jpg  | JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们**产品类的图片** 经常用jpg格式的 |\n| 2    | gif  | GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 **经常用于一些图片小动画效果** |\n| 3    | png  | png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 **背景透明的图片** ,请选择png格式. |\n| 4    | psd  | PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. **对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离**. |\n\n\n\nPS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 \n\n### 1.2. 图层切图\n\n简单版步骤：\n\n​\t① 使用**移动工具**，点击需要的图片\n\n![1571299959992](css基础/1571299959992.png)\n\n​\t② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG\n\n![1571300150618](css基础/1571300150618.png)\n\n\n\n但是很多情况下,我们需要合并图层再导出:\n\n步骤：\n\n​\t① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  \n\n​\t② 图层菜单 → 合并图层(ctrl+e)   \n\n​\t![1571300529539](css基础/1571300529539.png)\n\n​\t③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG\n\n\n\n### 1.3. 切片切图\n\n步骤：\n\n​\t① 利用切片选中图片 ：利用切片工具手动划出\n\n![1571301270696](css基础/1571301270696.png) \n\n​\t② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。\n\n\n\n​\t注意：保存的时候，要选“选中的切片”：\n\n![1571301357818](css基础/1571301357818.png) \n\n### 1.4. 插件切图\n\n#### 1.4.1. 介绍\n\nCutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 \"导出web所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。 \n\n它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。\n\n\n\n#### 1.4.2. 安装\n\n注意： **cutterman插件要求你的ps 必须是完整版**，不能是绿色版，所以大家需要从新安装完整版本。\n\n查看 “窗口菜单”里面的“扩展功能”：\n\n​\t① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS\n\n​\t② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图\n\n![1571302032310](css基础/1571302032310.png)\n\n\n\n\n\n官网: http://www.cutterman.cn/zh/cutterman\n\n当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：\n\n![1571302286467](css基础/1571302286467.png)\n\n\n\n1.4.3 使用步骤\n\n​\t① 选择需要的图层\n\n​\t② 选择web端，点击web下面的下拉三角\n\n​\t③ 选择需要的图片格式\n\n​\t④ 设置好存储路径\n\n​\t⑤ 点击 “导出选中图层” 按钮\n\n![1571303715362](css基础/1571303715362.png) \n\n示意图：\n\n<img src=\"css基础/sample1.gif\" /> \n\n\n\n\n\n## 十六. CSS属性书写顺序（重点）\n\n**生活中衡量一个人有气质：**\n\n​\t穿着打扮  举止言行  等等  \n\n**编程中如何衡量一个人的代码能力**：\n\n​\t规范标准  优雅高质量 等等   一个词形容   专业    从代码中看出是否有经验..\n\n\n\n建议遵循以下顺序：\n\n1. **布局定位属性**：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）\n2. **自身属性**：width / height / margin / padding / border / background\n3. **文本属性**：color / font / text-decoration / text-align / vertical-align / white- space / break-word\n4. **其他属性（CSS3）**：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …\n\n**举例：**\n\n```css\n .jdc {\n    display: block;\n    position: relative;\n    float: left;\n    width: 100px;\n    height: 100px;\n    margin: 0 10px;\n    padding: 20px 0;\n    font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n    color: #333;\n    background: rgba(0,0,0,.5);\n    border-radius: 10px;\n } \n```\n\n\n\n\n\n## 十七. 学成在线页面制作\n\n页面展示：\n\n![1571304358699](css基础/1571304358699.png)\n\n\n\n学成在线，是典型的企业级网站。\n\n学习学成网的目的，是为了整体感知企业级网站布局流程，带着大家复习以前的知识。\n\n\n\n\n\n### 1.  前期准备素材\n\n- 学成在线PSD源文件\n- 开发工具  =  PS（切图） +  sublime（代码） + chrome（测试）\n\n### 2.  前期准备工作\n\n先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。\n\n1. 创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。\n\n2. 用vscode打开study目录文件夹.\n\n3. study 目录内新建 images 文件夹，用于保存图片。\n\n4. 新建首页文件 index.html（以后我们的网站**首页**统一命名规定为 **index.html** )。\n\n5. 新建 style.css 样式文件。我们本次采用外链样式表。\n\n6. 将样式引入到我们的 HTML 页面文件中。\n\n7. 样式表写入清除内外边距的样式，来检测样式表是否引入成功。\n\n![1571305757590](css基础/1571305757590.png) \n\n### 3. 页面布局整体思路\n\n为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：\n\n​\t1.必须确定页面的**版心**（可视区），我们**测量**可得知。\n\n​\t2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.\n\n​\t3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则\n\n​\t4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.\n\n​\t5.所以, 先理清楚**布局结构**,再写代码尤为重要. 这需要我们多写多积累.\n\n### 4. 页面制作\n\n**确定版心**：\n\n​\t这个页面的版心是 1200像素  ，每个版心都要水平居中对齐，所以，我们可以定义版心为公共类：\n\n```css\n.w {\n    width: 1200px;\n    margin: auto;\n}\n```\n\n#### 4.1. header头部制作\n\n**结构图如下：**\n\n<img src=\"css基础/1.png\" />\n\n- 1号是版心盒子 **header**  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。\n- 版心盒子 里面包含 2号盒子 **logo** 图标\n- 版心盒子 里面包含 3号盒子 **nav** 导航栏\n- 版心盒子 里面包含 4号盒子 **search** 搜索框\n- 版心盒子 里面包含 5号盒子 **user** 个人信息\n- 注意，要求里面的 **4个子盒子 必须都浮动**\n\n\n\n**导航栏注意点:**\n\n实际开发中，**重要的导航栏**，我们不会直接用链接a ，而是**用 li  包含链接(li+a)的做法**\n\n​\t1.li+a 语义更清晰，一看这就是有条理的列表型内容。\n\n​\t2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名\n\n**注意:** \n\n​\t1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.\n\n​\t2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字\n\n​\t3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 \n\n**4号盒子search的细节：**\n\n​\tsearch 搜索框的意思:  一个 search 大盒子里面包含 2个 表单\n\n​\t技巧：input和button都，属于行内块元素，会有缝隙，使用浮动，可以去缝隙。\n\n![1571307430101](css基础/1571307430101.png)\n\n#### 4.2. banner制作\n\n结构图如下：\n\n![1571314623135](css基础/1571314623135.png)\n\n<img src=\"css基础/2.png\" />\n\n\n\n- 1号盒子是通栏的大盒子**banner**， 不给宽度，给高度，给一个蓝色背景。\n- 2号盒子是版心 **w**， 要水平居中对齐。\n- 3号盒子版心内，左对齐 **subnav** 侧导航栏。\n- 4号盒子版心内，右对齐  **course** 课程。\n\n##### 4.2.1  subnav 侧导航栏 (左侧的)\n\n![1571314874385](css基础/1571314874385.png)   \n\n- subnav 盒子 背景色 黑色半透明\n- 重要的导航栏，li 包 a ，行高45px\n- a里面包含文字和span，span右浮动\n- 当鼠标经过a ，a里面的内容（文字和span）变蓝色\n\n\n\n##### 4.2.2  course课程表模块 (右侧的)\n\n结构图如下：\n\n <img src=\"css基础/6.png\" />\n\n- 1号盒子 是  228 * 300 的盒子 右浮动  **注意 浮动的元素 不会有外边距塌陷的问题**\n- 1号盒子内 分为 上下 两个 子盒子\n- 2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)\n- 3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)\n\n#### 4.3. 精品推荐小模块\n\n结构图如下：\n\n<img src=\"css基础/3.png\" />\n\n- **复习点：**  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color\n\n  \n\n- 大盒子水平居中 goods  精品 ，注意此处有个盒子阴影\n\n- 1号盒子是标题 H3  左侧浮动\n\n- 2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）\n\n- 3号盒子 右浮动 mod 修改\n\n#### 4.4. 精品推荐大模块\n\n结构图如下：\n\n<img src=\"css基础/4.png\" />\n\n- 1号盒子为最大的盒子 **box**  版心水平居中对齐\n- 2号盒子为上面部分 **box-hd**  -- 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动\n- 3号盒子为底下部分 **box-bd** --- 里面是无序列表 有 10个 小li 组成\n- 小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了\n- 复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。\n\n#### 4.5.  底部模块制作\n\n结构图如下：\n\n<img src=\"css基础/5.png\" >\n\n- 1号盒子通栏大盒子 底部 **footer**  给高度  底色是白色\n\n- 2号盒子版心水平居中\n\n- 3号盒子版权 **copyright**  左对齐 \n\n- 4号盒子 链接组 **links**  右对齐\n\n  \n\n\n\n## 十八. 定位(position) 介绍\n\n### 1.1 为什么使用定位\n\n> 我们先来看一个效果，同时思考一下**用标准流或浮动能否实现类似的效果**？\n\n**场景1**： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.\n\n<img src=\"css基础/01_定位示例1.gif\" />\n\n\n\n**场景2**：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。\n\n<img src=\"css基础/ding.png\" />\n\n\n\n> 结论**：要实现以上效果，**标准流 或 浮动都无法快速实现\n\n所以：\n\n1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。\n\n2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。\n\n\n\n### 1.2 定位组成\n\n**定位**：将盒子**定**在某一个位置，所以**定位也是在摆放盒子， 按照定位的方式移动盒子**\n\n定位也是用来布局的，它有两部分组成：\n\n> **定位 = 定位模式 + 边偏移**  \n\n**定位模式** 用于指定一个元素在文档中的定位方式。**边偏移**则决定了该元素的最终位置。\n\n\n\n#### 1.2.1 边偏移（方位名词）\n\n**边偏移** 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。\n\n| 边偏移属性 | 示例           | 描述                                                     |\n| ---------- | :------------- | -------------------------------------------------------- |\n| `top`      | `top: 80px`    | **顶端**偏移量，定义元素相对于其父元素**上边线的距离**。 |\n| `bottom`   | `bottom: 80px` | **底部**偏移量，定义元素相对于其父元素**下边线的距离**。 |\n| `left`     | `left: 80px`   | **左侧**偏移量，定义元素相对于其父元素**左边线的距离**。 |\n| `right`    | `right: 80px`  | **右侧**偏移量，定义元素相对于其父元素**右边线的距离**   |\n\n定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。\n\n#### 1.2.2 定位模式 (position)\n\n在 CSS 中，通过 `position` 属性定义元素的**定位模式**，语法如下：\n\n```css\n选择器 { \n    position: 属性值; \n}\n```\n\n定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。\n\n定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：\n\n| 值         |     语义     |\n| ---------- | :----------: |\n| `static`   | **静态**定位 |\n| `relative` | **相对**定位 |\n| `absolute` | **绝对**定位 |\n| `fixed`    | **固定**定位 |\n\n <img src=\"css基础/26定位的概念.png\">\n\n### 1.3 定位模式介绍\n\n#### 1.3.1.  静态定位(static) - 了解\n\n- **静态定位**是元素的**默认**定位方式，**无定位的意思**。它相当于 border 里面的none，静态定位static，不要定位的时候用。\n\n- 语法：\n\n  ```\n  选择器 { \n      position: static; \n  }\n  ```\n\n- 静态定位 按照标准流特性摆放位置，它没有边偏移。\n\n- 静态定位在布局时我们几乎不用的 \n\n#### 1.3.2. 相对定位(relative) - 重要\n\n- **相对定位**是元素在移动位置的时候，是相对于它自己**原来的位置**来说的（自恋型）。\n- 语法：\n\n```\n选择器 { \n\tposition: relative; \n}\n```\n\n- 相对定位的特点：（务必记住）\n\n  - 1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。\n\n  - 2.**原来**在标准流的**位置**继续占有，后面的盒子仍然以标准流的方式对待它。\n\n    因此，**相对定位并没有脱标**。它最典型的应用是给绝对定位当爹的。。。\n\n- 效果图：\n\n![相对定位案例](css基础/04_相对定位案例.png)\n\n\n\n#### 1.3.3. 绝对定位(absolute) - 重要  \n\n##### 1.3.3.1 绝对定位的介绍\n\n- **绝对定位**是元素在移动位置的时候，是相对于它**祖先元素**来说的（拼爹型）。\n\n- 语法：\n\n  ```\n   选择器 { \n   \tposition: absolute; \n   }\n  ```\n\n\n\n\n\n1. **完全脱标** —— 完全不占位置；  \n\n2. **父元素没有定位**，则以**浏览器**为准定位（Document 文档）。\n\n   <img src=\"css基础/05_绝对定位_父级无定位.png\" width=\"600\" />\n\n3. **父元素要有定位**\n\n   * 元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n<img src=\"css基础/06_绝对定位_父级有定位.png\" width=\"600\" />\n\n\n\n\n\n- **绝对定位的特点总结**：（务必记住）\n\n  1.如果**没有祖先元素**或者**祖先元素没有定位**，则以浏览器为基准定位（Document 文档）。\n\n  2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。\n\n  3.绝对定位**不再占有原先的位置**。所以绝对定位是脱离标准流的。（脱标）\n\n\n\n\n\n##### 1.3.3.2 定位口诀 —— 子绝父相\n\n弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。\n\n这个**“子绝父相”**太重要了，是我们学习定位的**口诀**，是定位中最常用的一种方式这句话的意思是：**子级是绝对定位的话，父级要用相对定位。**\n\n\n\n因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。\n\n①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。\n\n②父盒子需要加定位限制子盒子在父盒子内显示。\n\n③父盒子布局时，需要占有位置，因此父亲只能是相对定位。\n\n\n\n这就是子绝父相的由来，所以**相对定位经常用来作为绝对定位的父级**。\n\n总结： **因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位**\n\n当然，子绝父相不是永远不变的，如果父元素不需要占有位置，**子绝父绝**也会遇到。\n\n\n\n\n\n**疑问**：为什么在布局时，**子级元素**使用**绝对定位**时，**父级元素**就要用**相对定位**呢？\n\n观察下图，思考一下在布局时，**左右两个方向的箭头图片**以及**父级盒子**的定位方式。\n\n![子绝父相截图](css基础/07_子绝父相截图.png)\n\n<img src=\"css基础/27子绝父相.png\">\n\n**分析**：\n\n1. **方向箭头**叠加在其他图片上方，应该使用**绝对定位**，因为**绝对定位完全脱标**，完全不占位置。\n2. **父级盒子**应该使用**相对定位**，因为**相对定位不脱标**，后续盒子仍然以标准流的方式对待它。\n   * 如果父级盒子也使用**绝对定位**，会完全脱标，那么下方的**广告盒子**会上移，这显然不是我们想要的。\n\n**结论**：**父级要占有位置，子级要任意摆放**，这就是**子绝父相**的由来。\n\n\n\n#### 1.3.4. 固定定位(fixed) - 重要\n\n- **固定定位**是元素**固定于浏览器可视区的位置**。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。\n\n- 语法：\n\n  ```\n   选择器 { \n   \tposition: fixed; \n   }\n  ```\n\n- 固定定位的特点：（务必记住）：\n\n  1.以浏览器的可视窗口为参照点移动元素。\n\n  - 跟父元素没有任何关系\n  - 不随滚动条滚动。\n\n  2.固定定位**不在占有原先的位置**。\n\n- 固定定位也是**脱标**的，其实**固定定位也可以看做是一种特殊的绝对定位**。（认死理型） \n\n  - **完全脱标**—— 完全不占位置；\n  - 只认**浏览器的可视窗口** —— `浏览器可视窗口 + 边偏移属性` 来设置元素的位置；\n    - 跟父元素没有任何关系；单独使用的\n    - 不随滚动条滚动。\n\n> 固定定位举例：\n\n![固定定位案例](css基础/08_固定定位案例.png)\n\n**提示**：IE 6 等低版本浏览器不支持固定定位。\n\n\n\n#### 1.3.5 粘性定位(sticky) - 了解\n\n- **粘性定位**可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 \n\n- 语法：\n\n  ```\n   选择器 { \n       position: sticky; \n       top: 10px; \n   }\n  \n  ```\n\n- 粘性定位的特点：\n\n  1.以浏览器的可视窗口为参照点移动元素（固定定位特点）\n\n  2.粘性定位占有原先的位置（相对定位特点）\n\n  3.必须添加 top 、left、right、bottom **其中一个**才有效\n\n  跟页面滚动搭配使用。 兼容性较差，IE 不支持。\n\n  \n\n#### 1.3.6 定位总结\n\n| **定位模式**          | **是否脱标**         | **移动位置**           | **是否常用**                 |\n| --------------------- | -------------------- | ---------------------- | ---------------------------- |\n| static   静态定位     | 否                   | 不能使用边偏移         | 很少                         |\n| **relative 相对定位** | **否 (占有位置)**    | **相对于自身位置移动** | **基本单独使用**             |\n| **absolute绝对定位**  | **是（不占有位置）** | **带有定位的父级**     | **要和定位父级元素搭配使用** |\n| **fixed 固定定位**    | **是（不占有位置）** | **浏览器可视区**       | **单独使用，不需要父级**     |\n| sticky 粘性定位       | 否   (占有位置)      | 浏览器可视区           | 当前阶段少                   |\n\n- 一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。\n\n- 学习定位重点学会子绝父相。\n- 注意：\n\n1. **边偏移**需要和**定位模式**联合使用，**单独使用无效**；\n2. `top` 和 `bottom` 不要同时使用；\n3. `left` 和 `right` 不要同时使用。\n\n## 2. 综合案例：学成在线-hot  模块添加\n\n### **2. 1 案例截图**：\n\n![1571385860679](css基础/1571385860679.png) \n\n### 2.2 案例分析\n\n1. 一个大的 `li` 中包含 一个课程图片，课程介绍文字信息，还有hot的小图标；\n2. hot图片**重叠**在课程图片上面—— 脱标，不占位置，需要使用**绝对定位**；\n3. hot图片**重叠**在**li的右上方 —— 需要**使用边偏移确定准确位置。\n\n### 2.3 案例小结\n\n1. **子绝父相** —— **子元素**使用**绝对定位**，**父元素**使用**相对定位**；\n2. **与浮动的对比**：\n   * **绝对定位**：脱标，**利用边偏移指定准确位置**；\n   * **浮动**：脱标，不能指定准确位置，**让多个块级元素在一行显示**。\n\n> 课堂练习：模拟老师的随堂案例完成**哈根达斯**案例（5 分钟）。\n\n结构修改：\n\n```html\n<!-- 修改.box-bd里面的li标签内容，添加一个hot图标 -->\n\n<li>\n\t <!-- 添加hot小图片 -->\n    <em>\n        <img src=\"images/hot.png\" alt=\"\">\n    </em>\n    <img src=\"images/pic.png\" alt=\"\">\n    <h4>\n        Think PHP 5.0 博客系统实战项目演练\n    </h4>\n    <div class=\"info\">\n        <span>高级</span> • 1125人在学习\n    </div>\n</li>\n```\n\n样式修改：\n\n```css\n.box-bd ul li {\n    /* 子绝父相 */\n    /* 父元素相对定位 */\n    position: relative;\n    float: left;\n    width: 228px;\n    height: 270px;\n    background-color: #fff;\n    margin-right: 15px;\n    margin-bottom: 15px;\n   \n}\n.box-bd ul li > img {\n    width: 100%;\n}\n.box-bd ul li h4 {\n    margin: 20px 20px 20px 25px;\n    font-size: 14px;\n    color: #050505;\n    font-weight: 400;\n}\n.box-bd ul li em {\n     /* 子元素绝对定位 */\n    position: absolute;\n    top: 4px;\n    right: -4px;\n}\n```\n\n\n\n## 3. 定位(position)的应用\n\n### 3.1.  固定定位小技巧： 固定在版心左侧位置。\n\n小算法：\n\n1.让固定定位的盒子 left: 50%.  走到浏览器可视区（也可以看做版心） 的一半位置。\n\n2.让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置\n\n就可以让固定定位的盒子**贴着版心右侧对齐**了。\n\n<img src=\"css基础/1571388901848.png\" width='350'>\n\n\n\n<img src=\"css基础/1571389108805.png\" width='300'>\n\n\n\n案例效果：\n\n![1571389241926](css基础/1571389241926.png)\n\n```\n<style>\n        .w {\n            width: 800px;\n            height: 1400px;\n            background-color: pink;\n            margin: 0 auto;\n        }\n        .fixed {\n            position: fixed;\n            /* 1. 走浏览器宽度的一半 */\n            left: 50%;\n            /* 2. 利用margin 走版心盒子宽度的一半距离 */\n            margin-left: 405px;\n            width: 50px;\n            height: 150px;\n            background-color: skyblue;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"fixed\"></div>\n    <div class=\"w\">版心盒子 800像素</div>\n  \n</body>\n```\n\n\n\n### 3.2. 堆叠顺序（z-index）\n\n- 在使用**定位**布局时，可能会**出现盒子重叠的情况**。此时，可以使用 **z-index** 来控制盒子的前后次序 (z轴)\n\n- 语法：\n\n  ```\n  选择器 { \tz-index: 1; }\n  ```\n\n  \n\n- `z-index` 的特性如下：\n\n  1. **属性值**：**正整数**、**负整数**或 **0**，默认值是 0，数值越大，盒子越靠上；\t\n  2. 如果**属性值相同**，则按照书写顺序，**后来居上**；\n  3. 数字后面**不能加单位**。\n\n  **注意**：`z-index` 只能应用于**相对定位**、**绝对定位**和**固定定位**的元素，其他**标准流**、**浮动**和**静态定位**无效。\n\n\n\n- 应用 `z-index` 层叠等级属性可以**调整盒子的堆叠顺序**。如下图所示：\n\n![zindex示意图](css基础/12_zindex示意图.png)\n\n\n\n> 案例演示：堆叠顺序。\n>\n> \n\n\n\n## 4. 定位(position)的拓展\n\n### 4.1 绝对定位的盒子居中\n\n> **注意**：加了**绝对定位/固定定位的盒子**不能通过设置 `margin: auto` 设置**水平居中**。\n>\n> 但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：\n\n![绝对定位水平居中](css基础/10_绝对定位水平居中.png)\n\n1. `left: 50%;`：让**盒子的左侧**移动到**父级元素的水平中心位置**；\n2. `margin-left: -100px;`：让盒子**向左**移动**自身宽度的一半**。\n\n\n\n\n\n**盒子居中定位示意图**\n\n![绝对定位居中示意图](css基础/11_绝对定位居中示意图.png)\n\n### 4.2 定位特殊特性\n\n绝对定位和固定定位也和浮动类似。\n\n1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。\n\n2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。\n\n\n\n前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:\n\n- 可以用inline-block  转换为行内块\n- 可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）\n- 绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。\n\n所以说， 一个行内的盒子，如果加了**浮动**、**固定定位**和**绝对定位**，不用转换，就可以给这个盒子直接设置宽度和高度等。\n\n### 4.3 脱标的盒子不会触发外边距塌陷\n\n浮动元素、**绝对定位(固定定位）**元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）\n\n也就是说，我们给盒子改为了浮动或者定位，就不会有垂直**外边距合并的问题**了。\n\n\n\n### 4.4 绝对定位（固定定位）会完全压住盒子\n\n浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）\n\n但是绝对定位（固定定位） 会压住下面标准流所有的内容。\n\n浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素\n\n<img src=\"css基础/文字环绕图片.png\">\n\n## 5. 综合案例 - 淘宝轮播图(重点)\n\n### 5.1 效果图\n\n<img src=\"css基础/淘宝焦点图.png\" width='600'>\n\n### 5.2 布局分析\n\n![1571397019689](css基础/1571397019689.png)\n\n\n\n### 5.3 步骤\n\n1. 大盒子我们类名为：  tb-promo      淘宝广告\n\n2. 里面先放一张图片。\n\n3. 左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   \n\n   ​\t左按钮样式（border-radius：左上，右上，右下，左下），\n\n   ​\t右按钮定位，提取左右按钮共同的样式代码（并集选择器）\n\n4. 底侧小圆点ul 继续做。 类名为 promo-nav     \n\n   ​\t中间长方形椭圆 ul的定位（水平居中，离底部15px）  \n\n   ​\t长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式\n\n\n\n### 5.4 知识点：圆角矩形设置4个角\n\n圆角矩形可以为4个角分别设置圆度， 但是是有顺序的\n\n```\nborder-top-left-radius:20px;border-top-right-radius:20px;border-bottom-right-radius:20px;border-bottom-left-radius:20px;\n```\n\n* 如果4个角，数值相同\n\n  ~~~css\n  border-radius: 15px;\n  ~~~\n\n* 里面数值不同，我们也可以按照简写的形式，具体格式如下:\n\n~~~css\nborder-radius: 左上角 右上角  右下角  左下角;\n~~~\n\n还是遵循的顺时针。\n\n\n\n### 5.5 代码参考\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>淘宝轮播图做法</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        li {\n            list-style: none;\n        }\n\n        .tb-promo {\n            position: relative;\n            width: 520px;\n            height: 280px;\n            background-color: pink;\n            margin: 100px auto;\n        }\n\n        .tb-promo img {\n            width: 520px;\n            height: 280px;\n        }\n\n        /* 并集选择器可以集体声明相同的样式 */\n        .prev,\n        .next {\n            position: absolute;\n            /* 绝对定位的盒子垂直居中 */\n            top: 50%;\n            margin-top: -15px;\n            /* 加了绝对定位的盒子可以直接设置高度和宽度 */\n            width: 20px;\n            height: 30px;\n            background: rgba(0, 0, 0, .3);\n            text-align: center;\n            line-height: 30px;\n            color: #fff;\n            text-decoration: none;\n        }\n\n        .prev {\n            left: 0;\n            /* border-radius: 15px; */\n            border-top-right-radius: 15px;\n            border-bottom-right-radius: 15px;\n        }\n\n        .next {\n            /* 如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top */\n            right: 0;\n            /* border-radius: 15px; */\n            border-top-left-radius: 15px;\n            border-bottom-left-radius: 15px;\n        }\n        .promo-nav {\n            position: absolute;\n            bottom: 15px;\n            left: 50%;\n            margin-left: -35px;\n            width: 70px;\n            height: 13px;\n            /* background-color: pink; */\n            background: rgba(255,255,255, .3);\n            border-radius: 7px;\n        }\n        .promo-nav li {\n            float: left;\n            width: 8px;\n            height: 8px;\n            background-color: #fff;\n            border-radius: 50%;\n            margin: 3px;\n        }\n        /* 不要忘记选择器权重的问题 */\n       .promo-nav .selected {\n            background-color: #ff5000;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"tb-promo\">\n        <img src=\"images/tb.jpg\" alt=\"\">\n        <!-- 左侧按钮箭头 -->\n        <a href=\"#\" class=\"prev\"> &lt; </a>\n        <!-- 右侧按钮箭头 -->\n        <a href=\"#\" class=\"next\"> &gt; </a>\n        <!-- 小圆点 -->\n        <ul class=\"promo-nav\">\n            <li class=\"selected\"></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n        </ul>\n    </div>\n</body>\n\n</html>\n```\n\n\n\n## 6. 网页布局总结\n\n通过盒子模型，清楚知道大部分html标签是一个盒子。\n\n通过CSS浮动、定位 可以让每个盒子排列成为网页。\n\n一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。\n\n### 6.1. 标准流 \n\n可以让盒子上下排列或者左右排列，**垂直的块级盒子显示就用标准流布局**。\n\n### 6.2. 浮动\n\n可以让多个块级元素一行显示或者左右对齐盒子，**多个块级盒子水平显示就用浮动布局**\n\n### 6.3. 定位\n\n定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。**如果元素自由在某个盒子内移动就用定位布局。**\n\n\n\n\n\n## 7. 元素的显示与隐藏\n\n- 目的（本质）\n\n  ​\t让一个元素在页面中消失或者显示出来\n\n- 场景\n\n  ​\t类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！\n\n### 7.1. display 显示（重点）\n\n- display 设置或检索对象是否及如何显示。\n\n  ```\n  display: none 隐藏对象display：block 除了转换为块级元素之外，同时还有显示元素的意思。\n  ```\n\n- 特点： display 隐藏元素后，**不再占**有原来的位置。\n\n- 后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：\n\n  > 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛\n\n<img src=\"css基础/29none.png\">\n\n> \n\n### 7.2. visibility 可见性 （了解）\n\n- visibility 属性用于指定一个元素应可见还是隐藏。\n\n  ```\n  visibility：visible ; 　元素可视visibility：hidden; 　  元素隐藏\n  ```\n\n- 特点：**visibility 隐藏元素后，继续占有原来的位置**。（停职留薪）\n\n  \n\n- 如果隐藏元素想要原来位置， 就用 visibility：hidden\n\n- 如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）\n\n<img src=\"css基础/30visibility.png\">\n\n### 7.3. overflow 溢出（重点）\n\n- overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。\n\n| 属性值      | 描述                                       |\n| ----------- | ------------------------------------------ |\n| **visible** | 不剪切内容也不添加滚动条                   |\n| **hidden**  | 不显示超过对象尺寸的内容，超出的部分隐藏掉 |\n| **scroll**  | 不管超出内容否，总是显示滚动条             |\n| **auto**    | 超出自动显示滚动条，不超出不显示滚动条     |\n\n-  一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。\n-  但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。\n\n\n\n<img src=\"css基础/33overflow.png\">\n\n\n\n- 实际开发场景：\n\n1. 清除浮动\n2. 隐藏超出内容，隐藏掉,  不允许内容超过父盒子。\n\n### 7.4. 显示与隐藏总结\n\n| 属性                           | 区别                   | 用途                                                         |\n| ------------------------------ | ---------------------- | ------------------------------------------------------------ |\n| **display 显示     （重点）**  | 隐藏对象，不保留位置   | 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛 |\n| **visibility 可见性 （了解）** | 隐藏对象，保留位置     | 使用较少                                                     |\n| **overflow 溢出（重点）**      | 只是隐藏超出大小的部分 | 1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围     |\n\n\n\n## 8 综合案例：土豆网鼠标经过显示遮罩\n\n### 8.1. 效果图\n\n<img src=\"css基础/土豆网案例.png\">\n\n### 8.2. 案例目标\n\n1.练习元素的显示与隐藏\n\n2.练习元素的定位\n\n### 8.3. 核心原理\n\n原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。\n\n遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。\n\n### 8.4. 代码参考\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>仿土豆网显示隐藏遮罩案例</title>\n    <style>\n        .tudou {\n            position: relative;\n            width: 444px;\n            height: 320px;\n            background-color: pink;\n            margin: 30px auto;\n        }\n\n        .tudou img {\n            width: 100%;\n            height: 100%;\n        }\n\n        .mask {\n            /* 隐藏遮罩层 */\n            display: none;\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, .4) url(images/arr.png) no-repeat center;\n        }\n\n        /* 当我们鼠标经过了 土豆这个盒子，就让里面遮罩层显示出来 */\n        .tudou:hover .mask {\n            /* 而是显示元素 */\n            display: block;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n</body>\n\n</html>\n```\n\n# CSS高阶技巧\n\n## 1. 精灵图（重点）\n\n### 1.1 为什么需要精灵图\n\n![1571482435259](css基础/1571482435259.png)\n\n一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。\n\n**为什么使用精灵图（目的）：**\n\n​\t**为了有效地减少服务器接收和发送请求的次数**，**提高**页面的**加载速度**，出现了 **CSS 精灵技术**（也称 CSS Sprites、CSS 雪碧）。\n\n**核心原理**：\n\n​\t将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。\n\n**精灵图举例**:\n\n![1571519067073](css基础/1571519067073.png)\n\n### 1.2 精灵图（sprites）的使用\n\n使用精灵图核心：\n\n1. 精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。\n2. 这个大图片也称为 sprites  精灵图  或者 雪碧图\n3. 移动背景图片位置， 此时可以使用 background-position 。\n4. 移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同\n5. 因为一般情况下都是往上往左移动，所以数值是负值。\n6. 使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。\n\n\n\n使用精灵图核心总结：\n\n1. 精灵图主要**针对于小的背景图片**使用。\n\n2. 主要借助于背景位置来实现---**background-position** 。\n\n3. 一般情况下精灵图都是**负值**。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）\n\n### 1.3 案例：拼出自己名字\n\n#### 1.3.1 案例效果\n\n![1571519368229](css基础/1571519368229.png)\n\n#### 1.3.2 代码参考\n\n结构\n\n```html\n<span class=\"p\">p</span>\n<span class=\"i\">i</span>\n<span class=\"n\">n</span>\n<span class=\"k\">k</span>\n```\n\n样式\n\n```css\nspan {\n    display: inline-block;\n    background: url(images/abcd.jpg) no-repeat;\n}\n.p {\n    width: 100px;\n    height: 112px;\n    /* background-color: pink; */\n    background-position:  -493px -276px;\n}\n.i {\n    width: 60px;\n    height: 108px;\n    /* background-color: pink; */\n    background-position: -327px -142px;\n}\n.n {\n    width: 108px;\n    height: 109px;\n    /* background-color: pink; */\n    background-position: -215px -141px;\n}\n.k {\n    width: 105px;\n    height: 114px;\n    /* background-color: pink; */\n    background-position: -495px -142px;\n}\n```\n\n## 2. 字体图标\n\n### 2.1 字体图标的产生\n\n字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。\n\n精灵图是有诸多优点的，但是缺点很明显。\n\n1.图片文件还是比较大的。\n\n2.图片本身放大和缩小会失真。\n\n3.一旦图片制作完毕想要更换非常复杂。\n\n此时，有一种技术的出现很好的解决了以上问题，就是**字体图标 iconfont**。\n\n**字体图标**可以为前端工程师提供一种方便高效的图标使用方式，**展示的是图标，本质属于字体**。\n\n### 2.2 字体图标的优点\n\n**轻量级**：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求\n\n- 灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等\n- 兼容性：几乎支持所有的浏览器，请放心使用\n- 注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。\n\n**总结：**\n\n1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。![1571519724473](css基础/1571519724473.png)\n\n2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。\n\n![1571519739775](css基础/1571519739775.png)\n\n\n\n**使用步骤**\n\n字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：\n\n1.字体图标的下载 \n\n2.字体图标的引入 （引入到我们html页面中）\n\n3.字体图标的追加 （以后添加新的小图标）\n\n### **2.3** **字体图标的下载**\n\n**推荐下载网站：**\n\n- **icomoon** **字库**  http://icomoon.io    推荐指数  **★★★★★**\n\nIcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n- **阿里** **iconfont** **字库**   http://www.iconfont.cn/   推荐指数   **★★★★★** \n\n这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！\n\n### **2.4** **字体图标的引入**\n\n**下载完毕之后，注意原先的文件不要删，后面会用**。\n\n1. 把下载包里面的 **fonts** 文件夹放入页面根目录下\n\n![1571520092646](css基础/1571520092646.png)\n\n\n\n* **字体文件格式**\n\n不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。\n\n1).TureType(  **.ttf**  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；\n\n2).Web Open Font Format( **.woff** )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；\n\n3).Embedded Open Type( **.eot** )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；\n\n4).SVG(  .**svg**  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；\n\n\n\n2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。\n\n一定注意字体文件路径的问题\n\n```\n @font-face {\n   font-family: 'icomoon';\n   src:  url('fonts/icomoon.eot?7kkyc2');\n   src:  url('fonts/icomoon.eot?7kkyc2#iefix') format('embedded-opentype'),\n     url('fonts/icomoon.ttf?7kkyc2') format('truetype'),\n     url('fonts/icomoon.woff?7kkyc2') format('woff'),\n     url('fonts/icomoon.svg?7kkyc2#icomoon') format('svg');\n   font-weight: normal;\n   font-style: normal;\n }\n\n```\n\n\n\n3. html 标签内添加小图标。\n\n![1571520411345](css基础/1571520411345.png)\n\n4. 给标签定义字体。\n\n  ```\n span {\n   font-family: \"icomoon\";\n }\n  ```\n\n  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 \n\n  ![1571520485350](css基础/1571520485350.png)\n\n### 2.5 字体图标的追加\n\n如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。\n\n把压缩包里面的 **selection.json** 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。\n\n![1571520554317](css基础/1571520554317.png)\n\n### 2.6 字体图标加载的原理：\n\n![1571520617270](css基础/字体图标加载的原理.gif)\n\n## 3. CSS 三角\n\n### 3.1 介绍\n\n网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。\n\n一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：\n\n![1571520965966](css基础/1571520965966.png)\n\n```css\n div {\n \twidth: 0; \n    height: 0;\n    border: 50px solid transparent;\n\tborder-color: red green blue black;\n\tline-height:0;\n    font-size: 0;\n }\n```\n\n1. 我们用css 边框可以模拟三角效果\n2. 宽度高度为0\n3. 我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了\n4. 为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;\n\n### 3.2 案例：京东三角\n\n#### 3.2.1效果图\n\n![1571521183026](css基础/1571521183026.png)\n\n#### 3.2.2 代码参考\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>CSS 三角制作</title>\n    <style>\n        .box1 {\n            width: 0;\n            height: 0;\n            /* border: 10px solid pink; */\n            border-top: 10px solid pink;\n            border-right: 10px solid red;\n            border-bottom: 10px solid blue;\n            border-left: 10px solid green;\n        }\n        .box2 {\n            width: 0;\n            height: 0;\n            border: 50px solid transparent;\n            border-left-color: pink;\n            margin: 100px auto;\n        }\n        .jd {\n            position: relative;\n            width: 120px;\n            height: 249px;\n            background-color: pink;\n        }\n        .jd span {\n            position: absolute;\n            right: 15px;\n            top: -10px;\n            width: 0;\n            height: 0;\n            /* 为了照顾兼容性 */\n            line-height: 0;  \n            font-size: 0;\n            border: 5px solid transparent;\n            border-bottom-color: pink;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"jd\">\n        <span></span>\n    </div>\n</body>\n</html>\n```\n\n\n\n## 4. CSS 用户界面样式\n\n**什么是界面样式**\n\n所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。\n\n- 更改用户的鼠标样式 \n- 表单轮廓\n- 防止表单域拖拽\n\n### 4.1 鼠标样式 cursor\n\n```css\n li {\n \tcursor: pointer; \n }\n```\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\n\n![1571521805183](css基础/1571521805183.png)\n\n### 4.2 轮廓线 outline\n\n给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。\n\n```css\n input {\n \toutline: none; \n }\n```\n\n### 4.3 防止拖拽文本域 resize\n\n 实际开发中，我们文本域右下角是不可以拖拽的。\n\n```css\n textarea{  \tresize: none; }\n```\n\nvertical-align 属性应用\n\n## 5. vertical-align 属性应用\n\nCSS 的 **vertical-align** 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。\n\n官方解释： 用于设置一个元素的**垂直对齐方式**，但是它只针对于行内元素或者行内块元素有效。\n\n语法：\n\n```css\nvertical-align : baseline | top | middle | bottom \n```\n\n![1571522023413](css基础/1571522023413.png)\n\n![1571522040645](css基础/1571522040645.png)\n\n### **5.1** **图片、表单和文字对齐**\n\n图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。\n\n![1571522093729](css基础/1571522093729.png)\n\n此时可以给图片、表单这些行内块元素的 **vertical-align 属性设置为 middle** 就可以让文字和图片垂直居中对齐了。\n\n### 5.2 解决图片底部默认空白缝隙问题\n\nbug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。\n\n主要解决方法有两种：\n\n1.**给图片**添加 **vertical-align:middle | top| bottom** 等。 （提倡使用的）\n\n2.把图片转换为块级元素  **display: block**; \n\n![1571522162225](css基础/1571522162225.png)\n\n\n\n## 6. 溢出的文字省略号显示\n\n### 6.1 单行文本溢出显示省略号\n\n![1571522317809](css基础/1571522317809.png)\n\n单行文本溢出显示省略号--必须满足三个条件：\n\n```css\n  /*1. 先强制一行内显示文本*/\n   white-space: nowrap;  （ 默认 normal 自动换行）\n   \n  /*2. 超出的部分隐藏*/\n   overflow: hidden;\n   \n  /*3. 文字用省略号替代超出的部分*/\n   text-overflow: ellipsis;\n```\n\n\n\n### 6.2 多行文本溢出显示省略号（了解）\n\n![1571522334591](css基础/1571522334591.png)\n\n\n\n多行文本溢出显示省略号，**有较大兼容性问题**，适合于webKit浏览器或移动端（移动端大部分是webkit内核）\n\n```css\n/*1. 超出的部分隐藏 */\noverflow: hidden;\n\n/*2. 文字用省略号替代超出的部分 */\ntext-overflow: ellipsis;\n\n/* 3. 弹性伸缩盒子模型显示 */\ndisplay: -webkit-box;\n\n/* 4. 限制在一个块元素显示的文本的行数 */\n-webkit-line-clamp: 2;\n\n/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */\n-webkit-box-orient: vertical;\n```\n\n**更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。**\n\n\n\n## 7. 常见布局技巧\n\n**巧妙利用一个技术更快更好的布局：**\n\n1. margin负值的运用\n2. 文字围绕浮动元素\n3. 行内块的巧妙运用\n4. CSS三角强化\n\n### 7.1. margin负值运用\n\n![1571522666082](css基础/1571522666082.png)\n\n![1571522683897](css基础/1571522683897.png)\n\n1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框\n\n2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）\n\n### 7.2 文字围绕浮动元素\n\n**效果**\n\n![1571522777745](css基础/1571522777745.png)\n\n**布局示意图**\n\n![1571522761996](css基础/1571522761996.png)\n\n**巧妙运用浮动元素不会压住文字的特性**\n\n### 7.3 行内块巧妙运用\n\n![1571522898744](css基础/1571522898744.png)\n\n页码在页面中间显示:\n\n1. 把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;\n2. 利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中\n\n![1571522910580](css基础/1571522910580.png)\n\n### 7.4. CSS 三角强化 案例\n\n#### **7.4.1 原理**\n\n![1571550959181](css基础/1571550959181.png)\n\n![1571551000391](css基础/1571551000391.png)\n\n![1571548058053](css基础/1571548058053.png)\n\n\n\n```html\n<style>\n    .box1 {\n        width: 0;\n        height: 0;\n        \n        /* 把上边框宽度调大 */\n        /* border-top: 100px solid transparent;\n        border-right: 50px solid skyblue; */\n        /* 左边和下边的边框宽度设置为0 */\n        /* border-bottom: 0 solid blue;\n        border-left: 0 solid green; */\n        \n        /* 1.只保留右边的边框有颜色 */\n        border-color: transparent red transparent transparent;\n        /* 2. 样式都是solid */\n        border-style: solid;\n        /* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */\n        border-width: 100px 50px 0 0 ;\n    }\n\n</style>\n</head>\n<body>\n    <div class=\"box1\"></div>\n</body>\n```\n\n#### 7.4.2 案例效果\n\n![1571548099631](css基础/1571548099631.png)\n\n#### **7.4.3 代码参考**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>CSS三角强化的巧妙运用</title>\n        <style>\n            .price {\n                width: 160px;\n                height: 24px;\n                line-height: 24px;\n                border: 1px solid red;\n                margin: 0 auto;\n            }\n            .miaosha {\n                position: relative;\n                float: left;\n                width: 90px;\n                height: 100%;\n                background-color:red;\n                text-align: center;\n                color: #fff;\n                font-weight: 700;\n                margin-right: 8px;\n\n            }\n            .miaosha i {\n                position: absolute;\n                right: 0;\n                top: 0;\n                width: 0;\n                height: 0;\n                border-color: transparent #fff transparent transparent;\n                border-style: solid;\n                border-width: 24px 10px 0 0;\n            }\n            .origin {\n                font-size: 12px;\n                color: gray;\n                text-decoration: line-through;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"price\">\n            <span class=\"miaosha\">\n                ¥1650\n                <i></i>\n            </span>\n            <span class=\"origin\">¥5650</span>\n        </div>\n    </body>\n</html>\n```\n\n## 8. CSS 初始化\n\n不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化\n\n简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）\n\n每个网页都必须首先进行 CSS初始化。\n\n这里我们以 京东CSS初始化代码为例。\n\n**Unicode编码字体：**\n\n把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。\n\n比如：\n\n黑体 \\9ED1\\4F53\n宋体 \\5B8B\\4F53\n微软雅黑 \\5FAE\\8F6F\\96C5\\9ED1\n","source":"_posts/css基础.md","raw":"---\ntitle: css基础\ndate: 2021-05-19 10:22:37\ntags:\n---\n\n# css基础\n## 一.css简介\n\n​    CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.\n​    有时我们也会称之为 CSS 样式表或级联样式表。\n​    CSS 是也是一种标记语言\n​    CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。\n​    CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。\n​    CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离\n\n![](css基础/小鸟.png)\n\n### css语法规范\n​    1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解CSS 样式规则。\n​    2.CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。\n\n![](css基础/css属性规则.png)\n\n 1.选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式\n 2.属性和属性值以“键值对”的形式出现\n 3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等\n 4.属性和属性值之间用英文“:”分开\n 5.多个“键值对”之间用英文“;”进行区分\n 例如：\n    所有的样式，都包含在 \\<style> 标签内，表示是样式表。\\<style> 一般写到 \\</head> 上方\n\n```\n    <head>\n        <style>\n            h4 {\n                color: blue;\n                font-size: 100px;\n            }\n        </style>\n    </head>\n```\n\n\n\n### css代码风格：\n\n    1. 样式格式书写\n        1.紧凑格式   \n            h3 { color: deeppink;font-size: 20px;}\n        2.展开格式   \n         h3 {\n            color: pink;\n            font-size: 20px;    \n         }\n        强烈推荐第二种格式， 因为更直观。\n    \n            2. 样式大小写风格\n            1.小写格式\n                h3 {\n                color: pink;\n                }\n            2.大写格式\n                  H3 {\n                COLOR: PINK;   \n            }\n            强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。\n            \n                3. 样式空格风格\n        1. h3 {\n        color: pink;    \n        }\n            属性值前面，冒号后面，保留一个空格\n        选择器（标签）和大括号中间保留空格\n            ### css选择器的作用\n        答：选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。  简单来说，就是选择标签用的。\n        ​    ![](css基础/css属性规则.png)\n            找到所有的 h1 标签。  选择器（选对人）\n            设置这些标签的样式，比如颜色为红色（做对事)。\n        \n            ### css基础选择器\n\n基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器\n#### 标签选择器：\n​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。\n语法：\n​    标签选择器{\n​        属性：属性值\n​        ...\n​    }\n作用：\n​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。\n\n#### 类选择器\n\n​    如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.\n语法：\n​    .类名 {\n​        属性1: 属性值1;  \n​        ...\n​    } \n​    结构需要用class属性来调用  class  类的意思\n​    \\<div class=\"类名\"> 变红色 \\</div>\n​    1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。\n​    2.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。\n​    3.类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。\n​    4.可以理解为给这个标签起了一个名字，来表示。\n​    5.长名称或词组可以使用中横线来为选择器命名。\n​    6.不要使用纯数字、中文等命名，尽量使用英文字母来表示。\n​    7.命名要有意义，尽量使别人一眼就知道这个类名的目的。\n#### 多类名选择器\n​    我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.\n​    简单理解就是一个标签有多个名字. \n\n![](css基础/淘宝网多类名.png)\n    多类名的具体使用：\n        1. \\<div class=\"red font20\">亚瑟\\</div>\n        注意：\n        ​        1.在标签class 属性中写 多个类名\n        ​        2.多个类名中间必须用空格分开\n        ​        3.这个标签就可以分别具有这些类名的样式\n#### id选择器：\n​    id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。\n​    HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#\" 来定义。\n​    语法：\n​         #id名 {\n​            属性1: 属性值1;  \n​            ...\n​        } \n​        注意：id 属性只能在每个 HTML 文档中出现一次\n\n#### id选择器和类选择器的区别：\n\n​    1.类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。\n​    2.id 选择器好比人的身份证号码，全中国是唯一的，不得重复。\n​    3.id 选择器和类选择器最大的不同在于使用次数上。\n​    4.类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。\n\n![](css基础/id与类名的区别.png)\n\n#### 通配符选择器：\n\n​    语法：\n        * {\n            属性1: 属性值1;  \n            ...\n                }\n        通配符选择器不需要调用， 自动就给所有的元素使用样式\n        特殊情况才使用，后面讲解使用场景(以下是清除所有的元素标签的内外边距,后期讲)\n     \n               * {\n              margin: 0;\n          padding: 0;\n               } \n            \n              #### 选择器总结\n\n![](css基础/基础选择器总结.png)\n\n## 二.css字体属性:\n### 字体大小：\n\n​    CSS 使用 font-size 属性定义字体大小。 \n语法：\n​     p {  \n​        font-size: 20px; \n​    }\n​    1.px（像素）大小是我们网页的最常用的单位\n​    2.谷歌浏览器默认的文字大小为16px\n​    3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小\n​    4.可以给 body 指定整个页面文字的大小\n\n### 字体粗细：\n\n​    CSS 使用 font-weight 属性设置文本字体的粗细。\n语法：\n​    p {  \n​        font-weight: bold; \n​    }\n\n![](css基础/字体粗细.png)\n\n1.学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗\n2.实际开发时，我们更喜欢用数字表示粗细\n### 字体样式：\n​    CSS 使用 font-style 属性设置文本的风格。\n语法：\n​    p {  \n​        font-style: normal;\n​    }\n\n![](css基础/文字倾斜.png)\n\n### 字体的综合写法\n\n字体属性可以把以上文字样式综合来写, 这样可以更节约代码:\n\n body {   font: font-style  font-weight  font-size/line-height  font-family;}\n\n使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用\n\n### 字体总结：\n\n![](css基础/字体总结.png)\n\n## 三.css文本属性：\n### 文本颜色：\n\n​    color 属性用于定义文本的颜色。\n语法：\n​    div { \n​        color: red;\n​    }\n\n![](css基础/颜色值.png)\n\n开发中最常用的是十六进制\n\n### 文本对齐：\n\ntext-align 属性用于设置元素内文本内容的水平对齐方式。\n语法：\n    div { \n        text-align: center;\n    }\n\n![](css基础/对齐文本.png)\n\n### 修饰文本：\n\n​    语法：\n​     div { \n​        text-decoration：underline；\n​     }\n\n![](css基础/修饰文本.png)\n\n重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.\n\n### 文本缩进\n语法：\n    div { \n        text-indent：20px；\n    }\n    div { \n        text-indent：2em；\n    }\n\n![](css基础/文本缩进.png)\n\n    em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。\n\n### 行间距：\n​    line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离\n语法：\n​    p { \n​        line-height: 26px;\n​    }\n​    行高的文本分为 上间距  文本高度 下间距 = 行间距\n## 四.css样式表：\n​    按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类： \n\n### 行内样式表（行内式）\n\n​        行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.\n​        语法：\n\n            <div style=\"color: red; font-size: 12px;\">青春不常在，抓紧谈恋爱</div>\n​        1.style 其实就是标签的属性\n​        在双引号中间，写法要符合 CSS 规范\n​        2.可以控制当前的标签设置样式\n​        3.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用\n​        4.使用行内样式表设定 CSS，通常也被称为行内式引入\n\n### 内部样式表（嵌入式）\n​        内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 \\<style> 标签中\n​        语法：\n\n```\n            <style>\n                div {\n                color: red;\n                font-size: 12px;\n                }\n            </style>\n```\n\n​        1.\\<style> 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的\\<head>标签中\n​        2.通过此种方式，可以方便控制当前整个页面中的元素样式设置\n​        3.代码结构清晰，但是并没有实现结构与样式完全分离\n​        4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式\n### 外部样式表（链接式）\n​    实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用.\n​    引入外部样式表分为两步：\n\n    1. 新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。\n        2. 在 HTML 页面中，使用\\<link> 标签引入这个文件。\n        语法：\n            \\<link rel=\"stylesheet\"  href=\"css文件路径\">\n\n![](css基础/css引入方式总结.png)\n\n## Chrome调试工具：\n\n![](css基础/谷歌调试工具.png)\n\n 1.Ctrl+滚轮 可以放大开发者工具代码大小。\n 2.左边是 HTML 元素结构，右边是 CSS 样式。\n 3.右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。\n 4.Ctrl + 0 复原浏览器大小。\n 5.如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。\n 6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。\n\n\n\n## 五、emmet语法\n\n### 1、简介\n\n​\t\tEmmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法。\n\n​\t\t快速生成HTML结构语法\n\n​\t\t快速生成CSS样式语法\n\n### 2、快速生成HTML结构语法\n\n- 生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 \\<div>\\</div>\n- 如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div\n- 如果有父子级关系的标签，可以用 >  比如   ul > li就可以了\n- 如果有兄弟关系的标签，用  +  就可以了 比如 div+p  \n- 如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了\n- 如果生成的div 类名是有顺序的， 可以用 自增符号  $ \n- 如果想要在生成的标签内部写内容可以用  { }  表示\n\n### 3、快速生成CSS样式语法\n\nCSS 基本采取简写形式即可\n\n​\t\t比如 w200   按tab  可以 生成  width: 200px;\n\n​\t\t比如 lh26px   按tab  可以生成  line-height: 26px;\n\n### 4、快速格式化代码\n\nVscode  快速格式化代码:   shift+alt+f\n\n也可以设置 当我们 保存页面的时候自动格式化代码:\n\n1）文件 ------.>【首选项】---------->【设置】；\n\n2）搜索emmet.include;\n\n3）在settings.json下的【工作区设置】中添加以下语句：\n\n​\t\t\"editor.formatOnType\": true,\n\n​\t\t\"editor.formatOnSave\": true\n\n## 六、css的复合选择器\n\n### 1、什么是复合选择器？\n\n​\t\t在 CSS 中，可以根据选择器的类型把选择器分为***基础选择器***和***复合选择器***，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。 \n​\t\t复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签）\n​\t\t常用的复合选择器包括：**后代选择器、子选择器、并集选择器、伪类选择器**等等\n\n### 2、后代选择器 (重要）\n\n**定义：**\n\n​\t\t后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n**语法：**\n\n![1570867555401](css基础/01.png)\n\n​\t\t上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。\n\n**语法说明**：\n\n- 元素1 和 元素2 中间用空格隔开\n- 元素1 是父级，元素2 是子级，最终选择的是元素2\n- 元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可\n- 元素1 和 元素2 可以是任意基础选择器\n\n**例子：**\n\n![1570867652832](css基础/02.png)\n\n### 3、子选择器 (重要）\n\n**定义：**\n\n​\t\t子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。\n\n​\t\t（简单理解就是选亲儿子元素）\n\n**语法：**\n\n<img src=\"css基础/03.png\"/>\n\n​\t\t上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。\n\n**语法说明**：\n\n- 元素1 和 元素2 中间用 大于号 隔开\n- 元素1 是父级，元素2 是子级，最终选择的是元素2\n- 元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器\n\n**例子：**\n\n![1570867652832](css基础/04.png)\n\n### 4、并集选择器 (重要）\n\n**定义：**\n\n​\t\t并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明。并集选择器是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。\n\n**语法：**\n\n<img src=\"css基础/05.png\"/>\n\n​\t\t上述语法表示选择元素1 和 元素2。\n\n**语法说明**：\n\n- 元素1 和 元素2 中间用逗号隔开\n- 逗号可以理解为和的意思\n- 并集选择器通常用于集体声明\n\n**例子：**\n\n![1570867652832](css基础/06.png)\n\n### 5、伪类选择器\n\n**定义：**\n\n​\t\t伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。\n\n**语法：**\n\n​\t\t伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。\n\n\n\n### 6、链接伪类选择器\n\n**定义：**\n\n​\t\t伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。\n\n**语法：**\n\n​\t\t伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。\n\n​\t\ta:link\t没有点击过的(访问过的)链接\n​\t\ta:visited\t点击过的(访问过的)链接\n​\t\ta:hover\t鼠标经过的那个链接\n​\t\ta:active\t鼠标正在按下还没有弹起鼠标的那个链接\n\n**链接伪类选择器注意事项**\n\n​\t\t为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。\n\n​\t\t记忆法：love hate 或者 lv 包包 hao 。\n\n​\t\t因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。\n\n**链接伪类选择器实际工作开发中的写法**：\n\n![1570868845786](css基础/1570868845786.png)\n\n\n\n### 7、:focus 伪类选择器\n\n**定义：**\n\n​\t\t:focus 伪类选择器用于选取获得焦点的表单元素。\n\n​\t\t焦点就是光标，一般情况 \\<input> 类表单元素才能获取\n\n例子：\n\n![1570868891669](css基础/1570868891669.png)\n\n\n\n### 复合选择器总结\n\n![1570868930472](css基础/1570868930472.png)\n\n## 七、css的显示模式\n\n### 1、什么是元素的显示模式\n\n**定义：**\n\n​\t\t元素显示模式就是元素（标签）以什么方式进行显示，比如\\<div>自己占一行，比如一行可以放多个\\<span>。\n\n**作用：**\n\n​\t\t网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。\n\n### 2、元素显示模式的分类\n\n#### 2.1、块元素\n\n**常见的块元素**：\n\n```\n<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>\n```\n\n​\t\t\\<div> 标签是最典型的块元素。\n\n**块级元素的特点**：\n\n- 比较霸道，自己独占一行。\n- 高度，宽度、外边距以及内边距都可以控制。\n- 宽度默认是容器（父级宽度）的100%。\n- 是一个容器及盒子，里面可以放行内或者块级元素。\n\n\n\n**注意：**\n\n​\t\t文字类的元素内不能放块级元素\n\n```\n<p> 标签主要用于存放文字，因此 <p> 里面不能放块级元素，特别是不能放<div> \n同理， <h1>~<h6>等都是文字类块级标签，里面也不能放其他块级元素\n```\n\n\n\n#### 2.2、行内元素\n\n**常见的行内元素：**\n\n```\n<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>\n```\n\n​\t\t\\<span> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。\n\n\n\n**行内元素的特点：**\n\n- 相邻行内元素在一行上，一行可以显示多个。\n\n- 高、宽直接设置是无效的。\n\n- 默认宽度就是它本身内容的宽度。\n\n- 行内元素只能容纳文本或其他行内元素。\n\n\n\n**注意：**\n\t\t链接里面不能再放链接\n\t\t特殊情况链接 \\<a> 里面可以放块级元素，但是给 \\<a> 转换一下块级模式最安全\n\n\n\n#### 2.3、行内块元素\n\n**常见的行内块标签**：\n\n```\n<img />、<input />、<td>\n```\n\n​\t\t它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。\n\n**行内块元素的特点**：\n\n- 和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。\n- 一行可以显示多个（行内元素特点）。\n- 默认宽度就是它本身内容的宽度（行内元素特点）。\n- 高度，行高、外边距以及内边距都可以控制（块级元素特点）。\n\n#### 2.4、元素显示模式总结\n\n![1570870718415](css基础/1570870718415.png)\n\n​\t\t学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。\n\n### 3、元素显示模式的转换\n\n**简单理解**: \n\n​\t\t一个模式的元素需要另外一种模式的特性\n​\t\t比如想要增加链接 \\<a> 的触发范围。   \n\n**转换方式**\n\n- 转换为块元素：display:block;\n- 转换为行内元素：display:inline;\n- 转换为行内块：display: inline-block;\n\n### 4、单行文字垂直居中的代码\n\n**解决方案**:    \n\n​\t\t让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中\n\n\n\n![1570870368253](css基础/1570870368253.png)\n\n![1570870387089](css基础/1570870387089.png)\n\n\n\n**简单理解**: \n\n​\t\t行高的上空隙和下空隙把文字挤到中间了，\n\n​\t\t如果行高小于盒子高度,文字会偏上，\n\n​\t\t如果行高大于盒子高度,则文字偏下。\n\n\n\n## 八、css的背景\n\n通过 CSS 背景属性，可以给页面元素添加背景样式。\n背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。\n\n### 1、背景颜色\n\n**样式名称**：\n\n​\t\tbackground-color 定义元素的背景颜色\n\n**使用方式**：\n\n![1570886137899](css基础/1570886137899.png)\n\n**其他说明**：\n\n​\t\t元素背景颜色默认值是 transparent（透明）\n\n![1570886176292](css基础/1570886176292.png)\n\n### 2、背景图片\n\n**样式名称**：\n\n​\t\tbackground-image  定义元素的背景图片\n\n**使用方式**：\n\n![1570886322557](css基础/1570886322557.png)\n\n![1570886362813](css基础/1570886362813.png)\n\n**其他说明**：\n\n​\t\t实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)\n\n​\t\t注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径**不要加引号**。\n\n\n\n### 3、背景平铺\n\n**样式名称：**\n\n​\t\tbackground-repeat 设置元素背景图像的平铺 \n\n**使用方式：**\n\n![1570886648887](css基础/1570886648887.png)\n\n![1570886688306](css基础/1570886688306.png)\n\n### 4、背景图片位置\n\n**样式名称：**\n\n​\t\tbackground-position 属性可以改变图片在背景中的位置\n\n**使用方式：**\n\n​\t\t![1570886973530](css基础/1570886973530.png)\n\n​\t\t参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位\n\n![1570887034135](css基础/1570887034135.png)\n\n**其他说明：**\n\n1、参数是方位名词\n\n​\t\t如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致\n\n​\t\t如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐\n\n2、参数是精确单位\n\n​\t\t如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标\n\n​\t\t如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中\n\n3、参数是混合单位\n\n​\t\t如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标\n\n### 5、背景图片固定\n\n**样式名称：**\n\n​\t\tbackground-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。\n\n**使用方式：**\n\n​\t\t![1570887652404](css基础/1570887652404.png)\n\n![1570887699177](css基础/1570887699177.png)\n\n**其他说明：**\n\n​\t\tbackground-attachment 后期可以制作视差滚动的效果。\n\n### 6、背景样式合写\n\n**背景合写样式：**\n\n​\t\tbackground: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;\n\n**使用方式：**\n\n![1570887809455](css基础/1570887809455.png)\n\n### 7、背景色半透明\n\nCSS3 提供了背景颜色半透明的效果。 \n\n**使用方式：**\n\n![1570887978061](css基础/1570887978061.png)\n\n- 最后一个参数是 alpha 透明度，取值范围在 0~1之间\n- 我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);\n\n**注意**：\n\n- 背景半透明是指盒子背景半透明，盒子里面的内容不受影响\n- CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用\n\n### 8、背景总结\n\n![1570888283511](css基础/1570888283511.png)\n\n\n\n## 九、css三大特性\n\n### 1、层叠性\n\n​\t\t相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题\n\n​\t\t层叠性原则:\n\n- 样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式\n- 样式不冲突，不会层叠\n\n![1571490015544](css基础/1571490015544.png)\n\n### 2、继承性\n\n​\t\tCSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。\n\n![1571490049279](css基础/1571490049279.png)\n\n\n\n子元素可以继承父元素的样式：\n\n​\t（text-，font-，line-这些元素开头的可以继承，以及color属性）\n\n继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞\n\n\n\n行高的继承性：\n\n```css\n body {\n   font:12px/1.5 Microsoft YaHei；\n }\n```\n\n- 行高可以跟单位也可以不跟单位\n- 如果子元素没有设置行高，则会继承父元素的行高为 1.5\n- 此时子元素的行高是：当前子元素的文字大小 * 1.5\n- body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高\n\n### 3、优先级\n\n当同一个元素指定多个选择器，就会有优先级的产生。\n\n- 选择器相同，则执行层叠性\n- 选择器不同，则根据选择器权重执行\n\n\n\n选择器优先级计算表格：\n\n![1571490129794](css基础/1571490129794.png)\n\n\n\n优先级注意点:\n\n1. 权重是有4组数字组成,但是不会有进位。\n\n2. 可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..\n\n3. 等级判断从左向右，如果某一位数值相同，则判断下一位数值。\n\n4. 可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.\n\n5. 继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。\n\n   \n\n权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。\n\n- div ul  li   ------>      0,0,0,3\n- .nav ul li   ------>      0,0,1,2\n- a:hover      -----—>   0,0,1,1\n- .nav a       ------>      0,0,1,1\n\n## 十、盒子模型\n\n### 1、网页布局的本质\n\n网页布局的核心本质： 就是利用 CSS 摆盒子。\n\n![1571492334739](css基础/1571492334739.png)\n\n网页布局过程：\n\n1. 先准备好相关的网页元素，网页元素基本都是盒子 Box 。\n2. 利用 CSS 设置好盒子样式，然后摆放到相应位置。\n3. 往盒子里面装内容\n\n### 2、盒子模型（Box Model）组成\n\n​\t\t盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。\n\n​\t\tCSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：**边框**、**外边距**、**内边距**、和 **实际内容**\n\n![1571492536942](css基础/1571492536942.png)\n\n### 3、边框（border）\n\n#### 3.1、边框的使用\n\n1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；\n\n2、语法：\n\n```css\n border : border-width || border-style || border-color;   \n```\n\n![1571492659260](css基础/1571492659260.png)\n\n边框样式 border-style 可以设置如下值：\n\n- none：没有边框即忽略所有边框的宽度（默认值）\n- solid：边框为单实线(最为常用的)\n- dashed：边框为虚线  \n- dotted：边框为点线\n\n3、边框的合写分写\n\n边框简写：\n\n```css\n border: 1px solid red;  \n```\n\n边框分开写法：\n\n```css\n border-top: 1px solid red;  /* 只设定上边框， 其余同理 */   \n```\n\n#### 3.2、表格的细线边框\n\n1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。\n\n2、语法：\n\n```css\n border-collapse:collapse; \n```\n\ncollapse 单词是合并的意思\n\nborder-collapse: collapse; 表示相邻边框合并在一起\n\n#### 3.3、边框会影响盒子实际大小\n\n边框会额外增加盒子的实际大小。因此我们有两种方案解决：\n\n- 测量盒子大小的时候,不量边框。\n- 如果测量的时候包含了边框,则需要 width/height 减去边框宽度\n\n### 4、内边距（padding）\n\n#### 4.1、内边距的使用方式\n\n1、padding 属性用于设置内边距，即边框与内容之间的距离。\n\n2、语法：\n\n合写属性：\n\n![1571493298248](css基础/1571493298248.png)\n\n分写属性：\n\n![1571493260536](css基础/1571493260536.png)\n\n#### 4.2、内边距会影响盒子实际大小\n\n1、当我们给盒子指定 padding 值之后，发生了 2 件事情：\n\n1. 内容和边框有了距离，添加了内边距。\n2. padding影响了盒子实际大小。\n\n2、内边距对盒子大小的影响：\n\n- 如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。\n- 如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。\n\n3、解决方案：\n\n​\t\t如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。\n\n### 5、外边距（margin）\n\n#### 5.1、外边距的使用方式\n\nmargin 属性用于设置外边距，即控制盒子和盒子之间的距离。\n\n![1571493741272](css基础/1571493741272.png)\n\n#### 5.2、外边距典型应用\n\n外边距可以让块级盒子水平居中的两个条件：\n\n- 盒子必须指定了宽度（width）。\n- 盒子左右的外边距都设置为 auto 。\n\n常见的写法，以下三种都可以：\n\n```css\nmargin-left: auto;   margin-right: auto;\nmargin: auto;\nmargin: 0 auto;\n```\n\n注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。\n\n#### 5.3、外边距合并\n\n使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n主要有两种情况:\n\n1、相邻块元素垂直外边距的合并\n\n​\t\t当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。\n\n![1571494239103](css基础/1571494239103.png)\n\n解决方案：\n\t\t尽量只给一个盒子添加 margin 值。\n\n2、嵌套块元素垂直外边距的塌陷\n\n​\t\t对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。\n\n![1571494373778](css基础/1571494373778.png)\n\n解决方案：\n\n- 可以为父元素定义上边框。\n- 可以为父元素定义上内边距。\n- 可以为父元素添加 overflow:hidden。\n\n#### 5.4、清除内外边距\n\n​\t\t网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。\n\n```css\n * {\n    padding:0;   /* 清除内边距 */\n    margin:0;    /* 清除外边距 */\n  }\n```\n\n​\t\t注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了\n\n## 十一、css的其他样式\t\n\n### 1、圆角边框\n\n在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。\n\nborder-radius 属性用于设置元素的外边框圆角。\n\n语法：\n\n```css\n border-radius:length;    \n```\n\n- 参数值可以为数值或百分比的形式\n- 如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%\n- 该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角\n- 分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius\n- 兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用\n\n### 2、盒子阴影\n\nCSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。\n语法：\n\n```css\n box-shadow: h-shadow v-shadow blur spread color inset; \n```\n\n![1571541874805](css基础/1571541874805.png)\n\n### 3、文字阴影\n\n在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。\n语法：\n\n```css\n text-shadow: h-shadow v-shadow blur color;\n```\n\n![1571541954222](css基础/1571541954222.png)\n\n## 十二、浮动\n\n### 1、传统网页布局的三种方式\n\n​\tCSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：\n\n- 普通流（标准流）\n\n- 浮动\n\n- 定位\n\n  这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。\n\n注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。\n\n### 2、标准流（普通流/文档流）\n\n所谓的标准流:  就是标签按照规定好默认方式排列\n\n1. 块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table\n2. 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 \n\n以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。\n\n### 3、为什么需要浮动？\n\n​\t\t总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.\n\n​\t\t浮动最典型的应用：可以让多个块级元素一行内排列显示。\n\n​\t\t网页布局第一准则：**多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动**。\n\n### 4、什么是浮动？\n\n​\t\tfloat 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。\n\n语法：\n\n```css\n 选择器 { float: 属性值; }\n```\n\n![1571543209934](css基础/1571543209934.png)\n\n\n\n### 5、浮动特性\n\n加了浮动之后的元素,会具有很多特性,需要我们掌握的.\n\n1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)\n\n![1571544664994](css基础/1571544664994.png)\n\n2、浮动的元素会一行内显示并且元素顶部对齐\n\n![1571544725757](css基础/1571544725757.png)\n\n注意： \n\n​\t\t浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。\n\n3、浮动的元素会具有行内块元素的特性\n\n​\t\t浮动元素的大小根据内容来决定\n\n​\t\t浮动的盒子中间是没有缝隙的\n\n### 6、浮动元素经常和标准流父级搭配使用\n\n为了约束浮动元素位置, 我们网页布局一般采取的策略是:\n\n​\t\t先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧\n\n![1571544991989](css基础/1571544991989.png)\n\n## 十三、常见网页布局\n\n### 浮动布局注意点\n\n1、浮动和标准流的父盒子搭配。\n\n先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置\n\n2、一个元素浮动了，理论上其余的兄弟元素也要浮动。\n\n一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。\n\n浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.\n\n## 十四、清除浮动\n\n### 1、为什么需要清除浮动？\n\n​\t\t由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。\n\n![1571555883628](css基础/1571555883628.png)\n\n### 2、清除浮动本质\n\n清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度\n\n注意：\n\n- 如果父盒子本身有高度，则不需要清除浮动\n- 清除浮动之后，父级就会根据浮动的子盒子自动检测高度。\n- 父级有了高度，就不会影响下面的标准流了\n\n### 3、清除浮动样式\n\n语法：\n\n```css\n 选择器{clear:属性值;} \n```\n\n![1571555980419](css基础/1571555980419.png)\n\n我们实际工作中， 几乎只用 clear: both;\n\n清除浮动的策略是:  闭合浮动. \n\n### 4、清除浮动的多种方式\n\n#### 4.1、额外标签法\n\n额外标签法也称为隔墙法，是 W3C 推荐的做法。\n\n使用方式：\n\n​\t\t额外标签法会在浮动元素末尾添加一个空的标签。\n\n```html\n例如 <div style=\"clear:both\"></div>，或者其他标签（如<br />等）。\n```\n\n​\t\t优点： 通俗易懂，书写方便\n\n​\t\t缺点： 添加许多无意义的标签，结构化较差\n\n​\t\t注意： 要求这个新的空标签必须是块级元素。\n\n总结:\n\n​\t1、清除浮动本质是?\n\n​\t\t\t清除浮动的本质是清除浮动元素脱离标准流造成的影响\n\n​\t2、清除浮动策略是?\n\n​\t\t\t闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.\n\n​\t3、额外标签法?\n\n​\t\t\t隔墙法, 就是在最后一个浮动的子元素后面添\n\n​\t4、加一个额外标签, 添加 清除浮动样式.\n\n​\t\t\t实际工作可能会遇到,但是不常用\n\n#### 4.2、父级添加 overflow 属性\n\n可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。\n\n例如：\n\n```css\noverflow:hidden | auto | scroll;\n```\n\n优点：代码简洁\n\n缺点：无法显示溢出的部分\n\n注意：是给父元素添加代码\n\n#### 4.3、父级添加after伪元素\n\n:after 方式是额外标签法的升级版。给父元素添加：\n\n```css\n .clearfix:after {  \n   content: \"\"; \n   display: block; \n   height: 0; \n   clear: both; \n   visibility: hidden;  \n } \n .clearfix {  /* IE6、7 专有 */ \n   *zoom: 1;\n }   \n```\n\n优点：没有增加标签，结构更简单\n\n缺点：照顾低版本浏览器\n\n代表网站： 百度、淘宝网、网易等\n\n#### 4.4、父级添加双伪元素\n\n给父元素添加\n\n```css\n .clearfix:before,.clearfix:after {   content:\"\";   display:table;  } .clearfix:after {   clear:both; } .clearfix {    *zoom:1; }   \n```\n\n优点：代码更简洁\n\n缺点：照顾低版本浏览器\n\n代表网站：小米、腾讯等\n\n### 总结\n\n为什么需要清除浮动？\n\n1. 父级没高度。\n2. 子盒子浮动了。\n3. 影响下面布局了，我们就应该清除浮动了。\n\n![1571556500074](../../../../../Personal Files/leetcode/资料/阶段一：前端开发基础资料/02-CSS资料/06-前端基础CSS第四天（14-16小节）/笔记/images/1571556500074.png)\n\n## 十五、PS 切图\n\n### 1、图层切图\n\n```html\n最简单的切图方式：右击图层 → 导出 → 切片。\n```\n\n### 2、切片切图\n\n2.1、利用切片选中图片\n\n```\n 利用切片工具手动划出\n```\n\n2.2、导出选中的图片\n\n```html\n文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。\n```\n\n### 3、PS插件切图\n\n​\t\tCutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 \"导出 web 所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。\n\n官网：http://www.cutterman.cn/zh/cutterman\n\n注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。\n\n## 1. PS 切图\n\n### 1.1. 常见的图片格式\n\n| 序号 | 格式 | 特点和常用的用途                                             |\n| ---- | ---- | ------------------------------------------------------------ |\n| 1    | jpg  | JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们**产品类的图片** 经常用jpg格式的 |\n| 2    | gif  | GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 **经常用于一些图片小动画效果** |\n| 3    | png  | png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 **背景透明的图片** ,请选择png格式. |\n| 4    | psd  | PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. **对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离**. |\n\n\n\nPS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 \n\n### 1.2. 图层切图\n\n简单版步骤：\n\n​\t① 使用**移动工具**，点击需要的图片\n\n![1571299959992](css基础/1571299959992.png)\n\n​\t② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG\n\n![1571300150618](css基础/1571300150618.png)\n\n\n\n但是很多情况下,我们需要合并图层再导出:\n\n步骤：\n\n​\t① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  \n\n​\t② 图层菜单 → 合并图层(ctrl+e)   \n\n​\t![1571300529539](css基础/1571300529539.png)\n\n​\t③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG\n\n\n\n### 1.3. 切片切图\n\n步骤：\n\n​\t① 利用切片选中图片 ：利用切片工具手动划出\n\n![1571301270696](css基础/1571301270696.png) \n\n​\t② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。\n\n\n\n​\t注意：保存的时候，要选“选中的切片”：\n\n![1571301357818](css基础/1571301357818.png) \n\n### 1.4. 插件切图\n\n#### 1.4.1. 介绍\n\nCutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 \"导出web所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。 \n\n它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。\n\n\n\n#### 1.4.2. 安装\n\n注意： **cutterman插件要求你的ps 必须是完整版**，不能是绿色版，所以大家需要从新安装完整版本。\n\n查看 “窗口菜单”里面的“扩展功能”：\n\n​\t① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS\n\n​\t② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图\n\n![1571302032310](css基础/1571302032310.png)\n\n\n\n\n\n官网: http://www.cutterman.cn/zh/cutterman\n\n当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：\n\n![1571302286467](css基础/1571302286467.png)\n\n\n\n1.4.3 使用步骤\n\n​\t① 选择需要的图层\n\n​\t② 选择web端，点击web下面的下拉三角\n\n​\t③ 选择需要的图片格式\n\n​\t④ 设置好存储路径\n\n​\t⑤ 点击 “导出选中图层” 按钮\n\n![1571303715362](css基础/1571303715362.png) \n\n示意图：\n\n<img src=\"css基础/sample1.gif\" /> \n\n\n\n\n\n## 十六. CSS属性书写顺序（重点）\n\n**生活中衡量一个人有气质：**\n\n​\t穿着打扮  举止言行  等等  \n\n**编程中如何衡量一个人的代码能力**：\n\n​\t规范标准  优雅高质量 等等   一个词形容   专业    从代码中看出是否有经验..\n\n\n\n建议遵循以下顺序：\n\n1. **布局定位属性**：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）\n2. **自身属性**：width / height / margin / padding / border / background\n3. **文本属性**：color / font / text-decoration / text-align / vertical-align / white- space / break-word\n4. **其他属性（CSS3）**：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …\n\n**举例：**\n\n```css\n .jdc {\n    display: block;\n    position: relative;\n    float: left;\n    width: 100px;\n    height: 100px;\n    margin: 0 10px;\n    padding: 20px 0;\n    font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\n    color: #333;\n    background: rgba(0,0,0,.5);\n    border-radius: 10px;\n } \n```\n\n\n\n\n\n## 十七. 学成在线页面制作\n\n页面展示：\n\n![1571304358699](css基础/1571304358699.png)\n\n\n\n学成在线，是典型的企业级网站。\n\n学习学成网的目的，是为了整体感知企业级网站布局流程，带着大家复习以前的知识。\n\n\n\n\n\n### 1.  前期准备素材\n\n- 学成在线PSD源文件\n- 开发工具  =  PS（切图） +  sublime（代码） + chrome（测试）\n\n### 2.  前期准备工作\n\n先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。\n\n1. 创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。\n\n2. 用vscode打开study目录文件夹.\n\n3. study 目录内新建 images 文件夹，用于保存图片。\n\n4. 新建首页文件 index.html（以后我们的网站**首页**统一命名规定为 **index.html** )。\n\n5. 新建 style.css 样式文件。我们本次采用外链样式表。\n\n6. 将样式引入到我们的 HTML 页面文件中。\n\n7. 样式表写入清除内外边距的样式，来检测样式表是否引入成功。\n\n![1571305757590](css基础/1571305757590.png) \n\n### 3. 页面布局整体思路\n\n为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：\n\n​\t1.必须确定页面的**版心**（可视区），我们**测量**可得知。\n\n​\t2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.\n\n​\t3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则\n\n​\t4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.\n\n​\t5.所以, 先理清楚**布局结构**,再写代码尤为重要. 这需要我们多写多积累.\n\n### 4. 页面制作\n\n**确定版心**：\n\n​\t这个页面的版心是 1200像素  ，每个版心都要水平居中对齐，所以，我们可以定义版心为公共类：\n\n```css\n.w {\n    width: 1200px;\n    margin: auto;\n}\n```\n\n#### 4.1. header头部制作\n\n**结构图如下：**\n\n<img src=\"css基础/1.png\" />\n\n- 1号是版心盒子 **header**  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。\n- 版心盒子 里面包含 2号盒子 **logo** 图标\n- 版心盒子 里面包含 3号盒子 **nav** 导航栏\n- 版心盒子 里面包含 4号盒子 **search** 搜索框\n- 版心盒子 里面包含 5号盒子 **user** 个人信息\n- 注意，要求里面的 **4个子盒子 必须都浮动**\n\n\n\n**导航栏注意点:**\n\n实际开发中，**重要的导航栏**，我们不会直接用链接a ，而是**用 li  包含链接(li+a)的做法**\n\n​\t1.li+a 语义更清晰，一看这就是有条理的列表型内容。\n\n​\t2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名\n\n**注意:** \n\n​\t1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.\n\n​\t2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字\n\n​\t3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 \n\n**4号盒子search的细节：**\n\n​\tsearch 搜索框的意思:  一个 search 大盒子里面包含 2个 表单\n\n​\t技巧：input和button都，属于行内块元素，会有缝隙，使用浮动，可以去缝隙。\n\n![1571307430101](css基础/1571307430101.png)\n\n#### 4.2. banner制作\n\n结构图如下：\n\n![1571314623135](css基础/1571314623135.png)\n\n<img src=\"css基础/2.png\" />\n\n\n\n- 1号盒子是通栏的大盒子**banner**， 不给宽度，给高度，给一个蓝色背景。\n- 2号盒子是版心 **w**， 要水平居中对齐。\n- 3号盒子版心内，左对齐 **subnav** 侧导航栏。\n- 4号盒子版心内，右对齐  **course** 课程。\n\n##### 4.2.1  subnav 侧导航栏 (左侧的)\n\n![1571314874385](css基础/1571314874385.png)   \n\n- subnav 盒子 背景色 黑色半透明\n- 重要的导航栏，li 包 a ，行高45px\n- a里面包含文字和span，span右浮动\n- 当鼠标经过a ，a里面的内容（文字和span）变蓝色\n\n\n\n##### 4.2.2  course课程表模块 (右侧的)\n\n结构图如下：\n\n <img src=\"css基础/6.png\" />\n\n- 1号盒子 是  228 * 300 的盒子 右浮动  **注意 浮动的元素 不会有外边距塌陷的问题**\n- 1号盒子内 分为 上下 两个 子盒子\n- 2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)\n- 3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)\n\n#### 4.3. 精品推荐小模块\n\n结构图如下：\n\n<img src=\"css基础/3.png\" />\n\n- **复习点：**  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color\n\n  \n\n- 大盒子水平居中 goods  精品 ，注意此处有个盒子阴影\n\n- 1号盒子是标题 H3  左侧浮动\n\n- 2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）\n\n- 3号盒子 右浮动 mod 修改\n\n#### 4.4. 精品推荐大模块\n\n结构图如下：\n\n<img src=\"css基础/4.png\" />\n\n- 1号盒子为最大的盒子 **box**  版心水平居中对齐\n- 2号盒子为上面部分 **box-hd**  -- 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动\n- 3号盒子为底下部分 **box-bd** --- 里面是无序列表 有 10个 小li 组成\n- 小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了\n- 复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。\n\n#### 4.5.  底部模块制作\n\n结构图如下：\n\n<img src=\"css基础/5.png\" >\n\n- 1号盒子通栏大盒子 底部 **footer**  给高度  底色是白色\n\n- 2号盒子版心水平居中\n\n- 3号盒子版权 **copyright**  左对齐 \n\n- 4号盒子 链接组 **links**  右对齐\n\n  \n\n\n\n## 十八. 定位(position) 介绍\n\n### 1.1 为什么使用定位\n\n> 我们先来看一个效果，同时思考一下**用标准流或浮动能否实现类似的效果**？\n\n**场景1**： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.\n\n<img src=\"css基础/01_定位示例1.gif\" />\n\n\n\n**场景2**：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。\n\n<img src=\"css基础/ding.png\" />\n\n\n\n> 结论**：要实现以上效果，**标准流 或 浮动都无法快速实现\n\n所以：\n\n1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。\n\n2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。\n\n\n\n### 1.2 定位组成\n\n**定位**：将盒子**定**在某一个位置，所以**定位也是在摆放盒子， 按照定位的方式移动盒子**\n\n定位也是用来布局的，它有两部分组成：\n\n> **定位 = 定位模式 + 边偏移**  \n\n**定位模式** 用于指定一个元素在文档中的定位方式。**边偏移**则决定了该元素的最终位置。\n\n\n\n#### 1.2.1 边偏移（方位名词）\n\n**边偏移** 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。\n\n| 边偏移属性 | 示例           | 描述                                                     |\n| ---------- | :------------- | -------------------------------------------------------- |\n| `top`      | `top: 80px`    | **顶端**偏移量，定义元素相对于其父元素**上边线的距离**。 |\n| `bottom`   | `bottom: 80px` | **底部**偏移量，定义元素相对于其父元素**下边线的距离**。 |\n| `left`     | `left: 80px`   | **左侧**偏移量，定义元素相对于其父元素**左边线的距离**。 |\n| `right`    | `right: 80px`  | **右侧**偏移量，定义元素相对于其父元素**右边线的距离**   |\n\n定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。\n\n#### 1.2.2 定位模式 (position)\n\n在 CSS 中，通过 `position` 属性定义元素的**定位模式**，语法如下：\n\n```css\n选择器 { \n    position: 属性值; \n}\n```\n\n定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。\n\n定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：\n\n| 值         |     语义     |\n| ---------- | :----------: |\n| `static`   | **静态**定位 |\n| `relative` | **相对**定位 |\n| `absolute` | **绝对**定位 |\n| `fixed`    | **固定**定位 |\n\n <img src=\"css基础/26定位的概念.png\">\n\n### 1.3 定位模式介绍\n\n#### 1.3.1.  静态定位(static) - 了解\n\n- **静态定位**是元素的**默认**定位方式，**无定位的意思**。它相当于 border 里面的none，静态定位static，不要定位的时候用。\n\n- 语法：\n\n  ```\n  选择器 { \n      position: static; \n  }\n  ```\n\n- 静态定位 按照标准流特性摆放位置，它没有边偏移。\n\n- 静态定位在布局时我们几乎不用的 \n\n#### 1.3.2. 相对定位(relative) - 重要\n\n- **相对定位**是元素在移动位置的时候，是相对于它自己**原来的位置**来说的（自恋型）。\n- 语法：\n\n```\n选择器 { \n\tposition: relative; \n}\n```\n\n- 相对定位的特点：（务必记住）\n\n  - 1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。\n\n  - 2.**原来**在标准流的**位置**继续占有，后面的盒子仍然以标准流的方式对待它。\n\n    因此，**相对定位并没有脱标**。它最典型的应用是给绝对定位当爹的。。。\n\n- 效果图：\n\n![相对定位案例](css基础/04_相对定位案例.png)\n\n\n\n#### 1.3.3. 绝对定位(absolute) - 重要  \n\n##### 1.3.3.1 绝对定位的介绍\n\n- **绝对定位**是元素在移动位置的时候，是相对于它**祖先元素**来说的（拼爹型）。\n\n- 语法：\n\n  ```\n   选择器 { \n   \tposition: absolute; \n   }\n  ```\n\n\n\n\n\n1. **完全脱标** —— 完全不占位置；  \n\n2. **父元素没有定位**，则以**浏览器**为准定位（Document 文档）。\n\n   <img src=\"css基础/05_绝对定位_父级无定位.png\" width=\"600\" />\n\n3. **父元素要有定位**\n\n   * 元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n<img src=\"css基础/06_绝对定位_父级有定位.png\" width=\"600\" />\n\n\n\n\n\n- **绝对定位的特点总结**：（务必记住）\n\n  1.如果**没有祖先元素**或者**祖先元素没有定位**，则以浏览器为基准定位（Document 文档）。\n\n  2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。\n\n  3.绝对定位**不再占有原先的位置**。所以绝对定位是脱离标准流的。（脱标）\n\n\n\n\n\n##### 1.3.3.2 定位口诀 —— 子绝父相\n\n弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。\n\n这个**“子绝父相”**太重要了，是我们学习定位的**口诀**，是定位中最常用的一种方式这句话的意思是：**子级是绝对定位的话，父级要用相对定位。**\n\n\n\n因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。\n\n①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。\n\n②父盒子需要加定位限制子盒子在父盒子内显示。\n\n③父盒子布局时，需要占有位置，因此父亲只能是相对定位。\n\n\n\n这就是子绝父相的由来，所以**相对定位经常用来作为绝对定位的父级**。\n\n总结： **因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位**\n\n当然，子绝父相不是永远不变的，如果父元素不需要占有位置，**子绝父绝**也会遇到。\n\n\n\n\n\n**疑问**：为什么在布局时，**子级元素**使用**绝对定位**时，**父级元素**就要用**相对定位**呢？\n\n观察下图，思考一下在布局时，**左右两个方向的箭头图片**以及**父级盒子**的定位方式。\n\n![子绝父相截图](css基础/07_子绝父相截图.png)\n\n<img src=\"css基础/27子绝父相.png\">\n\n**分析**：\n\n1. **方向箭头**叠加在其他图片上方，应该使用**绝对定位**，因为**绝对定位完全脱标**，完全不占位置。\n2. **父级盒子**应该使用**相对定位**，因为**相对定位不脱标**，后续盒子仍然以标准流的方式对待它。\n   * 如果父级盒子也使用**绝对定位**，会完全脱标，那么下方的**广告盒子**会上移，这显然不是我们想要的。\n\n**结论**：**父级要占有位置，子级要任意摆放**，这就是**子绝父相**的由来。\n\n\n\n#### 1.3.4. 固定定位(fixed) - 重要\n\n- **固定定位**是元素**固定于浏览器可视区的位置**。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。\n\n- 语法：\n\n  ```\n   选择器 { \n   \tposition: fixed; \n   }\n  ```\n\n- 固定定位的特点：（务必记住）：\n\n  1.以浏览器的可视窗口为参照点移动元素。\n\n  - 跟父元素没有任何关系\n  - 不随滚动条滚动。\n\n  2.固定定位**不在占有原先的位置**。\n\n- 固定定位也是**脱标**的，其实**固定定位也可以看做是一种特殊的绝对定位**。（认死理型） \n\n  - **完全脱标**—— 完全不占位置；\n  - 只认**浏览器的可视窗口** —— `浏览器可视窗口 + 边偏移属性` 来设置元素的位置；\n    - 跟父元素没有任何关系；单独使用的\n    - 不随滚动条滚动。\n\n> 固定定位举例：\n\n![固定定位案例](css基础/08_固定定位案例.png)\n\n**提示**：IE 6 等低版本浏览器不支持固定定位。\n\n\n\n#### 1.3.5 粘性定位(sticky) - 了解\n\n- **粘性定位**可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 \n\n- 语法：\n\n  ```\n   选择器 { \n       position: sticky; \n       top: 10px; \n   }\n  \n  ```\n\n- 粘性定位的特点：\n\n  1.以浏览器的可视窗口为参照点移动元素（固定定位特点）\n\n  2.粘性定位占有原先的位置（相对定位特点）\n\n  3.必须添加 top 、left、right、bottom **其中一个**才有效\n\n  跟页面滚动搭配使用。 兼容性较差，IE 不支持。\n\n  \n\n#### 1.3.6 定位总结\n\n| **定位模式**          | **是否脱标**         | **移动位置**           | **是否常用**                 |\n| --------------------- | -------------------- | ---------------------- | ---------------------------- |\n| static   静态定位     | 否                   | 不能使用边偏移         | 很少                         |\n| **relative 相对定位** | **否 (占有位置)**    | **相对于自身位置移动** | **基本单独使用**             |\n| **absolute绝对定位**  | **是（不占有位置）** | **带有定位的父级**     | **要和定位父级元素搭配使用** |\n| **fixed 固定定位**    | **是（不占有位置）** | **浏览器可视区**       | **单独使用，不需要父级**     |\n| sticky 粘性定位       | 否   (占有位置)      | 浏览器可视区           | 当前阶段少                   |\n\n- 一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。\n\n- 学习定位重点学会子绝父相。\n- 注意：\n\n1. **边偏移**需要和**定位模式**联合使用，**单独使用无效**；\n2. `top` 和 `bottom` 不要同时使用；\n3. `left` 和 `right` 不要同时使用。\n\n## 2. 综合案例：学成在线-hot  模块添加\n\n### **2. 1 案例截图**：\n\n![1571385860679](css基础/1571385860679.png) \n\n### 2.2 案例分析\n\n1. 一个大的 `li` 中包含 一个课程图片，课程介绍文字信息，还有hot的小图标；\n2. hot图片**重叠**在课程图片上面—— 脱标，不占位置，需要使用**绝对定位**；\n3. hot图片**重叠**在**li的右上方 —— 需要**使用边偏移确定准确位置。\n\n### 2.3 案例小结\n\n1. **子绝父相** —— **子元素**使用**绝对定位**，**父元素**使用**相对定位**；\n2. **与浮动的对比**：\n   * **绝对定位**：脱标，**利用边偏移指定准确位置**；\n   * **浮动**：脱标，不能指定准确位置，**让多个块级元素在一行显示**。\n\n> 课堂练习：模拟老师的随堂案例完成**哈根达斯**案例（5 分钟）。\n\n结构修改：\n\n```html\n<!-- 修改.box-bd里面的li标签内容，添加一个hot图标 -->\n\n<li>\n\t <!-- 添加hot小图片 -->\n    <em>\n        <img src=\"images/hot.png\" alt=\"\">\n    </em>\n    <img src=\"images/pic.png\" alt=\"\">\n    <h4>\n        Think PHP 5.0 博客系统实战项目演练\n    </h4>\n    <div class=\"info\">\n        <span>高级</span> • 1125人在学习\n    </div>\n</li>\n```\n\n样式修改：\n\n```css\n.box-bd ul li {\n    /* 子绝父相 */\n    /* 父元素相对定位 */\n    position: relative;\n    float: left;\n    width: 228px;\n    height: 270px;\n    background-color: #fff;\n    margin-right: 15px;\n    margin-bottom: 15px;\n   \n}\n.box-bd ul li > img {\n    width: 100%;\n}\n.box-bd ul li h4 {\n    margin: 20px 20px 20px 25px;\n    font-size: 14px;\n    color: #050505;\n    font-weight: 400;\n}\n.box-bd ul li em {\n     /* 子元素绝对定位 */\n    position: absolute;\n    top: 4px;\n    right: -4px;\n}\n```\n\n\n\n## 3. 定位(position)的应用\n\n### 3.1.  固定定位小技巧： 固定在版心左侧位置。\n\n小算法：\n\n1.让固定定位的盒子 left: 50%.  走到浏览器可视区（也可以看做版心） 的一半位置。\n\n2.让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置\n\n就可以让固定定位的盒子**贴着版心右侧对齐**了。\n\n<img src=\"css基础/1571388901848.png\" width='350'>\n\n\n\n<img src=\"css基础/1571389108805.png\" width='300'>\n\n\n\n案例效果：\n\n![1571389241926](css基础/1571389241926.png)\n\n```\n<style>\n        .w {\n            width: 800px;\n            height: 1400px;\n            background-color: pink;\n            margin: 0 auto;\n        }\n        .fixed {\n            position: fixed;\n            /* 1. 走浏览器宽度的一半 */\n            left: 50%;\n            /* 2. 利用margin 走版心盒子宽度的一半距离 */\n            margin-left: 405px;\n            width: 50px;\n            height: 150px;\n            background-color: skyblue;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"fixed\"></div>\n    <div class=\"w\">版心盒子 800像素</div>\n  \n</body>\n```\n\n\n\n### 3.2. 堆叠顺序（z-index）\n\n- 在使用**定位**布局时，可能会**出现盒子重叠的情况**。此时，可以使用 **z-index** 来控制盒子的前后次序 (z轴)\n\n- 语法：\n\n  ```\n  选择器 { \tz-index: 1; }\n  ```\n\n  \n\n- `z-index` 的特性如下：\n\n  1. **属性值**：**正整数**、**负整数**或 **0**，默认值是 0，数值越大，盒子越靠上；\t\n  2. 如果**属性值相同**，则按照书写顺序，**后来居上**；\n  3. 数字后面**不能加单位**。\n\n  **注意**：`z-index` 只能应用于**相对定位**、**绝对定位**和**固定定位**的元素，其他**标准流**、**浮动**和**静态定位**无效。\n\n\n\n- 应用 `z-index` 层叠等级属性可以**调整盒子的堆叠顺序**。如下图所示：\n\n![zindex示意图](css基础/12_zindex示意图.png)\n\n\n\n> 案例演示：堆叠顺序。\n>\n> \n\n\n\n## 4. 定位(position)的拓展\n\n### 4.1 绝对定位的盒子居中\n\n> **注意**：加了**绝对定位/固定定位的盒子**不能通过设置 `margin: auto` 设置**水平居中**。\n>\n> 但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：\n\n![绝对定位水平居中](css基础/10_绝对定位水平居中.png)\n\n1. `left: 50%;`：让**盒子的左侧**移动到**父级元素的水平中心位置**；\n2. `margin-left: -100px;`：让盒子**向左**移动**自身宽度的一半**。\n\n\n\n\n\n**盒子居中定位示意图**\n\n![绝对定位居中示意图](css基础/11_绝对定位居中示意图.png)\n\n### 4.2 定位特殊特性\n\n绝对定位和固定定位也和浮动类似。\n\n1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。\n\n2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。\n\n\n\n前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:\n\n- 可以用inline-block  转换为行内块\n- 可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）\n- 绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。\n\n所以说， 一个行内的盒子，如果加了**浮动**、**固定定位**和**绝对定位**，不用转换，就可以给这个盒子直接设置宽度和高度等。\n\n### 4.3 脱标的盒子不会触发外边距塌陷\n\n浮动元素、**绝对定位(固定定位）**元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）\n\n也就是说，我们给盒子改为了浮动或者定位，就不会有垂直**外边距合并的问题**了。\n\n\n\n### 4.4 绝对定位（固定定位）会完全压住盒子\n\n浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）\n\n但是绝对定位（固定定位） 会压住下面标准流所有的内容。\n\n浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素\n\n<img src=\"css基础/文字环绕图片.png\">\n\n## 5. 综合案例 - 淘宝轮播图(重点)\n\n### 5.1 效果图\n\n<img src=\"css基础/淘宝焦点图.png\" width='600'>\n\n### 5.2 布局分析\n\n![1571397019689](css基础/1571397019689.png)\n\n\n\n### 5.3 步骤\n\n1. 大盒子我们类名为：  tb-promo      淘宝广告\n\n2. 里面先放一张图片。\n\n3. 左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   \n\n   ​\t左按钮样式（border-radius：左上，右上，右下，左下），\n\n   ​\t右按钮定位，提取左右按钮共同的样式代码（并集选择器）\n\n4. 底侧小圆点ul 继续做。 类名为 promo-nav     \n\n   ​\t中间长方形椭圆 ul的定位（水平居中，离底部15px）  \n\n   ​\t长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式\n\n\n\n### 5.4 知识点：圆角矩形设置4个角\n\n圆角矩形可以为4个角分别设置圆度， 但是是有顺序的\n\n```\nborder-top-left-radius:20px;border-top-right-radius:20px;border-bottom-right-radius:20px;border-bottom-left-radius:20px;\n```\n\n* 如果4个角，数值相同\n\n  ~~~css\n  border-radius: 15px;\n  ~~~\n\n* 里面数值不同，我们也可以按照简写的形式，具体格式如下:\n\n~~~css\nborder-radius: 左上角 右上角  右下角  左下角;\n~~~\n\n还是遵循的顺时针。\n\n\n\n### 5.5 代码参考\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>淘宝轮播图做法</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        li {\n            list-style: none;\n        }\n\n        .tb-promo {\n            position: relative;\n            width: 520px;\n            height: 280px;\n            background-color: pink;\n            margin: 100px auto;\n        }\n\n        .tb-promo img {\n            width: 520px;\n            height: 280px;\n        }\n\n        /* 并集选择器可以集体声明相同的样式 */\n        .prev,\n        .next {\n            position: absolute;\n            /* 绝对定位的盒子垂直居中 */\n            top: 50%;\n            margin-top: -15px;\n            /* 加了绝对定位的盒子可以直接设置高度和宽度 */\n            width: 20px;\n            height: 30px;\n            background: rgba(0, 0, 0, .3);\n            text-align: center;\n            line-height: 30px;\n            color: #fff;\n            text-decoration: none;\n        }\n\n        .prev {\n            left: 0;\n            /* border-radius: 15px; */\n            border-top-right-radius: 15px;\n            border-bottom-right-radius: 15px;\n        }\n\n        .next {\n            /* 如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top */\n            right: 0;\n            /* border-radius: 15px; */\n            border-top-left-radius: 15px;\n            border-bottom-left-radius: 15px;\n        }\n        .promo-nav {\n            position: absolute;\n            bottom: 15px;\n            left: 50%;\n            margin-left: -35px;\n            width: 70px;\n            height: 13px;\n            /* background-color: pink; */\n            background: rgba(255,255,255, .3);\n            border-radius: 7px;\n        }\n        .promo-nav li {\n            float: left;\n            width: 8px;\n            height: 8px;\n            background-color: #fff;\n            border-radius: 50%;\n            margin: 3px;\n        }\n        /* 不要忘记选择器权重的问题 */\n       .promo-nav .selected {\n            background-color: #ff5000;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"tb-promo\">\n        <img src=\"images/tb.jpg\" alt=\"\">\n        <!-- 左侧按钮箭头 -->\n        <a href=\"#\" class=\"prev\"> &lt; </a>\n        <!-- 右侧按钮箭头 -->\n        <a href=\"#\" class=\"next\"> &gt; </a>\n        <!-- 小圆点 -->\n        <ul class=\"promo-nav\">\n            <li class=\"selected\"></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n        </ul>\n    </div>\n</body>\n\n</html>\n```\n\n\n\n## 6. 网页布局总结\n\n通过盒子模型，清楚知道大部分html标签是一个盒子。\n\n通过CSS浮动、定位 可以让每个盒子排列成为网页。\n\n一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。\n\n### 6.1. 标准流 \n\n可以让盒子上下排列或者左右排列，**垂直的块级盒子显示就用标准流布局**。\n\n### 6.2. 浮动\n\n可以让多个块级元素一行显示或者左右对齐盒子，**多个块级盒子水平显示就用浮动布局**\n\n### 6.3. 定位\n\n定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。**如果元素自由在某个盒子内移动就用定位布局。**\n\n\n\n\n\n## 7. 元素的显示与隐藏\n\n- 目的（本质）\n\n  ​\t让一个元素在页面中消失或者显示出来\n\n- 场景\n\n  ​\t类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！\n\n### 7.1. display 显示（重点）\n\n- display 设置或检索对象是否及如何显示。\n\n  ```\n  display: none 隐藏对象display：block 除了转换为块级元素之外，同时还有显示元素的意思。\n  ```\n\n- 特点： display 隐藏元素后，**不再占**有原来的位置。\n\n- 后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：\n\n  > 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛\n\n<img src=\"css基础/29none.png\">\n\n> \n\n### 7.2. visibility 可见性 （了解）\n\n- visibility 属性用于指定一个元素应可见还是隐藏。\n\n  ```\n  visibility：visible ; 　元素可视visibility：hidden; 　  元素隐藏\n  ```\n\n- 特点：**visibility 隐藏元素后，继续占有原来的位置**。（停职留薪）\n\n  \n\n- 如果隐藏元素想要原来位置， 就用 visibility：hidden\n\n- 如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）\n\n<img src=\"css基础/30visibility.png\">\n\n### 7.3. overflow 溢出（重点）\n\n- overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。\n\n| 属性值      | 描述                                       |\n| ----------- | ------------------------------------------ |\n| **visible** | 不剪切内容也不添加滚动条                   |\n| **hidden**  | 不显示超过对象尺寸的内容，超出的部分隐藏掉 |\n| **scroll**  | 不管超出内容否，总是显示滚动条             |\n| **auto**    | 超出自动显示滚动条，不超出不显示滚动条     |\n\n-  一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。\n-  但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。\n\n\n\n<img src=\"css基础/33overflow.png\">\n\n\n\n- 实际开发场景：\n\n1. 清除浮动\n2. 隐藏超出内容，隐藏掉,  不允许内容超过父盒子。\n\n### 7.4. 显示与隐藏总结\n\n| 属性                           | 区别                   | 用途                                                         |\n| ------------------------------ | ---------------------- | ------------------------------------------------------------ |\n| **display 显示     （重点）**  | 隐藏对象，不保留位置   | 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛 |\n| **visibility 可见性 （了解）** | 隐藏对象，保留位置     | 使用较少                                                     |\n| **overflow 溢出（重点）**      | 只是隐藏超出大小的部分 | 1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围     |\n\n\n\n## 8 综合案例：土豆网鼠标经过显示遮罩\n\n### 8.1. 效果图\n\n<img src=\"css基础/土豆网案例.png\">\n\n### 8.2. 案例目标\n\n1.练习元素的显示与隐藏\n\n2.练习元素的定位\n\n### 8.3. 核心原理\n\n原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。\n\n遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。\n\n### 8.4. 代码参考\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>仿土豆网显示隐藏遮罩案例</title>\n    <style>\n        .tudou {\n            position: relative;\n            width: 444px;\n            height: 320px;\n            background-color: pink;\n            margin: 30px auto;\n        }\n\n        .tudou img {\n            width: 100%;\n            height: 100%;\n        }\n\n        .mask {\n            /* 隐藏遮罩层 */\n            display: none;\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, .4) url(images/arr.png) no-repeat center;\n        }\n\n        /* 当我们鼠标经过了 土豆这个盒子，就让里面遮罩层显示出来 */\n        .tudou:hover .mask {\n            /* 而是显示元素 */\n            display: block;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n    <div class=\"tudou\">\n        <div class=\"mask\"></div>\n        <img src=\"images/tudou.jpg\" alt=\"\">\n    </div>\n</body>\n\n</html>\n```\n\n# CSS高阶技巧\n\n## 1. 精灵图（重点）\n\n### 1.1 为什么需要精灵图\n\n![1571482435259](css基础/1571482435259.png)\n\n一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。\n\n**为什么使用精灵图（目的）：**\n\n​\t**为了有效地减少服务器接收和发送请求的次数**，**提高**页面的**加载速度**，出现了 **CSS 精灵技术**（也称 CSS Sprites、CSS 雪碧）。\n\n**核心原理**：\n\n​\t将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。\n\n**精灵图举例**:\n\n![1571519067073](css基础/1571519067073.png)\n\n### 1.2 精灵图（sprites）的使用\n\n使用精灵图核心：\n\n1. 精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。\n2. 这个大图片也称为 sprites  精灵图  或者 雪碧图\n3. 移动背景图片位置， 此时可以使用 background-position 。\n4. 移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同\n5. 因为一般情况下都是往上往左移动，所以数值是负值。\n6. 使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。\n\n\n\n使用精灵图核心总结：\n\n1. 精灵图主要**针对于小的背景图片**使用。\n\n2. 主要借助于背景位置来实现---**background-position** 。\n\n3. 一般情况下精灵图都是**负值**。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）\n\n### 1.3 案例：拼出自己名字\n\n#### 1.3.1 案例效果\n\n![1571519368229](css基础/1571519368229.png)\n\n#### 1.3.2 代码参考\n\n结构\n\n```html\n<span class=\"p\">p</span>\n<span class=\"i\">i</span>\n<span class=\"n\">n</span>\n<span class=\"k\">k</span>\n```\n\n样式\n\n```css\nspan {\n    display: inline-block;\n    background: url(images/abcd.jpg) no-repeat;\n}\n.p {\n    width: 100px;\n    height: 112px;\n    /* background-color: pink; */\n    background-position:  -493px -276px;\n}\n.i {\n    width: 60px;\n    height: 108px;\n    /* background-color: pink; */\n    background-position: -327px -142px;\n}\n.n {\n    width: 108px;\n    height: 109px;\n    /* background-color: pink; */\n    background-position: -215px -141px;\n}\n.k {\n    width: 105px;\n    height: 114px;\n    /* background-color: pink; */\n    background-position: -495px -142px;\n}\n```\n\n## 2. 字体图标\n\n### 2.1 字体图标的产生\n\n字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。\n\n精灵图是有诸多优点的，但是缺点很明显。\n\n1.图片文件还是比较大的。\n\n2.图片本身放大和缩小会失真。\n\n3.一旦图片制作完毕想要更换非常复杂。\n\n此时，有一种技术的出现很好的解决了以上问题，就是**字体图标 iconfont**。\n\n**字体图标**可以为前端工程师提供一种方便高效的图标使用方式，**展示的是图标，本质属于字体**。\n\n### 2.2 字体图标的优点\n\n**轻量级**：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求\n\n- 灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等\n- 兼容性：几乎支持所有的浏览器，请放心使用\n- 注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。\n\n**总结：**\n\n1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。![1571519724473](css基础/1571519724473.png)\n\n2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。\n\n![1571519739775](css基础/1571519739775.png)\n\n\n\n**使用步骤**\n\n字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：\n\n1.字体图标的下载 \n\n2.字体图标的引入 （引入到我们html页面中）\n\n3.字体图标的追加 （以后添加新的小图标）\n\n### **2.3** **字体图标的下载**\n\n**推荐下载网站：**\n\n- **icomoon** **字库**  http://icomoon.io    推荐指数  **★★★★★**\n\nIcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n- **阿里** **iconfont** **字库**   http://www.iconfont.cn/   推荐指数   **★★★★★** \n\n这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！\n\n### **2.4** **字体图标的引入**\n\n**下载完毕之后，注意原先的文件不要删，后面会用**。\n\n1. 把下载包里面的 **fonts** 文件夹放入页面根目录下\n\n![1571520092646](css基础/1571520092646.png)\n\n\n\n* **字体文件格式**\n\n不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。\n\n1).TureType(  **.ttf**  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；\n\n2).Web Open Font Format( **.woff** )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；\n\n3).Embedded Open Type( **.eot** )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；\n\n4).SVG(  .**svg**  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；\n\n\n\n2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。\n\n一定注意字体文件路径的问题\n\n```\n @font-face {\n   font-family: 'icomoon';\n   src:  url('fonts/icomoon.eot?7kkyc2');\n   src:  url('fonts/icomoon.eot?7kkyc2#iefix') format('embedded-opentype'),\n     url('fonts/icomoon.ttf?7kkyc2') format('truetype'),\n     url('fonts/icomoon.woff?7kkyc2') format('woff'),\n     url('fonts/icomoon.svg?7kkyc2#icomoon') format('svg');\n   font-weight: normal;\n   font-style: normal;\n }\n\n```\n\n\n\n3. html 标签内添加小图标。\n\n![1571520411345](css基础/1571520411345.png)\n\n4. 给标签定义字体。\n\n  ```\n span {\n   font-family: \"icomoon\";\n }\n  ```\n\n  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 \n\n  ![1571520485350](css基础/1571520485350.png)\n\n### 2.5 字体图标的追加\n\n如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。\n\n把压缩包里面的 **selection.json** 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。\n\n![1571520554317](css基础/1571520554317.png)\n\n### 2.6 字体图标加载的原理：\n\n![1571520617270](css基础/字体图标加载的原理.gif)\n\n## 3. CSS 三角\n\n### 3.1 介绍\n\n网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。\n\n一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：\n\n![1571520965966](css基础/1571520965966.png)\n\n```css\n div {\n \twidth: 0; \n    height: 0;\n    border: 50px solid transparent;\n\tborder-color: red green blue black;\n\tline-height:0;\n    font-size: 0;\n }\n```\n\n1. 我们用css 边框可以模拟三角效果\n2. 宽度高度为0\n3. 我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了\n4. 为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;\n\n### 3.2 案例：京东三角\n\n#### 3.2.1效果图\n\n![1571521183026](css基础/1571521183026.png)\n\n#### 3.2.2 代码参考\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>CSS 三角制作</title>\n    <style>\n        .box1 {\n            width: 0;\n            height: 0;\n            /* border: 10px solid pink; */\n            border-top: 10px solid pink;\n            border-right: 10px solid red;\n            border-bottom: 10px solid blue;\n            border-left: 10px solid green;\n        }\n        .box2 {\n            width: 0;\n            height: 0;\n            border: 50px solid transparent;\n            border-left-color: pink;\n            margin: 100px auto;\n        }\n        .jd {\n            position: relative;\n            width: 120px;\n            height: 249px;\n            background-color: pink;\n        }\n        .jd span {\n            position: absolute;\n            right: 15px;\n            top: -10px;\n            width: 0;\n            height: 0;\n            /* 为了照顾兼容性 */\n            line-height: 0;  \n            font-size: 0;\n            border: 5px solid transparent;\n            border-bottom-color: pink;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"jd\">\n        <span></span>\n    </div>\n</body>\n</html>\n```\n\n\n\n## 4. CSS 用户界面样式\n\n**什么是界面样式**\n\n所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。\n\n- 更改用户的鼠标样式 \n- 表单轮廓\n- 防止表单域拖拽\n\n### 4.1 鼠标样式 cursor\n\n```css\n li {\n \tcursor: pointer; \n }\n```\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\n\n![1571521805183](css基础/1571521805183.png)\n\n### 4.2 轮廓线 outline\n\n给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。\n\n```css\n input {\n \toutline: none; \n }\n```\n\n### 4.3 防止拖拽文本域 resize\n\n 实际开发中，我们文本域右下角是不可以拖拽的。\n\n```css\n textarea{  \tresize: none; }\n```\n\nvertical-align 属性应用\n\n## 5. vertical-align 属性应用\n\nCSS 的 **vertical-align** 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。\n\n官方解释： 用于设置一个元素的**垂直对齐方式**，但是它只针对于行内元素或者行内块元素有效。\n\n语法：\n\n```css\nvertical-align : baseline | top | middle | bottom \n```\n\n![1571522023413](css基础/1571522023413.png)\n\n![1571522040645](css基础/1571522040645.png)\n\n### **5.1** **图片、表单和文字对齐**\n\n图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。\n\n![1571522093729](css基础/1571522093729.png)\n\n此时可以给图片、表单这些行内块元素的 **vertical-align 属性设置为 middle** 就可以让文字和图片垂直居中对齐了。\n\n### 5.2 解决图片底部默认空白缝隙问题\n\nbug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。\n\n主要解决方法有两种：\n\n1.**给图片**添加 **vertical-align:middle | top| bottom** 等。 （提倡使用的）\n\n2.把图片转换为块级元素  **display: block**; \n\n![1571522162225](css基础/1571522162225.png)\n\n\n\n## 6. 溢出的文字省略号显示\n\n### 6.1 单行文本溢出显示省略号\n\n![1571522317809](css基础/1571522317809.png)\n\n单行文本溢出显示省略号--必须满足三个条件：\n\n```css\n  /*1. 先强制一行内显示文本*/\n   white-space: nowrap;  （ 默认 normal 自动换行）\n   \n  /*2. 超出的部分隐藏*/\n   overflow: hidden;\n   \n  /*3. 文字用省略号替代超出的部分*/\n   text-overflow: ellipsis;\n```\n\n\n\n### 6.2 多行文本溢出显示省略号（了解）\n\n![1571522334591](css基础/1571522334591.png)\n\n\n\n多行文本溢出显示省略号，**有较大兼容性问题**，适合于webKit浏览器或移动端（移动端大部分是webkit内核）\n\n```css\n/*1. 超出的部分隐藏 */\noverflow: hidden;\n\n/*2. 文字用省略号替代超出的部分 */\ntext-overflow: ellipsis;\n\n/* 3. 弹性伸缩盒子模型显示 */\ndisplay: -webkit-box;\n\n/* 4. 限制在一个块元素显示的文本的行数 */\n-webkit-line-clamp: 2;\n\n/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */\n-webkit-box-orient: vertical;\n```\n\n**更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。**\n\n\n\n## 7. 常见布局技巧\n\n**巧妙利用一个技术更快更好的布局：**\n\n1. margin负值的运用\n2. 文字围绕浮动元素\n3. 行内块的巧妙运用\n4. CSS三角强化\n\n### 7.1. margin负值运用\n\n![1571522666082](css基础/1571522666082.png)\n\n![1571522683897](css基础/1571522683897.png)\n\n1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框\n\n2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）\n\n### 7.2 文字围绕浮动元素\n\n**效果**\n\n![1571522777745](css基础/1571522777745.png)\n\n**布局示意图**\n\n![1571522761996](css基础/1571522761996.png)\n\n**巧妙运用浮动元素不会压住文字的特性**\n\n### 7.3 行内块巧妙运用\n\n![1571522898744](css基础/1571522898744.png)\n\n页码在页面中间显示:\n\n1. 把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;\n2. 利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中\n\n![1571522910580](css基础/1571522910580.png)\n\n### 7.4. CSS 三角强化 案例\n\n#### **7.4.1 原理**\n\n![1571550959181](css基础/1571550959181.png)\n\n![1571551000391](css基础/1571551000391.png)\n\n![1571548058053](css基础/1571548058053.png)\n\n\n\n```html\n<style>\n    .box1 {\n        width: 0;\n        height: 0;\n        \n        /* 把上边框宽度调大 */\n        /* border-top: 100px solid transparent;\n        border-right: 50px solid skyblue; */\n        /* 左边和下边的边框宽度设置为0 */\n        /* border-bottom: 0 solid blue;\n        border-left: 0 solid green; */\n        \n        /* 1.只保留右边的边框有颜色 */\n        border-color: transparent red transparent transparent;\n        /* 2. 样式都是solid */\n        border-style: solid;\n        /* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */\n        border-width: 100px 50px 0 0 ;\n    }\n\n</style>\n</head>\n<body>\n    <div class=\"box1\"></div>\n</body>\n```\n\n#### 7.4.2 案例效果\n\n![1571548099631](css基础/1571548099631.png)\n\n#### **7.4.3 代码参考**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>CSS三角强化的巧妙运用</title>\n        <style>\n            .price {\n                width: 160px;\n                height: 24px;\n                line-height: 24px;\n                border: 1px solid red;\n                margin: 0 auto;\n            }\n            .miaosha {\n                position: relative;\n                float: left;\n                width: 90px;\n                height: 100%;\n                background-color:red;\n                text-align: center;\n                color: #fff;\n                font-weight: 700;\n                margin-right: 8px;\n\n            }\n            .miaosha i {\n                position: absolute;\n                right: 0;\n                top: 0;\n                width: 0;\n                height: 0;\n                border-color: transparent #fff transparent transparent;\n                border-style: solid;\n                border-width: 24px 10px 0 0;\n            }\n            .origin {\n                font-size: 12px;\n                color: gray;\n                text-decoration: line-through;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"price\">\n            <span class=\"miaosha\">\n                ¥1650\n                <i></i>\n            </span>\n            <span class=\"origin\">¥5650</span>\n        </div>\n    </body>\n</html>\n```\n\n## 8. CSS 初始化\n\n不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化\n\n简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）\n\n每个网页都必须首先进行 CSS初始化。\n\n这里我们以 京东CSS初始化代码为例。\n\n**Unicode编码字体：**\n\n把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。\n\n比如：\n\n黑体 \\9ED1\\4F53\n宋体 \\5B8B\\4F53\n微软雅黑 \\5FAE\\8F6F\\96C5\\9ED1\n","slug":"css基础","published":1,"updated":"2021-05-19T06:15:35.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckov2oonu000a9wrc89y21kab","content":"<h1 id=\"css基础\"><a href=\"#css基础\" class=\"headerlink\" title=\"css基础\"></a>css基础</h1><h2 id=\"一-css简介\"><a href=\"#一-css简介\" class=\"headerlink\" title=\"一.css简介\"></a>一.css简介</h2><p>​    CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.<br>​    有时我们也会称之为 CSS 样式表或级联样式表。<br>​    CSS 是也是一种标记语言<br>​    CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。<br>​    CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。<br>​    CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%B0%8F%E9%B8%9F.png\" class>\n\n<h3 id=\"css语法规范\"><a href=\"#css语法规范\" class=\"headerlink\" title=\"css语法规范\"></a>css语法规范</h3><p>​    1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解CSS 样式规则。<br>​    2.CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/css%E5%B1%9E%E6%80%A7%E8%A7%84%E5%88%99.png\" class>\n\n<p> 1.选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式<br> 2.属性和属性值以“键值对”的形式出现<br> 3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等<br> 4.属性和属性值之间用英文“:”分开<br> 5.多个“键值对”之间用英文“;”进行区分<br> 例如：<br>    所有的样式，都包含在 &lt;style&gt; 标签内，表示是样式表。&lt;style&gt; 一般写到 &lt;/head&gt; 上方</p>\n<pre><code>    &lt;head&gt;\n        &lt;style&gt;\n            h4 &#123;\n                color: blue;\n                font-size: 100px;\n            &#125;\n        &lt;/style&gt;\n    &lt;/head&gt;\n</code></pre>\n<h3 id=\"css代码风格：\"><a href=\"#css代码风格：\" class=\"headerlink\" title=\"css代码风格：\"></a>css代码风格：</h3><pre><code>1. 样式格式书写\n    1.紧凑格式   \n        h3 &#123; color: deeppink;font-size: 20px;&#125;\n    2.展开格式   \n     h3 &#123;\n        color: pink;\n        font-size: 20px;    \n     &#125;\n    强烈推荐第二种格式， 因为更直观。\n\n        2. 样式大小写风格\n        1.小写格式\n            h3 &#123;\n            color: pink;\n            &#125;\n        2.大写格式\n              H3 &#123;\n            COLOR: PINK;   \n        &#125;\n        强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。\n        \n            3. 样式空格风格\n    1. h3 &#123;\n    color: pink;    \n    &#125;\n        属性值前面，冒号后面，保留一个空格\n    选择器（标签）和大括号中间保留空格\n        ### css选择器的作用\n    答：选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。  简单来说，就是选择标签用的。\n    ​    &#123;% asset_img css属性规则.png  %&#125;\n        找到所有的 h1 标签。  选择器（选对人）\n        设置这些标签的样式，比如颜色为红色（做对事)。\n    \n        ### css基础选择器\n</code></pre>\n<p>基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器</p>\n<h4 id=\"标签选择器：\"><a href=\"#标签选择器：\" class=\"headerlink\" title=\"标签选择器：\"></a>标签选择器：</h4><p>​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。<br>语法：<br>​    标签选择器{<br>​        属性：属性值<br>​        …<br>​    }<br>作用：<br>​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p>\n<h4 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h4><p>​    如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.<br>语法：<br>​    .类名 {<br>​        属性1: 属性值1;<br>​        …<br>​    }<br>​    结构需要用class属性来调用  class  类的意思<br>​    &lt;div class=”类名”&gt; 变红色 &lt;/div&gt;<br>​    1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。<br>​    2.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。<br>​    3.类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。<br>​    4.可以理解为给这个标签起了一个名字，来表示。<br>​    5.长名称或词组可以使用中横线来为选择器命名。<br>​    6.不要使用纯数字、中文等命名，尽量使用英文字母来表示。<br>​    7.命名要有意义，尽量使别人一眼就知道这个类名的目的。</p>\n<h4 id=\"多类名选择器\"><a href=\"#多类名选择器\" class=\"headerlink\" title=\"多类名选择器\"></a>多类名选择器</h4><p>​    我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.<br>​    简单理解就是一个标签有多个名字. </p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E6%B7%98%E5%AE%9D%E7%BD%91%E5%A4%9A%E7%B1%BB%E5%90%8D.png\" class>\n<pre><code>多类名的具体使用：\n    1. \\&lt;div class=&quot;red font20&quot;&gt;亚瑟\\&lt;/div&gt;\n    注意：\n    ​        1.在标签class 属性中写 多个类名\n    ​        2.多个类名中间必须用空格分开\n    ​        3.这个标签就可以分别具有这些类名的样式\n</code></pre>\n<h4 id=\"id选择器：\"><a href=\"#id选择器：\" class=\"headerlink\" title=\"id选择器：\"></a>id选择器：</h4><p>​    id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。<br>​    HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#” 来定义。<br>​    语法：<br>​         #id名 {<br>​            属性1: 属性值1;<br>​            …<br>​        }<br>​        注意：id 属性只能在每个 HTML 文档中出现一次</p>\n<h4 id=\"id选择器和类选择器的区别：\"><a href=\"#id选择器和类选择器的区别：\" class=\"headerlink\" title=\"id选择器和类选择器的区别：\"></a>id选择器和类选择器的区别：</h4><p>​    1.类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。<br>​    2.id 选择器好比人的身份证号码，全中国是唯一的，不得重复。<br>​    3.id 选择器和类选择器最大的不同在于使用次数上。<br>​    4.类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/id%E4%B8%8E%E7%B1%BB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB.png\" class>\n\n<h4 id=\"通配符选择器：\"><a href=\"#通配符选择器：\" class=\"headerlink\" title=\"通配符选择器：\"></a>通配符选择器：</h4><p>​    语法：<br>        * {<br>            属性1: 属性值1;<br>            …<br>                }<br>        通配符选择器不需要调用， 自动就给所有的元素使用样式<br>        特殊情况才使用，后面讲解使用场景(以下是清除所有的元素标签的内外边距,后期讲)</p>\n<pre><code>           * &#123;\n          margin: 0;\n      padding: 0;\n           &#125; \n        \n          #### 选择器总结\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93.png\" class>\n\n<h2 id=\"二-css字体属性\"><a href=\"#二-css字体属性\" class=\"headerlink\" title=\"二.css字体属性:\"></a>二.css字体属性:</h2><h3 id=\"字体大小：\"><a href=\"#字体大小：\" class=\"headerlink\" title=\"字体大小：\"></a>字体大小：</h3><p>​    CSS 使用 font-size 属性定义字体大小。<br>语法：<br>​     p {<br>​        font-size: 20px;<br>​    }<br>​    1.px（像素）大小是我们网页的最常用的单位<br>​    2.谷歌浏览器默认的文字大小为16px<br>​    3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小<br>​    4.可以给 body 指定整个页面文字的大小</p>\n<h3 id=\"字体粗细：\"><a href=\"#字体粗细：\" class=\"headerlink\" title=\"字体粗细：\"></a>字体粗细：</h3><p>​    CSS 使用 font-weight 属性设置文本字体的粗细。<br>语法：<br>​    p {<br>​        font-weight: bold;<br>​    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E7%B2%97%E7%BB%86.png\" class>\n\n<p>1.学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗<br>2.实际开发时，我们更喜欢用数字表示粗细</p>\n<h3 id=\"字体样式：\"><a href=\"#字体样式：\" class=\"headerlink\" title=\"字体样式：\"></a>字体样式：</h3><p>​    CSS 使用 font-style 属性设置文本的风格。<br>语法：<br>​    p {<br>​        font-style: normal;<br>​    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E6%96%87%E5%AD%97%E5%80%BE%E6%96%9C.png\" class>\n\n<h3 id=\"字体的综合写法\"><a href=\"#字体的综合写法\" class=\"headerlink\" title=\"字体的综合写法\"></a>字体的综合写法</h3><p>字体属性可以把以上文字样式综合来写, 这样可以更节约代码:</p>\n<p> body {   font: font-style  font-weight  font-size/line-height  font-family;}</p>\n<p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</p>\n<h3 id=\"字体总结：\"><a href=\"#字体总结：\" class=\"headerlink\" title=\"字体总结：\"></a>字体总结：</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E6%80%BB%E7%BB%93.png\" class>\n\n<h2 id=\"三-css文本属性：\"><a href=\"#三-css文本属性：\" class=\"headerlink\" title=\"三.css文本属性：\"></a>三.css文本属性：</h2><h3 id=\"文本颜色：\"><a href=\"#文本颜色：\" class=\"headerlink\" title=\"文本颜色：\"></a>文本颜色：</h3><p>​    color 属性用于定义文本的颜色。<br>语法：<br>​    div {<br>​        color: red;<br>​    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E9%A2%9C%E8%89%B2%E5%80%BC.png\" class>\n\n<p>开发中最常用的是十六进制</p>\n<h3 id=\"文本对齐：\"><a href=\"#文本对齐：\" class=\"headerlink\" title=\"文本对齐：\"></a>文本对齐：</h3><p>text-align 属性用于设置元素内文本内容的水平对齐方式。<br>语法：<br>    div {<br>        text-align: center;<br>    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AF%B9%E9%BD%90%E6%96%87%E6%9C%AC.png\" class>\n\n<h3 id=\"修饰文本：\"><a href=\"#修饰文本：\" class=\"headerlink\" title=\"修饰文本：\"></a>修饰文本：</h3><p>​    语法：<br>​     div {<br>​        text-decoration：underline；<br>​     }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E4%BF%AE%E9%A5%B0%E6%96%87%E6%9C%AC.png\" class>\n\n<p>重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.</p>\n<h3 id=\"文本缩进\"><a href=\"#文本缩进\" class=\"headerlink\" title=\"文本缩进\"></a>文本缩进</h3><p>语法：<br>    div {<br>        text-indent：20px；<br>    }<br>    div {<br>        text-indent：2em；<br>    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E7%BC%A9%E8%BF%9B.png\" class>\n\n<pre><code>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。\n</code></pre>\n<h3 id=\"行间距：\"><a href=\"#行间距：\" class=\"headerlink\" title=\"行间距：\"></a>行间距：</h3><p>​    line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离<br>语法：<br>​    p {<br>​        line-height: 26px;<br>​    }<br>​    行高的文本分为 上间距  文本高度 下间距 = 行间距</p>\n<h2 id=\"四-css样式表：\"><a href=\"#四-css样式表：\" class=\"headerlink\" title=\"四.css样式表：\"></a>四.css样式表：</h2><p>​    按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类： </p>\n<h3 id=\"行内样式表（行内式）\"><a href=\"#行内样式表（行内式）\" class=\"headerlink\" title=\"行内样式表（行内式）\"></a>行内样式表（行内式）</h3><p>​        行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.<br>​        语法：</p>\n<pre><code>        &lt;div style=&quot;color: red; font-size: 12px;&quot;&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;\n</code></pre>\n<p>​        1.style 其实就是标签的属性<br>​        在双引号中间，写法要符合 CSS 规范<br>​        2.可以控制当前的标签设置样式<br>​        3.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用<br>​        4.使用行内样式表设定 CSS，通常也被称为行内式引入</p>\n<h3 id=\"内部样式表（嵌入式）\"><a href=\"#内部样式表（嵌入式）\" class=\"headerlink\" title=\"内部样式表（嵌入式）\"></a>内部样式表（嵌入式）</h3><p>​        内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 &lt;style&gt; 标签中<br>​        语法：</p>\n<pre><code>            &lt;style&gt;\n                div &#123;\n                color: red;\n                font-size: 12px;\n                &#125;\n            &lt;/style&gt;\n</code></pre>\n<p>​        1.&lt;style&gt; 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的&lt;head&gt;标签中<br>​        2.通过此种方式，可以方便控制当前整个页面中的元素样式设置<br>​        3.代码结构清晰，但是并没有实现结构与样式完全分离<br>​        4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</p>\n<h3 id=\"外部样式表（链接式）\"><a href=\"#外部样式表（链接式）\" class=\"headerlink\" title=\"外部样式表（链接式）\"></a>外部样式表（链接式）</h3><p>​    实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用.<br>​    引入外部样式表分为两步：</p>\n<pre><code>1. 新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。\n    2. 在 HTML 页面中，使用\\&lt;link&gt; 标签引入这个文件。\n    语法：\n        \\&lt;link rel=&quot;stylesheet&quot;  href=&quot;css文件路径&quot;&gt;\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/css%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93.png\" class>\n\n<h2 id=\"Chrome调试工具：\"><a href=\"#Chrome调试工具：\" class=\"headerlink\" title=\"Chrome调试工具：\"></a>Chrome调试工具：</h2><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E8%B0%B7%E6%AD%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png\" class>\n\n<p> 1.Ctrl+滚轮 可以放大开发者工具代码大小。<br> 2.左边是 HTML 元素结构，右边是 CSS 样式。<br> 3.右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。<br> 4.Ctrl + 0 复原浏览器大小。<br> 5.如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。<br> 6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。</p>\n<h2 id=\"五、emmet语法\"><a href=\"#五、emmet语法\" class=\"headerlink\" title=\"五、emmet语法\"></a>五、emmet语法</h2><h3 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h3><p>​        Emmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法。</p>\n<p>​        快速生成HTML结构语法</p>\n<p>​        快速生成CSS样式语法</p>\n<h3 id=\"2、快速生成HTML结构语法\"><a href=\"#2、快速生成HTML结构语法\" class=\"headerlink\" title=\"2、快速生成HTML结构语法\"></a>2、快速生成HTML结构语法</h3><ul>\n<li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 &lt;div&gt;&lt;/div&gt;</li>\n<li>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</li>\n<li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li>\n<li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li>\n<li>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</li>\n<li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li>\n<li>如果想要在生成的标签内部写内容可以用  { }  表示</li>\n</ul>\n<h3 id=\"3、快速生成CSS样式语法\"><a href=\"#3、快速生成CSS样式语法\" class=\"headerlink\" title=\"3、快速生成CSS样式语法\"></a>3、快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p>\n<p>​        比如 w200   按tab  可以 生成  width: 200px;</p>\n<p>​        比如 lh26px   按tab  可以生成  line-height: 26px;</p>\n<h3 id=\"4、快速格式化代码\"><a href=\"#4、快速格式化代码\" class=\"headerlink\" title=\"4、快速格式化代码\"></a>4、快速格式化代码</h3><p>Vscode  快速格式化代码:   shift+alt+f</p>\n<p>也可以设置 当我们 保存页面的时候自动格式化代码:</p>\n<p>1）文件 ——.&gt;【首选项】———-&gt;【设置】；</p>\n<p>2）搜索emmet.include;</p>\n<p>3）在settings.json下的【工作区设置】中添加以下语句：</p>\n<p>​        “editor.formatOnType”: true,</p>\n<p>​        “editor.formatOnSave”: true</p>\n<h2 id=\"六、css的复合选择器\"><a href=\"#六、css的复合选择器\" class=\"headerlink\" title=\"六、css的复合选择器\"></a>六、css的复合选择器</h2><h3 id=\"1、什么是复合选择器？\"><a href=\"#1、什么是复合选择器？\" class=\"headerlink\" title=\"1、什么是复合选择器？\"></a>1、什么是复合选择器？</h3><p>​        在 CSS 中，可以根据选择器的类型把选择器分为<em><strong>基础选择器</strong></em>和<em><strong>复合选择器</strong></em>，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。<br>​        复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签）<br>​        常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器</strong>等等</p>\n<h3 id=\"2、后代选择器-重要）\"><a href=\"#2、后代选择器-重要）\" class=\"headerlink\" title=\"2、后代选择器 (重要）\"></a>2、后代选择器 (重要）</h3><p><strong>定义：</strong></p>\n<p>​        后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>\n<p><strong>语法：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/01.png\" class width=\"1570867555401\">\n\n<p>​        上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。</p>\n<p><strong>语法说明</strong>：</p>\n<ul>\n<li>元素1 和 元素2 中间用空格隔开</li>\n<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>\n<li>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li>\n<li>元素1 和 元素2 可以是任意基础选择器</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/02.png\" class width=\"1570867652832\">\n\n<h3 id=\"3、子选择器-重要）\"><a href=\"#3、子选择器-重要）\" class=\"headerlink\" title=\"3、子选择器 (重要）\"></a>3、子选择器 (重要）</h3><p><strong>定义：</strong></p>\n<p>​        子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。</p>\n<p>​        （简单理解就是选亲儿子元素）</p>\n<p><strong>语法：</strong></p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/03.png\">\n\n<p>​        上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。</p>\n<p><strong>语法说明</strong>：</p>\n<ul>\n<li>元素1 和 元素2 中间用 大于号 隔开</li>\n<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>\n<li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/04.png\" class width=\"1570867652832\">\n\n<h3 id=\"4、并集选择器-重要）\"><a href=\"#4、并集选择器-重要）\" class=\"headerlink\" title=\"4、并集选择器 (重要）\"></a>4、并集选择器 (重要）</h3><p><strong>定义：</strong></p>\n<p>​        并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明。并集选择器是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p>\n<p><strong>语法：</strong></p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/05.png\">\n\n<p>​        上述语法表示选择元素1 和 元素2。</p>\n<p><strong>语法说明</strong>：</p>\n<ul>\n<li>元素1 和 元素2 中间用逗号隔开</li>\n<li>逗号可以理解为和的意思</li>\n<li>并集选择器通常用于集体声明</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/06.png\" class width=\"1570867652832\">\n\n<h3 id=\"5、伪类选择器\"><a href=\"#5、伪类选择器\" class=\"headerlink\" title=\"5、伪类选择器\"></a>5、伪类选择器</h3><p><strong>定义：</strong></p>\n<p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>\n<p><strong>语法：</strong></p>\n<p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p>\n<h3 id=\"6、链接伪类选择器\"><a href=\"#6、链接伪类选择器\" class=\"headerlink\" title=\"6、链接伪类选择器\"></a>6、链接伪类选择器</h3><p><strong>定义：</strong></p>\n<p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>\n<p><strong>语法：</strong></p>\n<p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p>\n<p>​        a:link    没有点击过的(访问过的)链接<br>​        a:visited    点击过的(访问过的)链接<br>​        a:hover    鼠标经过的那个链接<br>​        a:active    鼠标正在按下还没有弹起鼠标的那个链接</p>\n<p><strong>链接伪类选择器注意事项</strong></p>\n<p>​        为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。</p>\n<p>​        记忆法：love hate 或者 lv 包包 hao 。</p>\n<p>​        因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</p>\n<p><strong>链接伪类选择器实际工作开发中的写法</strong>：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570868845786.png\" class width=\"1570868845786\">\n\n\n\n<h3 id=\"7、-focus-伪类选择器\"><a href=\"#7、-focus-伪类选择器\" class=\"headerlink\" title=\"7、:focus 伪类选择器\"></a>7、:focus 伪类选择器</h3><p><strong>定义：</strong></p>\n<p>​        :focus 伪类选择器用于选取获得焦点的表单元素。</p>\n<p>​        焦点就是光标，一般情况 &lt;input&gt; 类表单元素才能获取</p>\n<p>例子：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570868891669.png\" class width=\"1570868891669\">\n\n\n\n<h3 id=\"复合选择器总结\"><a href=\"#复合选择器总结\" class=\"headerlink\" title=\"复合选择器总结\"></a>复合选择器总结</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570868930472.png\" class width=\"1570868930472\">\n\n<h2 id=\"七、css的显示模式\"><a href=\"#七、css的显示模式\" class=\"headerlink\" title=\"七、css的显示模式\"></a>七、css的显示模式</h2><h3 id=\"1、什么是元素的显示模式\"><a href=\"#1、什么是元素的显示模式\" class=\"headerlink\" title=\"1、什么是元素的显示模式\"></a>1、什么是元素的显示模式</h3><p><strong>定义：</strong></p>\n<p>​        元素显示模式就是元素（标签）以什么方式进行显示，比如&lt;div&gt;自己占一行，比如一行可以放多个&lt;span&gt;。</p>\n<p><strong>作用：</strong></p>\n<p>​        网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p>\n<h3 id=\"2、元素显示模式的分类\"><a href=\"#2、元素显示模式的分类\" class=\"headerlink\" title=\"2、元素显示模式的分类\"></a>2、元素显示模式的分类</h3><h4 id=\"2-1、块元素\"><a href=\"#2-1、块元素\" class=\"headerlink\" title=\"2.1、块元素\"></a>2.1、块元素</h4><p><strong>常见的块元素</strong>：</p>\n<pre><code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;\n</code></pre>\n<p>​        &lt;div&gt; 标签是最典型的块元素。</p>\n<p><strong>块级元素的特点</strong>：</p>\n<ul>\n<li>比较霸道，自己独占一行。</li>\n<li>高度，宽度、外边距以及内边距都可以控制。</li>\n<li>宽度默认是容器（父级宽度）的100%。</li>\n<li>是一个容器及盒子，里面可以放行内或者块级元素。</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>​        文字类的元素内不能放块级元素</p>\n<pre><code>&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放&lt;div&gt; \n同理， &lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素\n</code></pre>\n<h4 id=\"2-2、行内元素\"><a href=\"#2-2、行内元素\" class=\"headerlink\" title=\"2.2、行内元素\"></a>2.2、行内元素</h4><p><strong>常见的行内元素：</strong></p>\n<pre><code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;\n</code></pre>\n<p>​        &lt;span&gt; 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p>\n<p><strong>行内元素的特点：</strong></p>\n<ul>\n<li><p>相邻行内元素在一行上，一行可以显示多个。</p>\n</li>\n<li><p>高、宽直接设置是无效的。</p>\n</li>\n<li><p>默认宽度就是它本身内容的宽度。</p>\n</li>\n<li><p>行内元素只能容纳文本或其他行内元素。</p>\n</li>\n</ul>\n<p><strong>注意：</strong><br>        链接里面不能再放链接<br>        特殊情况链接 &lt;a&gt; 里面可以放块级元素，但是给 &lt;a&gt; 转换一下块级模式最安全</p>\n<h4 id=\"2-3、行内块元素\"><a href=\"#2-3、行内块元素\" class=\"headerlink\" title=\"2.3、行内块元素\"></a>2.3、行内块元素</h4><p><strong>常见的行内块标签</strong>：</p>\n<pre><code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;\n</code></pre>\n<p>​        它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p>\n<p><strong>行内块元素的特点</strong>：</p>\n<ul>\n<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li>\n<li>一行可以显示多个（行内元素特点）。</li>\n<li>默认宽度就是它本身内容的宽度（行内元素特点）。</li>\n<li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li>\n</ul>\n<h4 id=\"2-4、元素显示模式总结\"><a href=\"#2-4、元素显示模式总结\" class=\"headerlink\" title=\"2.4、元素显示模式总结\"></a>2.4、元素显示模式总结</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570870718415.png\" class width=\"1570870718415\">\n\n<p>​        学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</p>\n<h3 id=\"3、元素显示模式的转换\"><a href=\"#3、元素显示模式的转换\" class=\"headerlink\" title=\"3、元素显示模式的转换\"></a>3、元素显示模式的转换</h3><p><strong>简单理解</strong>: </p>\n<p>​        一个模式的元素需要另外一种模式的特性<br>​        比如想要增加链接 &lt;a&gt; 的触发范围。   </p>\n<p><strong>转换方式</strong></p>\n<ul>\n<li>转换为块元素：display:block;</li>\n<li>转换为行内元素：display:inline;</li>\n<li>转换为行内块：display: inline-block;</li>\n</ul>\n<h3 id=\"4、单行文字垂直居中的代码\"><a href=\"#4、单行文字垂直居中的代码\" class=\"headerlink\" title=\"4、单行文字垂直居中的代码\"></a>4、单行文字垂直居中的代码</h3><p><strong>解决方案</strong>:    </p>\n<p>​        让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570870368253.png\" class width=\"1570870368253\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570870387089.png\" class width=\"1570870387089\">\n\n\n\n<p><strong>简单理解</strong>: </p>\n<p>​        行高的上空隙和下空隙把文字挤到中间了，</p>\n<p>​        如果行高小于盒子高度,文字会偏上，</p>\n<p>​        如果行高大于盒子高度,则文字偏下。</p>\n<h2 id=\"八、css的背景\"><a href=\"#八、css的背景\" class=\"headerlink\" title=\"八、css的背景\"></a>八、css的背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>\n<h3 id=\"1、背景颜色\"><a href=\"#1、背景颜色\" class=\"headerlink\" title=\"1、背景颜色\"></a>1、背景颜色</h3><p><strong>样式名称</strong>：</p>\n<p>​        background-color 定义元素的背景颜色</p>\n<p><strong>使用方式</strong>：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886137899.png\" class width=\"1570886137899\">\n\n<p><strong>其他说明</strong>：</p>\n<p>​        元素背景颜色默认值是 transparent（透明）</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886176292.png\" class width=\"1570886176292\">\n\n<h3 id=\"2、背景图片\"><a href=\"#2、背景图片\" class=\"headerlink\" title=\"2、背景图片\"></a>2、背景图片</h3><p><strong>样式名称</strong>：</p>\n<p>​        background-image  定义元素的背景图片</p>\n<p><strong>使用方式</strong>：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886322557.png\" class width=\"1570886322557\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886362813.png\" class width=\"1570886362813\">\n\n<p><strong>其他说明</strong>：</p>\n<p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p>\n<p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p>\n<h3 id=\"3、背景平铺\"><a href=\"#3、背景平铺\" class=\"headerlink\" title=\"3、背景平铺\"></a>3、背景平铺</h3><p><strong>样式名称：</strong></p>\n<p>​        background-repeat 设置元素背景图像的平铺 </p>\n<p><strong>使用方式：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886648887.png\" class width=\"1570886648887\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886688306.png\" class width=\"1570886688306\">\n\n<h3 id=\"4、背景图片位置\"><a href=\"#4、背景图片位置\" class=\"headerlink\" title=\"4、背景图片位置\"></a>4、背景图片位置</h3><p><strong>样式名称：</strong></p>\n<p>​        background-position 属性可以改变图片在背景中的位置</p>\n<p><strong>使用方式：</strong></p>\n<p>​        <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886973530.png\" class width=\"1570886973530\"></p>\n<p>​        参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887034135.png\" class width=\"1570887034135\">\n\n<p><strong>其他说明：</strong></p>\n<p>1、参数是方位名词</p>\n<p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p>\n<p>​        如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p>\n<p>2、参数是精确单位</p>\n<p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p>\n<p>​        如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</p>\n<p>3、参数是混合单位</p>\n<p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p>\n<h3 id=\"5、背景图片固定\"><a href=\"#5、背景图片固定\" class=\"headerlink\" title=\"5、背景图片固定\"></a>5、背景图片固定</h3><p><strong>样式名称：</strong></p>\n<p>​        background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p>\n<p><strong>使用方式：</strong></p>\n<p>​        <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887652404.png\" class width=\"1570887652404\"></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887699177.png\" class width=\"1570887699177\">\n\n<p><strong>其他说明：</strong></p>\n<p>​        background-attachment 后期可以制作视差滚动的效果。</p>\n<h3 id=\"6、背景样式合写\"><a href=\"#6、背景样式合写\" class=\"headerlink\" title=\"6、背景样式合写\"></a>6、背景样式合写</h3><p><strong>背景合写样式：</strong></p>\n<p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>\n<p><strong>使用方式：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887809455.png\" class width=\"1570887809455\">\n\n<h3 id=\"7、背景色半透明\"><a href=\"#7、背景色半透明\" class=\"headerlink\" title=\"7、背景色半透明\"></a>7、背景色半透明</h3><p>CSS3 提供了背景颜色半透明的效果。 </p>\n<p><strong>使用方式：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887978061.png\" class width=\"1570887978061\">\n\n<ul>\n<li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li>\n<li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li>\n</ul>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>\n<li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</li>\n</ul>\n<h3 id=\"8、背景总结\"><a href=\"#8、背景总结\" class=\"headerlink\" title=\"8、背景总结\"></a>8、背景总结</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570888283511.png\" class width=\"1570888283511\">\n\n\n\n<h2 id=\"九、css三大特性\"><a href=\"#九、css三大特性\" class=\"headerlink\" title=\"九、css三大特性\"></a>九、css三大特性</h2><h3 id=\"1、层叠性\"><a href=\"#1、层叠性\" class=\"headerlink\" title=\"1、层叠性\"></a>1、层叠性</h3><p>​        相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p>\n<p>​        层叠性原则:</p>\n<ul>\n<li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>\n<li>样式不冲突，不会层叠</li>\n</ul>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571490015544.png\" class width=\"1571490015544\">\n\n<h3 id=\"2、继承性\"><a href=\"#2、继承性\" class=\"headerlink\" title=\"2、继承性\"></a>2、继承性</h3><p>​        CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571490049279.png\" class width=\"1571490049279\">\n\n\n\n<p>子元素可以继承父元素的样式：</p>\n<p>​    （text-，font-，line-这些元素开头的可以继承，以及color属性）</p>\n<p>继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞</p>\n<p>行高的继承性：</p>\n<pre><code class=\"css\"> body &#123;\n   font:12px/1.5 Microsoft YaHei；\n &#125;\n</code></pre>\n<ul>\n<li>行高可以跟单位也可以不跟单位</li>\n<li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li>\n<li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li>\n<li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li>\n</ul>\n<h3 id=\"3、优先级\"><a href=\"#3、优先级\" class=\"headerlink\" title=\"3、优先级\"></a>3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p>\n<ul>\n<li>选择器相同，则执行层叠性</li>\n<li>选择器不同，则根据选择器权重执行</li>\n</ul>\n<p>选择器优先级计算表格：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571490129794.png\" class width=\"1571490129794\">\n\n\n\n<p>优先级注意点:</p>\n<ol>\n<li><p>权重是有4组数字组成,但是不会有进位。</p>\n</li>\n<li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p>\n</li>\n<li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p>\n</li>\n<li><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p>\n</li>\n<li><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p>\n</li>\n</ol>\n<p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p>\n<ul>\n<li>div ul  li   ——&gt;      0,0,0,3</li>\n<li>.nav ul li   ——&gt;      0,0,1,2</li>\n<li>a:hover      —–—&gt;   0,0,1,1</li>\n<li>.nav a       ——&gt;      0,0,1,1</li>\n</ul>\n<h2 id=\"十、盒子模型\"><a href=\"#十、盒子模型\" class=\"headerlink\" title=\"十、盒子模型\"></a>十、盒子模型</h2><h3 id=\"1、网页布局的本质\"><a href=\"#1、网页布局的本质\" class=\"headerlink\" title=\"1、网页布局的本质\"></a>1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571492334739.png\" class width=\"1571492334739\">\n\n<p>网页布局过程：</p>\n<ol>\n<li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li>\n<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>\n<li>往盒子里面装内容</li>\n</ol>\n<h3 id=\"2、盒子模型（Box-Model）组成\"><a href=\"#2、盒子模型（Box-Model）组成\" class=\"headerlink\" title=\"2、盒子模型（Box Model）组成\"></a>2、盒子模型（Box Model）组成</h3><p>​        盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>\n<p>​        CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571492536942.png\" class width=\"1571492536942\">\n\n<h3 id=\"3、边框（border）\"><a href=\"#3、边框（border）\" class=\"headerlink\" title=\"3、边框（border）\"></a>3、边框（border）</h3><h4 id=\"3-1、边框的使用\"><a href=\"#3-1、边框的使用\" class=\"headerlink\" title=\"3.1、边框的使用\"></a>3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p>\n<p>2、语法：</p>\n<pre><code class=\"css\"> border : border-width || border-style || border-color;   \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571492659260.png\" class width=\"1571492659260\">\n\n<p>边框样式 border-style 可以设置如下值：</p>\n<ul>\n<li>none：没有边框即忽略所有边框的宽度（默认值）</li>\n<li>solid：边框为单实线(最为常用的)</li>\n<li>dashed：边框为虚线  </li>\n<li>dotted：边框为点线</li>\n</ul>\n<p>3、边框的合写分写</p>\n<p>边框简写：</p>\n<pre><code class=\"css\"> border: 1px solid red;  \n</code></pre>\n<p>边框分开写法：</p>\n<pre><code class=\"css\"> border-top: 1px solid red;  /* 只设定上边框， 其余同理 */   \n</code></pre>\n<h4 id=\"3-2、表格的细线边框\"><a href=\"#3-2、表格的细线边框\" class=\"headerlink\" title=\"3.2、表格的细线边框\"></a>3.2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>\n<p>2、语法：</p>\n<pre><code class=\"css\"> border-collapse:collapse; \n</code></pre>\n<p>collapse 单词是合并的意思</p>\n<p>border-collapse: collapse; 表示相邻边框合并在一起</p>\n<h4 id=\"3-3、边框会影响盒子实际大小\"><a href=\"#3-3、边框会影响盒子实际大小\" class=\"headerlink\" title=\"3.3、边框会影响盒子实际大小\"></a>3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p>\n<ul>\n<li>测量盒子大小的时候,不量边框。</li>\n<li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li>\n</ul>\n<h3 id=\"4、内边距（padding）\"><a href=\"#4、内边距（padding）\" class=\"headerlink\" title=\"4、内边距（padding）\"></a>4、内边距（padding）</h3><h4 id=\"4-1、内边距的使用方式\"><a href=\"#4-1、内边距的使用方式\" class=\"headerlink\" title=\"4.1、内边距的使用方式\"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p>\n<p>2、语法：</p>\n<p>合写属性：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571493298248.png\" class width=\"1571493298248\">\n\n<p>分写属性：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571493260536.png\" class width=\"1571493260536\">\n\n<h4 id=\"4-2、内边距会影响盒子实际大小\"><a href=\"#4-2、内边距会影响盒子实际大小\" class=\"headerlink\" title=\"4.2、内边距会影响盒子实际大小\"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>\n<ol>\n<li>内容和边框有了距离，添加了内边距。</li>\n<li>padding影响了盒子实际大小。</li>\n</ol>\n<p>2、内边距对盒子大小的影响：</p>\n<ul>\n<li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li>\n<li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li>\n</ul>\n<p>3、解决方案：</p>\n<p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p>\n<h3 id=\"5、外边距（margin）\"><a href=\"#5、外边距（margin）\" class=\"headerlink\" title=\"5、外边距（margin）\"></a>5、外边距（margin）</h3><h4 id=\"5-1、外边距的使用方式\"><a href=\"#5-1、外边距的使用方式\" class=\"headerlink\" title=\"5.1、外边距的使用方式\"></a>5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571493741272.png\" class width=\"1571493741272\">\n\n<h4 id=\"5-2、外边距典型应用\"><a href=\"#5-2、外边距典型应用\" class=\"headerlink\" title=\"5.2、外边距典型应用\"></a>5.2、外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p>\n<ul>\n<li>盒子必须指定了宽度（width）。</li>\n<li>盒子左右的外边距都设置为 auto 。</li>\n</ul>\n<p>常见的写法，以下三种都可以：</p>\n<pre><code class=\"css\">margin-left: auto;   margin-right: auto;\nmargin: auto;\nmargin: 0 auto;\n</code></pre>\n<p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>\n<h4 id=\"5-3、外边距合并\"><a href=\"#5-3、外边距合并\" class=\"headerlink\" title=\"5.3、外边距合并\"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>\n<p>主要有两种情况:</p>\n<p>1、相邻块元素垂直外边距的合并</p>\n<p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571494239103.png\" class width=\"1571494239103\">\n\n<p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p>\n<p>2、嵌套块元素垂直外边距的塌陷</p>\n<p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571494373778.png\" class width=\"1571494373778\">\n\n<p>解决方案：</p>\n<ul>\n<li>可以为父元素定义上边框。</li>\n<li>可以为父元素定义上内边距。</li>\n<li>可以为父元素添加 overflow:hidden。</li>\n</ul>\n<h4 id=\"5-4、清除内外边距\"><a href=\"#5-4、清除内外边距\" class=\"headerlink\" title=\"5.4、清除内外边距\"></a>5.4、清除内外边距</h4><p>​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p>\n<pre><code class=\"css\"> * &#123;\n    padding:0;   /* 清除内边距 */\n    margin:0;    /* 清除外边距 */\n  &#125;\n</code></pre>\n<p>​        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>\n<h2 id=\"十一、css的其他样式\"><a href=\"#十一、css的其他样式\" class=\"headerlink\" title=\"十一、css的其他样式\"></a>十一、css的其他样式</h2><h3 id=\"1、圆角边框\"><a href=\"#1、圆角边框\" class=\"headerlink\" title=\"1、圆角边框\"></a>1、圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>\n<p>border-radius 属性用于设置元素的外边框圆角。</p>\n<p>语法：</p>\n<pre><code class=\"css\"> border-radius:length;    \n</code></pre>\n<ul>\n<li>参数值可以为数值或百分比的形式</li>\n<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>\n<li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li>\n<li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li>\n<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li>\n</ul>\n<h3 id=\"2、盒子阴影\"><a href=\"#2、盒子阴影\" class=\"headerlink\" title=\"2、盒子阴影\"></a>2、盒子阴影</h3><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。<br>语法：</p>\n<pre><code class=\"css\"> box-shadow: h-shadow v-shadow blur spread color inset; \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571541874805.png\" class width=\"1571541874805\">\n\n<h3 id=\"3、文字阴影\"><a href=\"#3、文字阴影\" class=\"headerlink\" title=\"3、文字阴影\"></a>3、文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p>\n<pre><code class=\"css\"> text-shadow: h-shadow v-shadow blur color;\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571541954222.png\" class width=\"1571541954222\">\n\n<h2 id=\"十二、浮动\"><a href=\"#十二、浮动\" class=\"headerlink\" title=\"十二、浮动\"></a>十二、浮动</h2><h3 id=\"1、传统网页布局的三种方式\"><a href=\"#1、传统网页布局的三种方式\" class=\"headerlink\" title=\"1、传统网页布局的三种方式\"></a>1、传统网页布局的三种方式</h3><p>​    CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>\n<ul>\n<li><p>普通流（标准流）</p>\n</li>\n<li><p>浮动</p>\n</li>\n<li><p>定位</p>\n<p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>\n</li>\n</ul>\n<p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>\n<h3 id=\"2、标准流（普通流-文档流）\"><a href=\"#2、标准流（普通流-文档流）\" class=\"headerlink\" title=\"2、标准流（普通流/文档流）\"></a>2、标准流（普通流/文档流）</h3><p>所谓的标准流:  就是标签按照规定好默认方式排列</p>\n<ol>\n<li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>\n<li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 </li>\n</ol>\n<p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>\n<h3 id=\"3、为什么需要浮动？\"><a href=\"#3、为什么需要浮动？\" class=\"headerlink\" title=\"3、为什么需要浮动？\"></a>3、为什么需要浮动？</h3><p>​        总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>\n<p>​        浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>\n<p>​        网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p>\n<h3 id=\"4、什么是浮动？\"><a href=\"#4、什么是浮动？\" class=\"headerlink\" title=\"4、什么是浮动？\"></a>4、什么是浮动？</h3><p>​        float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>\n<p>语法：</p>\n<pre><code class=\"css\"> 选择器 &#123; float: 属性值; &#125;\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571543209934.png\" class width=\"1571543209934\">\n\n\n\n<h3 id=\"5、浮动特性\"><a href=\"#5、浮动特性\" class=\"headerlink\" title=\"5、浮动特性\"></a>5、浮动特性</h3><p>加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>\n<p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571544664994.png\" class width=\"1571544664994\">\n\n<p>2、浮动的元素会一行内显示并且元素顶部对齐</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571544725757.png\" class width=\"1571544725757\">\n\n<p>注意： </p>\n<p>​        浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p>\n<p>3、浮动的元素会具有行内块元素的特性</p>\n<p>​        浮动元素的大小根据内容来决定</p>\n<p>​        浮动的盒子中间是没有缝隙的</p>\n<h3 id=\"6、浮动元素经常和标准流父级搭配使用\"><a href=\"#6、浮动元素经常和标准流父级搭配使用\" class=\"headerlink\" title=\"6、浮动元素经常和标准流父级搭配使用\"></a>6、浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>\n<p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571544991989.png\" class width=\"1571544991989\">\n\n<h2 id=\"十三、常见网页布局\"><a href=\"#十三、常见网页布局\" class=\"headerlink\" title=\"十三、常见网页布局\"></a>十三、常见网页布局</h2><h3 id=\"浮动布局注意点\"><a href=\"#浮动布局注意点\" class=\"headerlink\" title=\"浮动布局注意点\"></a>浮动布局注意点</h3><p>1、浮动和标准流的父盒子搭配。</p>\n<p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p>\n<p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>\n<p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p>\n<p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</p>\n<h2 id=\"十四、清除浮动\"><a href=\"#十四、清除浮动\" class=\"headerlink\" title=\"十四、清除浮动\"></a>十四、清除浮动</h2><h3 id=\"1、为什么需要清除浮动？\"><a href=\"#1、为什么需要清除浮动？\" class=\"headerlink\" title=\"1、为什么需要清除浮动？\"></a>1、为什么需要清除浮动？</h3><p>​        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571555883628.png\" class width=\"1571555883628\">\n\n<h3 id=\"2、清除浮动本质\"><a href=\"#2、清除浮动本质\" class=\"headerlink\" title=\"2、清除浮动本质\"></a>2、清除浮动本质</h3><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p>\n<p>注意：</p>\n<ul>\n<li>如果父盒子本身有高度，则不需要清除浮动</li>\n<li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li>\n<li>父级有了高度，就不会影响下面的标准流了</li>\n</ul>\n<h3 id=\"3、清除浮动样式\"><a href=\"#3、清除浮动样式\" class=\"headerlink\" title=\"3、清除浮动样式\"></a>3、清除浮动样式</h3><p>语法：</p>\n<pre><code class=\"css\"> 选择器&#123;clear:属性值;&#125; \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571555980419.png\" class width=\"1571555980419\">\n\n<p>我们实际工作中， 几乎只用 clear: both;</p>\n<p>清除浮动的策略是:  闭合浮动. </p>\n<h3 id=\"4、清除浮动的多种方式\"><a href=\"#4、清除浮动的多种方式\" class=\"headerlink\" title=\"4、清除浮动的多种方式\"></a>4、清除浮动的多种方式</h3><h4 id=\"4-1、额外标签法\"><a href=\"#4-1、额外标签法\" class=\"headerlink\" title=\"4.1、额外标签法\"></a>4.1、额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>\n<p>使用方式：</p>\n<p>​        额外标签法会在浮动元素末尾添加一个空的标签。</p>\n<pre><code class=\"html\">例如 &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;，或者其他标签（如&lt;br /&gt;等）。\n</code></pre>\n<p>​        优点： 通俗易懂，书写方便</p>\n<p>​        缺点： 添加许多无意义的标签，结构化较差</p>\n<p>​        注意： 要求这个新的空标签必须是块级元素。</p>\n<p>总结:</p>\n<p>​    1、清除浮动本质是?</p>\n<p>​            清除浮动的本质是清除浮动元素脱离标准流造成的影响</p>\n<p>​    2、清除浮动策略是?</p>\n<p>​            闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</p>\n<p>​    3、额外标签法?</p>\n<p>​            隔墙法, 就是在最后一个浮动的子元素后面添</p>\n<p>​    4、加一个额外标签, 添加 清除浮动样式.</p>\n<p>​            实际工作可能会遇到,但是不常用</p>\n<h4 id=\"4-2、父级添加-overflow-属性\"><a href=\"#4-2、父级添加-overflow-属性\" class=\"headerlink\" title=\"4.2、父级添加 overflow 属性\"></a>4.2、父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p>\n<p>例如：</p>\n<pre><code class=\"css\">overflow:hidden | auto | scroll;\n</code></pre>\n<p>优点：代码简洁</p>\n<p>缺点：无法显示溢出的部分</p>\n<p>注意：是给父元素添加代码</p>\n<h4 id=\"4-3、父级添加after伪元素\"><a href=\"#4-3、父级添加after伪元素\" class=\"headerlink\" title=\"4.3、父级添加after伪元素\"></a>4.3、父级添加after伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p>\n<pre><code class=\"css\"> .clearfix:after &#123;  \n   content: &quot;&quot;; \n   display: block; \n   height: 0; \n   clear: both; \n   visibility: hidden;  \n &#125; \n .clearfix &#123;  /* IE6、7 专有 */ \n   *zoom: 1;\n &#125;   \n</code></pre>\n<p>优点：没有增加标签，结构更简单</p>\n<p>缺点：照顾低版本浏览器</p>\n<p>代表网站： 百度、淘宝网、网易等</p>\n<h4 id=\"4-4、父级添加双伪元素\"><a href=\"#4-4、父级添加双伪元素\" class=\"headerlink\" title=\"4.4、父级添加双伪元素\"></a>4.4、父级添加双伪元素</h4><p>给父元素添加</p>\n<pre><code class=\"css\"> .clearfix:before,.clearfix:after &#123;   content:&quot;&quot;;   display:table;  &#125; .clearfix:after &#123;   clear:both; &#125; .clearfix &#123;    *zoom:1; &#125;   \n</code></pre>\n<p>优点：代码更简洁</p>\n<p>缺点：照顾低版本浏览器</p>\n<p>代表网站：小米、腾讯等</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为什么需要清除浮动？</p>\n<ol>\n<li>父级没高度。</li>\n<li>子盒子浮动了。</li>\n<li>影响下面布局了，我们就应该清除浮动了。</li>\n</ol>\n<p>![1571556500074](../../../../../Personal Files/leetcode/资料/阶段一：前端开发基础资料/02-CSS资料/06-前端基础CSS第四天（14-16小节）/笔记/images/1571556500074.png)</p>\n<h2 id=\"十五、PS-切图\"><a href=\"#十五、PS-切图\" class=\"headerlink\" title=\"十五、PS 切图\"></a>十五、PS 切图</h2><h3 id=\"1、图层切图\"><a href=\"#1、图层切图\" class=\"headerlink\" title=\"1、图层切图\"></a>1、图层切图</h3><pre><code class=\"html\">最简单的切图方式：右击图层 → 导出 → 切片。\n</code></pre>\n<h3 id=\"2、切片切图\"><a href=\"#2、切片切图\" class=\"headerlink\" title=\"2、切片切图\"></a>2、切片切图</h3><p>2.1、利用切片选中图片</p>\n<pre><code> 利用切片工具手动划出\n</code></pre>\n<p>2.2、导出选中的图片</p>\n<pre><code class=\"html\">文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。\n</code></pre>\n<h3 id=\"3、PS插件切图\"><a href=\"#3、PS插件切图\" class=\"headerlink\" title=\"3、PS插件切图\"></a>3、PS插件切图</h3><p>​        Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</p>\n<p>官网：<a href=\"http://www.cutterman.cn/zh/cutterman\">http://www.cutterman.cn/zh/cutterman</a></p>\n<p>注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。</p>\n<h2 id=\"1-PS-切图\"><a href=\"#1-PS-切图\" class=\"headerlink\" title=\"1. PS 切图\"></a>1. PS 切图</h2><h3 id=\"1-1-常见的图片格式\"><a href=\"#1-1-常见的图片格式\" class=\"headerlink\" title=\"1.1. 常见的图片格式\"></a>1.1. 常见的图片格式</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>格式</th>\n<th>特点和常用的用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>jpg</td>\n<td>JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们<strong>产品类的图片</strong> 经常用jpg格式的</td>\n</tr>\n<tr>\n<td>2</td>\n<td>gif</td>\n<td>GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 <strong>经常用于一些图片小动画效果</strong></td>\n</tr>\n<tr>\n<td>3</td>\n<td>png</td>\n<td>png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 <strong>背景透明的图片</strong> ,请选择png格式.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>psd</td>\n<td>PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. <strong>对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离</strong>.</td>\n</tr>\n</tbody></table>\n<p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 </p>\n<h3 id=\"1-2-图层切图\"><a href=\"#1-2-图层切图\" class=\"headerlink\" title=\"1.2. 图层切图\"></a>1.2. 图层切图</h3><p>简单版步骤：</p>\n<p>​    ① 使用<strong>移动工具</strong>，点击需要的图片</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571299959992.png\" class width=\"1571299959992\">\n\n<p>​    ② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571300150618.png\" class width=\"1571300150618\">\n\n\n\n<p>但是很多情况下,我们需要合并图层再导出:</p>\n<p>步骤：</p>\n<p>​    ① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  </p>\n<p>​    ② 图层菜单 → 合并图层(ctrl+e)   </p>\n<p>​    <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571300529539.png\" class width=\"1571300529539\"></p>\n<p>​    ③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG</p>\n<h3 id=\"1-3-切片切图\"><a href=\"#1-3-切片切图\" class=\"headerlink\" title=\"1.3. 切片切图\"></a>1.3. 切片切图</h3><p>步骤：</p>\n<p>​    ① 利用切片选中图片 ：利用切片工具手动划出</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571301270696.png\" class width=\"1571301270696\"> \n\n<p>​    ② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。</p>\n<p>​    注意：保存的时候，要选“选中的切片”：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571301357818.png\" class width=\"1571301357818\"> \n\n<h3 id=\"1-4-插件切图\"><a href=\"#1-4-插件切图\" class=\"headerlink\" title=\"1.4. 插件切图\"></a>1.4. 插件切图</h3><h4 id=\"1-4-1-介绍\"><a href=\"#1-4-1-介绍\" class=\"headerlink\" title=\"1.4.1. 介绍\"></a>1.4.1. 介绍</h4><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 </p>\n<p>它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>\n<h4 id=\"1-4-2-安装\"><a href=\"#1-4-2-安装\" class=\"headerlink\" title=\"1.4.2. 安装\"></a>1.4.2. 安装</h4><p>注意： <strong>cutterman插件要求你的ps 必须是完整版</strong>，不能是绿色版，所以大家需要从新安装完整版本。</p>\n<p>查看 “窗口菜单”里面的“扩展功能”：</p>\n<p>​    ① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS</p>\n<p>​    ② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571302032310.png\" class width=\"1571302032310\">\n\n\n\n\n\n<p>官网: <a href=\"http://www.cutterman.cn/zh/cutterman\">http://www.cutterman.cn/zh/cutterman</a></p>\n<p>当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571302286467.png\" class width=\"1571302286467\">\n\n\n\n<p>1.4.3 使用步骤</p>\n<p>​    ① 选择需要的图层</p>\n<p>​    ② 选择web端，点击web下面的下拉三角</p>\n<p>​    ③ 选择需要的图片格式</p>\n<p>​    ④ 设置好存储路径</p>\n<p>​    ⑤ 点击 “导出选中图层” 按钮</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571303715362.png\" class width=\"1571303715362\"> \n\n<p>示意图：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/sample1.gif\"> \n\n\n\n\n\n<h2 id=\"十六-CSS属性书写顺序（重点）\"><a href=\"#十六-CSS属性书写顺序（重点）\" class=\"headerlink\" title=\"十六. CSS属性书写顺序（重点）\"></a>十六. CSS属性书写顺序（重点）</h2><p><strong>生活中衡量一个人有气质：</strong></p>\n<p>​    穿着打扮  举止言行  等等  </p>\n<p><strong>编程中如何衡量一个人的代码能力</strong>：</p>\n<p>​    规范标准  优雅高质量 等等   一个词形容   专业    从代码中看出是否有经验..</p>\n<p>建议遵循以下顺序：</p>\n<ol>\n<li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>\n<li><strong>自身属性</strong>：width / height / margin / padding / border / background</li>\n<li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>\n<li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>\n</ol>\n<p><strong>举例：</strong></p>\n<pre><code class=\"css\"> .jdc &#123;\n    display: block;\n    position: relative;\n    float: left;\n    width: 100px;\n    height: 100px;\n    margin: 0 10px;\n    padding: 20px 0;\n    font-family: Arial, &#39;Helvetica Neue&#39;, Helvetica, sans-serif;\n    color: #333;\n    background: rgba(0,0,0,.5);\n    border-radius: 10px;\n &#125; \n</code></pre>\n<h2 id=\"十七-学成在线页面制作\"><a href=\"#十七-学成在线页面制作\" class=\"headerlink\" title=\"十七. 学成在线页面制作\"></a>十七. 学成在线页面制作</h2><p>页面展示：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571304358699.png\" class width=\"1571304358699\">\n\n\n\n<p>学成在线，是典型的企业级网站。</p>\n<p>学习学成网的目的，是为了整体感知企业级网站布局流程，带着大家复习以前的知识。</p>\n<h3 id=\"1-前期准备素材\"><a href=\"#1-前期准备素材\" class=\"headerlink\" title=\"1.  前期准备素材\"></a>1.  前期准备素材</h3><ul>\n<li>学成在线PSD源文件</li>\n<li>开发工具  =  PS（切图） +  sublime（代码） + chrome（测试）</li>\n</ul>\n<h3 id=\"2-前期准备工作\"><a href=\"#2-前期准备工作\" class=\"headerlink\" title=\"2.  前期准备工作\"></a>2.  前期准备工作</h3><p>先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。</p>\n<ol>\n<li><p>创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。</p>\n</li>\n<li><p>用vscode打开study目录文件夹.</p>\n</li>\n<li><p>study 目录内新建 images 文件夹，用于保存图片。</p>\n</li>\n<li><p>新建首页文件 index.html（以后我们的网站<strong>首页</strong>统一命名规定为 <strong>index.html</strong> )。</p>\n</li>\n<li><p>新建 style.css 样式文件。我们本次采用外链样式表。</p>\n</li>\n<li><p>将样式引入到我们的 HTML 页面文件中。</p>\n</li>\n<li><p>样式表写入清除内外边距的样式，来检测样式表是否引入成功。</p>\n</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571305757590.png\" class width=\"1571305757590\"> \n\n<h3 id=\"3-页面布局整体思路\"><a href=\"#3-页面布局整体思路\" class=\"headerlink\" title=\"3. 页面布局整体思路\"></a>3. 页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：</p>\n<p>​    1.必须确定页面的<strong>版心</strong>（可视区），我们<strong>测量</strong>可得知。</p>\n<p>​    2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</p>\n<p>​    3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则</p>\n<p>​    4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.</p>\n<p>​    5.所以, 先理清楚<strong>布局结构</strong>,再写代码尤为重要. 这需要我们多写多积累.</p>\n<h3 id=\"4-页面制作\"><a href=\"#4-页面制作\" class=\"headerlink\" title=\"4. 页面制作\"></a>4. 页面制作</h3><p><strong>确定版心</strong>：</p>\n<p>​    这个页面的版心是 1200像素  ，每个版心都要水平居中对齐，所以，我们可以定义版心为公共类：</p>\n<pre><code class=\"css\">.w &#123;\n    width: 1200px;\n    margin: auto;\n&#125;\n</code></pre>\n<h4 id=\"4-1-header头部制作\"><a href=\"#4-1-header头部制作\" class=\"headerlink\" title=\"4.1. header头部制作\"></a>4.1. header头部制作</h4><p><strong>结构图如下：</strong></p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1.png\">\n\n<ul>\n<li>1号是版心盒子 <strong>header</strong>  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。</li>\n<li>版心盒子 里面包含 2号盒子 <strong>logo</strong> 图标</li>\n<li>版心盒子 里面包含 3号盒子 <strong>nav</strong> 导航栏</li>\n<li>版心盒子 里面包含 4号盒子 <strong>search</strong> 搜索框</li>\n<li>版心盒子 里面包含 5号盒子 <strong>user</strong> 个人信息</li>\n<li>注意，要求里面的 <strong>4个子盒子 必须都浮动</strong></li>\n</ul>\n<p><strong>导航栏注意点:</strong></p>\n<p>实际开发中，<strong>重要的导航栏</strong>，我们不会直接用链接a ，而是<strong>用 li  包含链接(li+a)的做法</strong></p>\n<p>​    1.li+a 语义更清晰，一看这就是有条理的列表型内容。</p>\n<p>​    2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</p>\n<p><strong>注意:</strong> </p>\n<p>​    1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</p>\n<p>​    2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字</p>\n<p>​    3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 </p>\n<p><strong>4号盒子search的细节：</strong></p>\n<p>​    search 搜索框的意思:  一个 search 大盒子里面包含 2个 表单</p>\n<p>​    技巧：input和button都，属于行内块元素，会有缝隙，使用浮动，可以去缝隙。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571307430101.png\" class width=\"1571307430101\">\n\n<h4 id=\"4-2-banner制作\"><a href=\"#4-2-banner制作\" class=\"headerlink\" title=\"4.2. banner制作\"></a>4.2. banner制作</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571314623135.png\" class width=\"1571314623135\">\n\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/2.png\">\n\n\n\n<ul>\n<li>1号盒子是通栏的大盒子<strong>banner</strong>， 不给宽度，给高度，给一个蓝色背景。</li>\n<li>2号盒子是版心 <strong>w</strong>， 要水平居中对齐。</li>\n<li>3号盒子版心内，左对齐 <strong>subnav</strong> 侧导航栏。</li>\n<li>4号盒子版心内，右对齐  <strong>course</strong> 课程。</li>\n</ul>\n<h5 id=\"4-2-1-subnav-侧导航栏-左侧的\"><a href=\"#4-2-1-subnav-侧导航栏-左侧的\" class=\"headerlink\" title=\"4.2.1  subnav 侧导航栏 (左侧的)\"></a>4.2.1  subnav 侧导航栏 (左侧的)</h5><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571314874385.png\" class width=\"1571314874385\">   \n\n<ul>\n<li>subnav 盒子 背景色 黑色半透明</li>\n<li>重要的导航栏，li 包 a ，行高45px</li>\n<li>a里面包含文字和span，span右浮动</li>\n<li>当鼠标经过a ，a里面的内容（文字和span）变蓝色</li>\n</ul>\n<h5 id=\"4-2-2-course课程表模块-右侧的\"><a href=\"#4-2-2-course课程表模块-右侧的\" class=\"headerlink\" title=\"4.2.2  course课程表模块 (右侧的)\"></a>4.2.2  course课程表模块 (右侧的)</h5><p>结构图如下：</p>\n <img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/6.png\">\n\n<ul>\n<li>1号盒子 是  228 * 300 的盒子 右浮动  <strong>注意 浮动的元素 不会有外边距塌陷的问题</strong></li>\n<li>1号盒子内 分为 上下 两个 子盒子</li>\n<li>2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)</li>\n<li>3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)</li>\n</ul>\n<h4 id=\"4-3-精品推荐小模块\"><a href=\"#4-3-精品推荐小模块\" class=\"headerlink\" title=\"4.3. 精品推荐小模块\"></a>4.3. 精品推荐小模块</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/3.png\">\n\n<ul>\n<li><p><strong>复习点：</strong>  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color</p>\n</li>\n<li><p>大盒子水平居中 goods  精品 ，注意此处有个盒子阴影</p>\n</li>\n<li><p>1号盒子是标题 H3  左侧浮动</p>\n</li>\n<li><p>2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）</p>\n</li>\n<li><p>3号盒子 右浮动 mod 修改</p>\n</li>\n</ul>\n<h4 id=\"4-4-精品推荐大模块\"><a href=\"#4-4-精品推荐大模块\" class=\"headerlink\" title=\"4.4. 精品推荐大模块\"></a>4.4. 精品推荐大模块</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/4.png\">\n\n<ul>\n<li>1号盒子为最大的盒子 <strong>box</strong>  版心水平居中对齐</li>\n<li>2号盒子为上面部分 <strong>box-hd</strong>  – 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动</li>\n<li>3号盒子为底下部分 <strong>box-bd</strong> — 里面是无序列表 有 10个 小li 组成</li>\n<li>小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了</li>\n<li>复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。</li>\n</ul>\n<h4 id=\"4-5-底部模块制作\"><a href=\"#4-5-底部模块制作\" class=\"headerlink\" title=\"4.5.  底部模块制作\"></a>4.5.  底部模块制作</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/5.png\">\n\n<ul>\n<li><p>1号盒子通栏大盒子 底部 <strong>footer</strong>  给高度  底色是白色</p>\n</li>\n<li><p>2号盒子版心水平居中</p>\n</li>\n<li><p>3号盒子版权 <strong>copyright</strong>  左对齐 </p>\n</li>\n<li><p>4号盒子 链接组 <strong>links</strong>  右对齐</p>\n</li>\n</ul>\n<h2 id=\"十八-定位-position-介绍\"><a href=\"#十八-定位-position-介绍\" class=\"headerlink\" title=\"十八. 定位(position) 介绍\"></a>十八. 定位(position) 介绍</h2><h3 id=\"1-1-为什么使用定位\"><a href=\"#1-1-为什么使用定位\" class=\"headerlink\" title=\"1.1 为什么使用定位\"></a>1.1 为什么使用定位</h3><blockquote>\n<p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p>\n</blockquote>\n<p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/01_定位示例1.gif\">\n\n\n\n<p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/ding.png\">\n\n\n\n<blockquote>\n<p>结论<strong>：要实现以上效果，</strong>标准流 或 浮动都无法快速实现</p>\n</blockquote>\n<p>所以：</p>\n<p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p>\n<p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p>\n<h3 id=\"1-2-定位组成\"><a href=\"#1-2-定位组成\" class=\"headerlink\" title=\"1.2 定位组成\"></a>1.2 定位组成</h3><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p>\n<p>定位也是用来布局的，它有两部分组成：</p>\n<blockquote>\n<p><strong>定位 = 定位模式 + 边偏移</strong>  </p>\n</blockquote>\n<p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p>\n<h4 id=\"1-2-1-边偏移（方位名词）\"><a href=\"#1-2-1-边偏移（方位名词）\" class=\"headerlink\" title=\"1.2.1 边偏移（方位名词）\"></a>1.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p>\n<table>\n<thead>\n<tr>\n<th>边偏移属性</th>\n<th align=\"left\">示例</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>top</code></td>\n<td align=\"left\"><code>top: 80px</code></td>\n<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td align=\"left\"><code>bottom: 80px</code></td>\n<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td align=\"left\"><code>left: 80px</code></td>\n<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td align=\"left\"><code>right: 80px</code></td>\n<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>\n</tr>\n</tbody></table>\n<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>\n<h4 id=\"1-2-2-定位模式-position\"><a href=\"#1-2-2-定位模式-position\" class=\"headerlink\" title=\"1.2.2 定位模式 (position)\"></a>1.2.2 定位模式 (position)</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>\n<pre><code class=\"css\">选择器 &#123; \n    position: 属性值; \n&#125;\n</code></pre>\n<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>\n<p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th align=\"center\">语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static</code></td>\n<td align=\"center\"><strong>静态</strong>定位</td>\n</tr>\n<tr>\n<td><code>relative</code></td>\n<td align=\"center\"><strong>相对</strong>定位</td>\n</tr>\n<tr>\n<td><code>absolute</code></td>\n<td align=\"center\"><strong>绝对</strong>定位</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td align=\"center\"><strong>固定</strong>定位</td>\n</tr>\n</tbody></table>\n <img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/26定位的概念.png\">\n\n<h3 id=\"1-3-定位模式介绍\"><a href=\"#1-3-定位模式介绍\" class=\"headerlink\" title=\"1.3 定位模式介绍\"></a>1.3 定位模式介绍</h3><h4 id=\"1-3-1-静态定位-static-了解\"><a href=\"#1-3-1-静态定位-static-了解\" class=\"headerlink\" title=\"1.3.1.  静态定位(static) - 了解\"></a>1.3.1.  静态定位(static) - 了解</h4><ul>\n<li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p>\n</li>\n<li><p>语法：</p>\n<pre><code>选择器 &#123; \n    position: static; \n&#125;\n</code></pre>\n</li>\n<li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p>\n</li>\n<li><p>静态定位在布局时我们几乎不用的 </p>\n</li>\n</ul>\n<h4 id=\"1-3-2-相对定位-relative-重要\"><a href=\"#1-3-2-相对定位-relative-重要\" class=\"headerlink\" title=\"1.3.2. 相对定位(relative) - 重要\"></a>1.3.2. 相对定位(relative) - 重要</h4><ul>\n<li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li>\n<li>语法：</li>\n</ul>\n<pre><code>选择器 &#123; \n    position: relative; \n&#125;\n</code></pre>\n<ul>\n<li><p>相对定位的特点：（务必记住）</p>\n<ul>\n<li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p>\n</li>\n<li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p>\n<p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p>\n</li>\n</ul>\n</li>\n<li><p>效果图：</p>\n</li>\n</ul>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png\" class title=\"相对定位案例\">\n\n\n\n<h4 id=\"1-3-3-绝对定位-absolute-重要\"><a href=\"#1-3-3-绝对定位-absolute-重要\" class=\"headerlink\" title=\"1.3.3. 绝对定位(absolute) - 重要\"></a>1.3.3. 绝对定位(absolute) - 重要</h4><h5 id=\"1-3-3-1-绝对定位的介绍\"><a href=\"#1-3-3-1-绝对定位的介绍\" class=\"headerlink\" title=\"1.3.3.1 绝对定位的介绍\"></a>1.3.3.1 绝对定位的介绍</h5><ul>\n<li><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p>\n</li>\n<li><p>语法：</p>\n<pre><code> 选择器 &#123; \n     position: absolute; \n &#125;\n</code></pre>\n</li>\n</ul>\n<ol>\n<li><p><strong>完全脱标</strong> —— 完全不占位置；  </p>\n</li>\n<li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/05_绝对定位_父级无定位.png\" width=\"600\"></li>\n<li><p><strong>父元素要有定位</strong></p>\n<ul>\n<li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li>\n</ul>\n</li>\n</ol>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/06_绝对定位_父级有定位.png\" width=\"600\">\n\n\n\n\n\n<ul>\n<li><p><strong>绝对定位的特点总结</strong>：（务必记住）</p>\n<p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p>\n<p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p>\n<p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p>\n</li>\n</ul>\n<h5 id=\"1-3-3-2-定位口诀-——-子绝父相\"><a href=\"#1-3-3-2-定位口诀-——-子绝父相\" class=\"headerlink\" title=\"1.3.3.2 定位口诀 —— 子绝父相\"></a>1.3.3.2 定位口诀 —— 子绝父相</h5><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>\n<p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>\n<p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p>\n<p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>\n<p>②父盒子需要加定位限制子盒子在父盒子内显示。</p>\n<p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p>\n<p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p>\n<p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p>\n<p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p>\n<p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p>\n<p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png\" class title=\"子绝父相截图\">\n\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/27子绝父相.png\">\n\n<p><strong>分析</strong>：</p>\n<ol>\n<li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li>\n<li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul>\n<li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li>\n</ul>\n</li>\n</ol>\n<p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p>\n<h4 id=\"1-3-4-固定定位-fixed-重要\"><a href=\"#1-3-4-固定定位-fixed-重要\" class=\"headerlink\" title=\"1.3.4. 固定定位(fixed) - 重要\"></a>1.3.4. 固定定位(fixed) - 重要</h4><ul>\n<li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p>\n</li>\n<li><p>语法：</p>\n<pre><code> 选择器 &#123; \n     position: fixed; \n &#125;\n</code></pre>\n</li>\n<li><p>固定定位的特点：（务必记住）：</p>\n<p>1.以浏览器的可视窗口为参照点移动元素。</p>\n<ul>\n<li>跟父元素没有任何关系</li>\n<li>不随滚动条滚动。</li>\n</ul>\n<p>2.固定定位<strong>不在占有原先的位置</strong>。</p>\n</li>\n<li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p>\n<ul>\n<li><strong>完全脱标</strong>—— 完全不占位置；</li>\n<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>\n<li>跟父元素没有任何关系；单独使用的</li>\n<li>不随滚动条滚动。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>固定定位举例：</p>\n</blockquote>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/08_%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png\" class title=\"固定定位案例\">\n\n<p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p>\n<h4 id=\"1-3-5-粘性定位-sticky-了解\"><a href=\"#1-3-5-粘性定位-sticky-了解\" class=\"headerlink\" title=\"1.3.5 粘性定位(sticky) - 了解\"></a>1.3.5 粘性定位(sticky) - 了解</h4><ul>\n<li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p>\n</li>\n<li><p>语法：</p>\n<pre><code> 选择器 &#123; \n     position: sticky; \n     top: 10px; \n &#125;\n</code></pre>\n</li>\n<li><p>粘性定位的特点：</p>\n<p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p>\n<p>2.粘性定位占有原先的位置（相对定位特点）</p>\n<p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>\n<p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>\n</li>\n</ul>\n<h4 id=\"1-3-6-定位总结\"><a href=\"#1-3-6-定位总结\" class=\"headerlink\" title=\"1.3.6 定位总结\"></a>1.3.6 定位总结</h4><table>\n<thead>\n<tr>\n<th><strong>定位模式</strong></th>\n<th><strong>是否脱标</strong></th>\n<th><strong>移动位置</strong></th>\n<th><strong>是否常用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static   静态定位</td>\n<td>否</td>\n<td>不能使用边偏移</td>\n<td>很少</td>\n</tr>\n<tr>\n<td><strong>relative 相对定位</strong></td>\n<td><strong>否 (占有位置)</strong></td>\n<td><strong>相对于自身位置移动</strong></td>\n<td><strong>基本单独使用</strong></td>\n</tr>\n<tr>\n<td><strong>absolute绝对定位</strong></td>\n<td><strong>是（不占有位置）</strong></td>\n<td><strong>带有定位的父级</strong></td>\n<td><strong>要和定位父级元素搭配使用</strong></td>\n</tr>\n<tr>\n<td><strong>fixed 固定定位</strong></td>\n<td><strong>是（不占有位置）</strong></td>\n<td><strong>浏览器可视区</strong></td>\n<td><strong>单独使用，不需要父级</strong></td>\n</tr>\n<tr>\n<td>sticky 粘性定位</td>\n<td>否   (占有位置)</td>\n<td>浏览器可视区</td>\n<td>当前阶段少</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p>\n</li>\n<li><p>学习定位重点学会子绝父相。</p>\n</li>\n<li><p>注意：</p>\n</li>\n</ul>\n<ol>\n<li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li>\n<li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li>\n<li><code>left</code> 和 <code>right</code> 不要同时使用。</li>\n</ol>\n<h2 id=\"2-综合案例：学成在线-hot-模块添加\"><a href=\"#2-综合案例：学成在线-hot-模块添加\" class=\"headerlink\" title=\"2. 综合案例：学成在线-hot  模块添加\"></a>2. 综合案例：学成在线-hot  模块添加</h2><h3 id=\"2-1-案例截图：\"><a href=\"#2-1-案例截图：\" class=\"headerlink\" title=\"2. 1 案例截图：\"></a><strong>2. 1 案例截图</strong>：</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571385860679.png\" class width=\"1571385860679\"> \n\n<h3 id=\"2-2-案例分析\"><a href=\"#2-2-案例分析\" class=\"headerlink\" title=\"2.2 案例分析\"></a>2.2 案例分析</h3><ol>\n<li>一个大的 <code>li</code> 中包含 一个课程图片，课程介绍文字信息，还有hot的小图标；</li>\n<li>hot图片<strong>重叠</strong>在课程图片上面—— 脱标，不占位置，需要使用<strong>绝对定位</strong>；</li>\n<li>hot图片<strong>重叠</strong>在<strong>li的右上方 —— 需要</strong>使用边偏移确定准确位置。</li>\n</ol>\n<h3 id=\"2-3-案例小结\"><a href=\"#2-3-案例小结\" class=\"headerlink\" title=\"2.3 案例小结\"></a>2.3 案例小结</h3><ol>\n<li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>，<strong>父元素</strong>使用<strong>相对定位</strong>；</li>\n<li><strong>与浮动的对比</strong>：<ul>\n<li><strong>绝对定位</strong>：脱标，<strong>利用边偏移指定准确位置</strong>；</li>\n<li><strong>浮动</strong>：脱标，不能指定准确位置，<strong>让多个块级元素在一行显示</strong>。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>课堂练习：模拟老师的随堂案例完成<strong>哈根达斯</strong>案例（5 分钟）。</p>\n</blockquote>\n<p>结构修改：</p>\n<pre><code class=\"html\">&lt;!-- 修改.box-bd里面的li标签内容，添加一个hot图标 --&gt;\n\n&lt;li&gt;\n     &lt;!-- 添加hot小图片 --&gt;\n    &lt;em&gt;\n        &lt;img src=&quot;images/hot.png&quot; alt=&quot;&quot;&gt;\n    &lt;/em&gt;\n    &lt;img src=&quot;images/pic.png&quot; alt=&quot;&quot;&gt;\n    &lt;h4&gt;\n        Think PHP 5.0 博客系统实战项目演练\n    &lt;/h4&gt;\n    &lt;div class=&quot;info&quot;&gt;\n        &lt;span&gt;高级&lt;/span&gt; • 1125人在学习\n    &lt;/div&gt;\n&lt;/li&gt;\n</code></pre>\n<p>样式修改：</p>\n<pre><code class=\"css\">.box-bd ul li &#123;\n    /* 子绝父相 */\n    /* 父元素相对定位 */\n    position: relative;\n    float: left;\n    width: 228px;\n    height: 270px;\n    background-color: #fff;\n    margin-right: 15px;\n    margin-bottom: 15px;\n   \n&#125;\n.box-bd ul li &gt; img &#123;\n    width: 100%;\n&#125;\n.box-bd ul li h4 &#123;\n    margin: 20px 20px 20px 25px;\n    font-size: 14px;\n    color: #050505;\n    font-weight: 400;\n&#125;\n.box-bd ul li em &#123;\n     /* 子元素绝对定位 */\n    position: absolute;\n    top: 4px;\n    right: -4px;\n&#125;\n</code></pre>\n<h2 id=\"3-定位-position-的应用\"><a href=\"#3-定位-position-的应用\" class=\"headerlink\" title=\"3. 定位(position)的应用\"></a>3. 定位(position)的应用</h2><h3 id=\"3-1-固定定位小技巧：-固定在版心左侧位置。\"><a href=\"#3-1-固定定位小技巧：-固定在版心左侧位置。\" class=\"headerlink\" title=\"3.1.  固定定位小技巧： 固定在版心左侧位置。\"></a>3.1.  固定定位小技巧： 固定在版心左侧位置。</h3><p>小算法：</p>\n<p>1.让固定定位的盒子 left: 50%.  走到浏览器可视区（也可以看做版心） 的一半位置。</p>\n<p>2.让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置</p>\n<p>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了。</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571388901848.png\" width=\"350\">\n\n\n\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571389108805.png\" width=\"300\">\n\n\n\n<p>案例效果：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571389241926.png\" class width=\"1571389241926\">\n\n<pre><code>&lt;style&gt;\n        .w &#123;\n            width: 800px;\n            height: 1400px;\n            background-color: pink;\n            margin: 0 auto;\n        &#125;\n        .fixed &#123;\n            position: fixed;\n            /* 1. 走浏览器宽度的一半 */\n            left: 50%;\n            /* 2. 利用margin 走版心盒子宽度的一半距离 */\n            margin-left: 405px;\n            width: 50px;\n            height: 150px;\n            background-color: skyblue;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;fixed&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;w&quot;&gt;版心盒子 800像素&lt;/div&gt;\n  \n&lt;/body&gt;\n</code></pre>\n<h3 id=\"3-2-堆叠顺序（z-index）\"><a href=\"#3-2-堆叠顺序（z-index）\" class=\"headerlink\" title=\"3.2. 堆叠顺序（z-index）\"></a>3.2. 堆叠顺序（z-index）</h3><ul>\n<li><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。此时，可以使用 <strong>z-index</strong> 来控制盒子的前后次序 (z轴)</p>\n</li>\n<li><p>语法：</p>\n<pre><code>选择器 &#123;     z-index: 1; &#125;\n</code></pre>\n</li>\n<li><p><code>z-index</code> 的特性如下：</p>\n<ol>\n<li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；    </li>\n<li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li>\n<li>数字后面<strong>不能加单位</strong>。</li>\n</ol>\n<p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p>\n</li>\n</ul>\n<ul>\n<li>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</li>\n</ul>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/12_zindex%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" class title=\"zindex示意图\">\n\n\n\n<blockquote>\n<p>案例演示：堆叠顺序。</p>\n</blockquote>\n<h2 id=\"4-定位-position-的拓展\"><a href=\"#4-定位-position-的拓展\" class=\"headerlink\" title=\"4. 定位(position)的拓展\"></a>4. 定位(position)的拓展</h2><h3 id=\"4-1-绝对定位的盒子居中\"><a href=\"#4-1-绝对定位的盒子居中\" class=\"headerlink\" title=\"4.1 绝对定位的盒子居中\"></a>4.1 绝对定位的盒子居中</h3><blockquote>\n<p><strong>注意</strong>：加了<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p>\n<p>但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p>\n</blockquote>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/10_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png\" class title=\"绝对定位水平居中\">\n\n<ol>\n<li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li>\n<li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li>\n</ol>\n<p><strong>盒子居中定位示意图</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/11_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" class title=\"绝对定位居中示意图\">\n\n<h3 id=\"4-2-定位特殊特性\"><a href=\"#4-2-定位特殊特性\" class=\"headerlink\" title=\"4.2 定位特殊特性\"></a>4.2 定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似。</p>\n<p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</p>\n<p>2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p>\n<p>前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p>\n<ul>\n<li>可以用inline-block  转换为行内块</li>\n<li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li>\n<li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li>\n</ul>\n<p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p>\n<h3 id=\"4-3-脱标的盒子不会触发外边距塌陷\"><a href=\"#4-3-脱标的盒子不会触发外边距塌陷\" class=\"headerlink\" title=\"4.3 脱标的盒子不会触发外边距塌陷\"></a>4.3 脱标的盒子不会触发外边距塌陷</h3><p>浮动元素、<strong>绝对定位(固定定位）</strong>元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p>\n<p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直<strong>外边距合并的问题</strong>了。</p>\n<h3 id=\"4-4-绝对定位（固定定位）会完全压住盒子\"><a href=\"#4-4-绝对定位（固定定位）会完全压住盒子\" class=\"headerlink\" title=\"4.4 绝对定位（固定定位）会完全压住盒子\"></a>4.4 绝对定位（固定定位）会完全压住盒子</h3><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p>\n<p>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p>\n<p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/文字环绕图片.png\">\n\n<h2 id=\"5-综合案例-淘宝轮播图-重点\"><a href=\"#5-综合案例-淘宝轮播图-重点\" class=\"headerlink\" title=\"5. 综合案例 - 淘宝轮播图(重点)\"></a>5. 综合案例 - 淘宝轮播图(重点)</h2><h3 id=\"5-1-效果图\"><a href=\"#5-1-效果图\" class=\"headerlink\" title=\"5.1 效果图\"></a>5.1 效果图</h3><img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/淘宝焦点图.png\" width=\"600\">\n\n<h3 id=\"5-2-布局分析\"><a href=\"#5-2-布局分析\" class=\"headerlink\" title=\"5.2 布局分析\"></a>5.2 布局分析</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571397019689.png\" class width=\"1571397019689\">\n\n\n\n<h3 id=\"5-3-步骤\"><a href=\"#5-3-步骤\" class=\"headerlink\" title=\"5.3 步骤\"></a>5.3 步骤</h3><ol>\n<li><p>大盒子我们类名为：  tb-promo      淘宝广告</p>\n</li>\n<li><p>里面先放一张图片。</p>\n</li>\n<li><p>左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   </p>\n<p>​    左按钮样式（border-radius：左上，右上，右下，左下），</p>\n<p>​    右按钮定位，提取左右按钮共同的样式代码（并集选择器）</p>\n</li>\n<li><p>底侧小圆点ul 继续做。 类名为 promo-nav     </p>\n<p>​    中间长方形椭圆 ul的定位（水平居中，离底部15px）  </p>\n<p>​    长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式</p>\n</li>\n</ol>\n<h3 id=\"5-4-知识点：圆角矩形设置4个角\"><a href=\"#5-4-知识点：圆角矩形设置4个角\" class=\"headerlink\" title=\"5.4 知识点：圆角矩形设置4个角\"></a>5.4 知识点：圆角矩形设置4个角</h3><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p>\n<pre><code>border-top-left-radius:20px;border-top-right-radius:20px;border-bottom-right-radius:20px;border-bottom-left-radius:20px;\n</code></pre>\n<ul>\n<li><p>如果4个角，数值相同</p>\n<pre><code class=\"css\">border-radius: 15px;\n</code></pre>\n</li>\n<li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p>\n</li>\n</ul>\n<pre><code class=\"css\">border-radius: 左上角 右上角  右下角  左下角;\n</code></pre>\n<p>还是遵循的顺时针。</p>\n<h3 id=\"5-5-代码参考\"><a href=\"#5-5-代码参考\" class=\"headerlink\" title=\"5.5 代码参考\"></a>5.5 代码参考</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;淘宝轮播图做法&lt;/title&gt;\n    &lt;style&gt;\n        * &#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        li &#123;\n            list-style: none;\n        &#125;\n\n        .tb-promo &#123;\n            position: relative;\n            width: 520px;\n            height: 280px;\n            background-color: pink;\n            margin: 100px auto;\n        &#125;\n\n        .tb-promo img &#123;\n            width: 520px;\n            height: 280px;\n        &#125;\n\n        /* 并集选择器可以集体声明相同的样式 */\n        .prev,\n        .next &#123;\n            position: absolute;\n            /* 绝对定位的盒子垂直居中 */\n            top: 50%;\n            margin-top: -15px;\n            /* 加了绝对定位的盒子可以直接设置高度和宽度 */\n            width: 20px;\n            height: 30px;\n            background: rgba(0, 0, 0, .3);\n            text-align: center;\n            line-height: 30px;\n            color: #fff;\n            text-decoration: none;\n        &#125;\n\n        .prev &#123;\n            left: 0;\n            /* border-radius: 15px; */\n            border-top-right-radius: 15px;\n            border-bottom-right-radius: 15px;\n        &#125;\n\n        .next &#123;\n            /* 如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top */\n            right: 0;\n            /* border-radius: 15px; */\n            border-top-left-radius: 15px;\n            border-bottom-left-radius: 15px;\n        &#125;\n        .promo-nav &#123;\n            position: absolute;\n            bottom: 15px;\n            left: 50%;\n            margin-left: -35px;\n            width: 70px;\n            height: 13px;\n            /* background-color: pink; */\n            background: rgba(255,255,255, .3);\n            border-radius: 7px;\n        &#125;\n        .promo-nav li &#123;\n            float: left;\n            width: 8px;\n            height: 8px;\n            background-color: #fff;\n            border-radius: 50%;\n            margin: 3px;\n        &#125;\n        /* 不要忘记选择器权重的问题 */\n       .promo-nav .selected &#123;\n            background-color: #ff5000;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;tb-promo&quot;&gt;\n        &lt;img src=&quot;images/tb.jpg&quot; alt=&quot;&quot;&gt;\n        &lt;!-- 左侧按钮箭头 --&gt;\n        &lt;a href=&quot;#&quot; class=&quot;prev&quot;&gt; &amp;lt; &lt;/a&gt;\n        &lt;!-- 右侧按钮箭头 --&gt;\n        &lt;a href=&quot;#&quot; class=&quot;next&quot;&gt; &amp;gt; &lt;/a&gt;\n        &lt;!-- 小圆点 --&gt;\n        &lt;ul class=&quot;promo-nav&quot;&gt;\n            &lt;li class=&quot;selected&quot;&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"6-网页布局总结\"><a href=\"#6-网页布局总结\" class=\"headerlink\" title=\"6. 网页布局总结\"></a>6. 网页布局总结</h2><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p>\n<p>通过CSS浮动、定位 可以让每个盒子排列成为网页。</p>\n<p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>\n<h3 id=\"6-1-标准流\"><a href=\"#6-1-标准流\" class=\"headerlink\" title=\"6.1. 标准流\"></a>6.1. 标准流</h3><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局</strong>。</p>\n<h3 id=\"6-2-浮动\"><a href=\"#6-2-浮动\" class=\"headerlink\" title=\"6.2. 浮动\"></a>6.2. 浮动</h3><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局</strong></p>\n<h3 id=\"6-3-定位\"><a href=\"#6-3-定位\" class=\"headerlink\" title=\"6.3. 定位\"></a>6.3. 定位</h3><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。<strong>如果元素自由在某个盒子内移动就用定位布局。</strong></p>\n<h2 id=\"7-元素的显示与隐藏\"><a href=\"#7-元素的显示与隐藏\" class=\"headerlink\" title=\"7. 元素的显示与隐藏\"></a>7. 元素的显示与隐藏</h2><ul>\n<li><p>目的（本质）</p>\n<p>​    让一个元素在页面中消失或者显示出来</p>\n</li>\n<li><p>场景</p>\n<p>​    类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p>\n</li>\n</ul>\n<h3 id=\"7-1-display-显示（重点）\"><a href=\"#7-1-display-显示（重点）\" class=\"headerlink\" title=\"7.1. display 显示（重点）\"></a>7.1. display 显示（重点）</h3><ul>\n<li><p>display 设置或检索对象是否及如何显示。</p>\n<pre><code>display: none 隐藏对象display：block 除了转换为块级元素之外，同时还有显示元素的意思。\n</code></pre>\n</li>\n<li><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p>\n</li>\n<li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：</p>\n<blockquote>\n<p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p>\n</blockquote>\n</li>\n</ul>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/29none.png\">\n\n<blockquote>\n</blockquote>\n<h3 id=\"7-2-visibility-可见性-（了解）\"><a href=\"#7-2-visibility-可见性-（了解）\" class=\"headerlink\" title=\"7.2. visibility 可见性 （了解）\"></a>7.2. visibility 可见性 （了解）</h3><ul>\n<li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p>\n<pre><code>visibility：visible ; 　元素可视visibility：hidden; 　  元素隐藏\n</code></pre>\n</li>\n<li><p>特点：<strong>visibility 隐藏元素后，继续占有原来的位置</strong>。（停职留薪）</p>\n</li>\n<li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p>\n</li>\n<li><p>如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）</p>\n</li>\n</ul>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/30visibility.png\">\n\n<h3 id=\"7-3-overflow-溢出（重点）\"><a href=\"#7-3-overflow-溢出（重点）\" class=\"headerlink\" title=\"7.3. overflow 溢出（重点）\"></a>7.3. overflow 溢出（重点）</h3><ul>\n<li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>visible</strong></td>\n<td>不剪切内容也不添加滚动条</td>\n</tr>\n<tr>\n<td><strong>hidden</strong></td>\n<td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>\n</tr>\n<tr>\n<td><strong>scroll</strong></td>\n<td>不管超出内容否，总是显示滚动条</td>\n</tr>\n<tr>\n<td><strong>auto</strong></td>\n<td>超出自动显示滚动条，不超出不显示滚动条</td>\n</tr>\n</tbody></table>\n<ul>\n<li> 一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</li>\n<li> 但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。</li>\n</ul>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/33overflow.png\">\n\n\n\n<ul>\n<li>实际开发场景：</li>\n</ul>\n<ol>\n<li>清除浮动</li>\n<li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li>\n</ol>\n<h3 id=\"7-4-显示与隐藏总结\"><a href=\"#7-4-显示与隐藏总结\" class=\"headerlink\" title=\"7.4. 显示与隐藏总结\"></a>7.4. 显示与隐藏总结</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>区别</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>display 显示     （重点）</strong></td>\n<td>隐藏对象，不保留位置</td>\n<td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td>\n</tr>\n<tr>\n<td><strong>visibility 可见性 （了解）</strong></td>\n<td>隐藏对象，保留位置</td>\n<td>使用较少</td>\n</tr>\n<tr>\n<td><strong>overflow 溢出（重点）</strong></td>\n<td>只是隐藏超出大小的部分</td>\n<td>1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-综合案例：土豆网鼠标经过显示遮罩\"><a href=\"#8-综合案例：土豆网鼠标经过显示遮罩\" class=\"headerlink\" title=\"8 综合案例：土豆网鼠标经过显示遮罩\"></a>8 综合案例：土豆网鼠标经过显示遮罩</h2><h3 id=\"8-1-效果图\"><a href=\"#8-1-效果图\" class=\"headerlink\" title=\"8.1. 效果图\"></a>8.1. 效果图</h3><img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/土豆网案例.png\">\n\n<h3 id=\"8-2-案例目标\"><a href=\"#8-2-案例目标\" class=\"headerlink\" title=\"8.2. 案例目标\"></a>8.2. 案例目标</h3><p>1.练习元素的显示与隐藏</p>\n<p>2.练习元素的定位</p>\n<h3 id=\"8-3-核心原理\"><a href=\"#8-3-核心原理\" class=\"headerlink\" title=\"8.3. 核心原理\"></a>8.3. 核心原理</h3><p>原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</p>\n<p>遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。</p>\n<h3 id=\"8-4-代码参考\"><a href=\"#8-4-代码参考\" class=\"headerlink\" title=\"8.4. 代码参考\"></a>8.4. 代码参考</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;仿土豆网显示隐藏遮罩案例&lt;/title&gt;\n    &lt;style&gt;\n        .tudou &#123;\n            position: relative;\n            width: 444px;\n            height: 320px;\n            background-color: pink;\n            margin: 30px auto;\n        &#125;\n\n        .tudou img &#123;\n            width: 100%;\n            height: 100%;\n        &#125;\n\n        .mask &#123;\n            /* 隐藏遮罩层 */\n            display: none;\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, .4) url(images/arr.png) no-repeat center;\n        &#125;\n\n        /* 当我们鼠标经过了 土豆这个盒子，就让里面遮罩层显示出来 */\n        .tudou:hover .mask &#123;\n            /* 而是显示元素 */\n            display: block;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h1 id=\"CSS高阶技巧\"><a href=\"#CSS高阶技巧\" class=\"headerlink\" title=\"CSS高阶技巧\"></a>CSS高阶技巧</h1><h2 id=\"1-精灵图（重点）\"><a href=\"#1-精灵图（重点）\" class=\"headerlink\" title=\"1. 精灵图（重点）\"></a>1. 精灵图（重点）</h2><h3 id=\"1-1-为什么需要精灵图\"><a href=\"#1-1-为什么需要精灵图\" class=\"headerlink\" title=\"1.1 为什么需要精灵图\"></a>1.1 为什么需要精灵图</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571482435259.png\" class width=\"1571482435259\">\n\n<p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>\n<p><strong>为什么使用精灵图（目的）：</strong></p>\n<p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p>\n<p><strong>核心原理</strong>：</p>\n<p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p>\n<p><strong>精灵图举例</strong>:</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519067073.png\" class width=\"1571519067073\">\n\n<h3 id=\"1-2-精灵图（sprites）的使用\"><a href=\"#1-2-精灵图（sprites）的使用\" class=\"headerlink\" title=\"1.2 精灵图（sprites）的使用\"></a>1.2 精灵图（sprites）的使用</h3><p>使用精灵图核心：</p>\n<ol>\n<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li>\n<li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li>\n<li>移动背景图片位置， 此时可以使用 background-position 。</li>\n<li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>\n<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>\n<li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>\n</ol>\n<p>使用精灵图核心总结：</p>\n<ol>\n<li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p>\n</li>\n<li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p>\n</li>\n<li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p>\n</li>\n</ol>\n<h3 id=\"1-3-案例：拼出自己名字\"><a href=\"#1-3-案例：拼出自己名字\" class=\"headerlink\" title=\"1.3 案例：拼出自己名字\"></a>1.3 案例：拼出自己名字</h3><h4 id=\"1-3-1-案例效果\"><a href=\"#1-3-1-案例效果\" class=\"headerlink\" title=\"1.3.1 案例效果\"></a>1.3.1 案例效果</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519368229.png\" class width=\"1571519368229\">\n\n<h4 id=\"1-3-2-代码参考\"><a href=\"#1-3-2-代码参考\" class=\"headerlink\" title=\"1.3.2 代码参考\"></a>1.3.2 代码参考</h4><p>结构</p>\n<pre><code class=\"html\">&lt;span class=&quot;p&quot;&gt;p&lt;/span&gt;\n&lt;span class=&quot;i&quot;&gt;i&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt;\n</code></pre>\n<p>样式</p>\n<pre><code class=\"css\">span &#123;\n    display: inline-block;\n    background: url(images/abcd.jpg) no-repeat;\n&#125;\n.p &#123;\n    width: 100px;\n    height: 112px;\n    /* background-color: pink; */\n    background-position:  -493px -276px;\n&#125;\n.i &#123;\n    width: 60px;\n    height: 108px;\n    /* background-color: pink; */\n    background-position: -327px -142px;\n&#125;\n.n &#123;\n    width: 108px;\n    height: 109px;\n    /* background-color: pink; */\n    background-position: -215px -141px;\n&#125;\n.k &#123;\n    width: 105px;\n    height: 114px;\n    /* background-color: pink; */\n    background-position: -495px -142px;\n&#125;\n</code></pre>\n<h2 id=\"2-字体图标\"><a href=\"#2-字体图标\" class=\"headerlink\" title=\"2. 字体图标\"></a>2. 字体图标</h2><h3 id=\"2-1-字体图标的产生\"><a href=\"#2-1-字体图标的产生\" class=\"headerlink\" title=\"2.1 字体图标的产生\"></a>2.1 字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p>\n<p>精灵图是有诸多优点的，但是缺点很明显。</p>\n<p>1.图片文件还是比较大的。</p>\n<p>2.图片本身放大和缩小会失真。</p>\n<p>3.一旦图片制作完毕想要更换非常复杂。</p>\n<p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p>\n<p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p>\n<h3 id=\"2-2-字体图标的优点\"><a href=\"#2-2-字体图标的优点\" class=\"headerlink\" title=\"2.2 字体图标的优点\"></a>2.2 字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p>\n<ul>\n<li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li>\n<li>兼容性：几乎支持所有的浏览器，请放心使用</li>\n<li>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</li>\n</ul>\n<p><strong>总结：</strong></p>\n<p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519724473.png\" class width=\"1571519724473\"></p>\n<p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519739775.png\" class width=\"1571519739775\">\n\n\n\n<p><strong>使用步骤</strong></p>\n<p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p>\n<p>1.字体图标的下载 </p>\n<p>2.字体图标的引入 （引入到我们html页面中）</p>\n<p>3.字体图标的追加 （以后添加新的小图标）</p>\n<h3 id=\"2-3-字体图标的下载\"><a href=\"#2-3-字体图标的下载\" class=\"headerlink\" title=\"2.3 字体图标的下载\"></a><strong>2.3</strong> <strong>字体图标的下载</strong></h3><p><strong>推荐下载网站：</strong></p>\n<ul>\n<li><strong>icomoon</strong> <strong>字库</strong>  <a href=\"http://icomoon.io/\">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li>\n</ul>\n<p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>\n<ul>\n<li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li>\n</ul>\n<p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p>\n<h3 id=\"2-4-字体图标的引入\"><a href=\"#2-4-字体图标的引入\" class=\"headerlink\" title=\"2.4 字体图标的引入\"></a><strong>2.4</strong> <strong>字体图标的引入</strong></h3><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p>\n<ol>\n<li>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520092646.png\" class width=\"1571520092646\">\n\n\n\n<ul>\n<li><strong>字体文件格式</strong></li>\n</ul>\n<p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>\n<p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>\n<p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>\n<p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p>\n<p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>\n<p>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。</p>\n<p>一定注意字体文件路径的问题</p>\n<pre><code> @font-face &#123;\n   font-family: &#39;icomoon&#39;;\n   src:  url(&#39;fonts/icomoon.eot?7kkyc2&#39;);\n   src:  url(&#39;fonts/icomoon.eot?7kkyc2#iefix&#39;) format(&#39;embedded-opentype&#39;),\n     url(&#39;fonts/icomoon.ttf?7kkyc2&#39;) format(&#39;truetype&#39;),\n     url(&#39;fonts/icomoon.woff?7kkyc2&#39;) format(&#39;woff&#39;),\n     url(&#39;fonts/icomoon.svg?7kkyc2#icomoon&#39;) format(&#39;svg&#39;);\n   font-weight: normal;\n   font-style: normal;\n &#125;\n</code></pre>\n<ol start=\"3\">\n<li>html 标签内添加小图标。</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520411345.png\" class width=\"1571520411345\">\n\n<ol start=\"4\">\n<li>给标签定义字体。</li>\n</ol>\n<pre><code> span &#123;\n font-family: &quot;icomoon&quot;;\n &#125;\n</code></pre>\n<p>  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 </p>\n  <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520485350.png\" class width=\"1571520485350\">\n\n<h3 id=\"2-5-字体图标的追加\"><a href=\"#2-5-字体图标的追加\" class=\"headerlink\" title=\"2.5 字体图标的追加\"></a>2.5 字体图标的追加</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>\n<p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520554317.png\" class width=\"1571520554317\">\n\n<h3 id=\"2-6-字体图标加载的原理：\"><a href=\"#2-6-字体图标加载的原理：\" class=\"headerlink\" title=\"2.6 字体图标加载的原理：\"></a>2.6 字体图标加载的原理：</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86.gif\" class width=\"1571520617270\">\n\n<h2 id=\"3-CSS-三角\"><a href=\"#3-CSS-三角\" class=\"headerlink\" title=\"3. CSS 三角\"></a>3. CSS 三角</h2><h3 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h3><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>\n<p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520965966.png\" class width=\"1571520965966\">\n\n<pre><code class=\"css\"> div &#123;\n     width: 0; \n    height: 0;\n    border: 50px solid transparent;\n    border-color: red green blue black;\n    line-height:0;\n    font-size: 0;\n &#125;\n</code></pre>\n<ol>\n<li>我们用css 边框可以模拟三角效果</li>\n<li>宽度高度为0</li>\n<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>\n<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>\n</ol>\n<h3 id=\"3-2-案例：京东三角\"><a href=\"#3-2-案例：京东三角\" class=\"headerlink\" title=\"3.2 案例：京东三角\"></a>3.2 案例：京东三角</h3><h4 id=\"3-2-1效果图\"><a href=\"#3-2-1效果图\" class=\"headerlink\" title=\"3.2.1效果图\"></a>3.2.1效果图</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571521183026.png\" class width=\"1571521183026\">\n\n<h4 id=\"3-2-2-代码参考\"><a href=\"#3-2-2-代码参考\" class=\"headerlink\" title=\"3.2.2 代码参考\"></a>3.2.2 代码参考</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;CSS 三角制作&lt;/title&gt;\n    &lt;style&gt;\n        .box1 &#123;\n            width: 0;\n            height: 0;\n            /* border: 10px solid pink; */\n            border-top: 10px solid pink;\n            border-right: 10px solid red;\n            border-bottom: 10px solid blue;\n            border-left: 10px solid green;\n        &#125;\n        .box2 &#123;\n            width: 0;\n            height: 0;\n            border: 50px solid transparent;\n            border-left-color: pink;\n            margin: 100px auto;\n        &#125;\n        .jd &#123;\n            position: relative;\n            width: 120px;\n            height: 249px;\n            background-color: pink;\n        &#125;\n        .jd span &#123;\n            position: absolute;\n            right: 15px;\n            top: -10px;\n            width: 0;\n            height: 0;\n            /* 为了照顾兼容性 */\n            line-height: 0;  \n            font-size: 0;\n            border: 5px solid transparent;\n            border-bottom-color: pink;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;jd&quot;&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"4-CSS-用户界面样式\"><a href=\"#4-CSS-用户界面样式\" class=\"headerlink\" title=\"4. CSS 用户界面样式\"></a>4. CSS 用户界面样式</h2><p><strong>什么是界面样式</strong></p>\n<p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>\n<ul>\n<li>更改用户的鼠标样式 </li>\n<li>表单轮廓</li>\n<li>防止表单域拖拽</li>\n</ul>\n<h3 id=\"4-1-鼠标样式-cursor\"><a href=\"#4-1-鼠标样式-cursor\" class=\"headerlink\" title=\"4.1 鼠标样式 cursor\"></a>4.1 鼠标样式 cursor</h3><pre><code class=\"css\"> li &#123;\n     cursor: pointer; \n &#125;\n</code></pre>\n<p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571521805183.png\" class width=\"1571521805183\">\n\n<h3 id=\"4-2-轮廓线-outline\"><a href=\"#4-2-轮廓线-outline\" class=\"headerlink\" title=\"4.2 轮廓线 outline\"></a>4.2 轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p>\n<pre><code class=\"css\"> input &#123;\n     outline: none; \n &#125;\n</code></pre>\n<h3 id=\"4-3-防止拖拽文本域-resize\"><a href=\"#4-3-防止拖拽文本域-resize\" class=\"headerlink\" title=\"4.3 防止拖拽文本域 resize\"></a>4.3 防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p>\n<pre><code class=\"css\"> textarea&#123;      resize: none; &#125;\n</code></pre>\n<p>vertical-align 属性应用</p>\n<h2 id=\"5-vertical-align-属性应用\"><a href=\"#5-vertical-align-属性应用\" class=\"headerlink\" title=\"5. vertical-align 属性应用\"></a>5. vertical-align 属性应用</h2><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>\n<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>\n<p>语法：</p>\n<pre><code class=\"css\">vertical-align : baseline | top | middle | bottom \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522023413.png\" class width=\"1571522023413\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522040645.png\" class width=\"1571522040645\">\n\n<h3 id=\"5-1-图片、表单和文字对齐\"><a href=\"#5-1-图片、表单和文字对齐\" class=\"headerlink\" title=\"5.1 图片、表单和文字对齐\"></a><strong>5.1</strong> <strong>图片、表单和文字对齐</strong></h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522093729.png\" class width=\"1571522093729\">\n\n<p>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p>\n<h3 id=\"5-2-解决图片底部默认空白缝隙问题\"><a href=\"#5-2-解决图片底部默认空白缝隙问题\" class=\"headerlink\" title=\"5.2 解决图片底部默认空白缝隙问题\"></a>5.2 解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>\n<p>主要解决方法有两种：</p>\n<p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p>\n<p>2.把图片转换为块级元素  <strong>display: block</strong>; </p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522162225.png\" class width=\"1571522162225\">\n\n\n\n<h2 id=\"6-溢出的文字省略号显示\"><a href=\"#6-溢出的文字省略号显示\" class=\"headerlink\" title=\"6. 溢出的文字省略号显示\"></a>6. 溢出的文字省略号显示</h2><h3 id=\"6-1-单行文本溢出显示省略号\"><a href=\"#6-1-单行文本溢出显示省略号\" class=\"headerlink\" title=\"6.1 单行文本溢出显示省略号\"></a>6.1 单行文本溢出显示省略号</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522317809.png\" class width=\"1571522317809\">\n\n<p>单行文本溢出显示省略号–必须满足三个条件：</p>\n<pre><code class=\"css\">  /*1. 先强制一行内显示文本*/\n   white-space: nowrap;  （ 默认 normal 自动换行）\n   \n  /*2. 超出的部分隐藏*/\n   overflow: hidden;\n   \n  /*3. 文字用省略号替代超出的部分*/\n   text-overflow: ellipsis;\n</code></pre>\n<h3 id=\"6-2-多行文本溢出显示省略号（了解）\"><a href=\"#6-2-多行文本溢出显示省略号（了解）\" class=\"headerlink\" title=\"6.2 多行文本溢出显示省略号（了解）\"></a>6.2 多行文本溢出显示省略号（了解）</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522334591.png\" class width=\"1571522334591\">\n\n\n\n<p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p>\n<pre><code class=\"css\">/*1. 超出的部分隐藏 */\noverflow: hidden;\n\n/*2. 文字用省略号替代超出的部分 */\ntext-overflow: ellipsis;\n\n/* 3. 弹性伸缩盒子模型显示 */\ndisplay: -webkit-box;\n\n/* 4. 限制在一个块元素显示的文本的行数 */\n-webkit-line-clamp: 2;\n\n/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */\n-webkit-box-orient: vertical;\n</code></pre>\n<p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p>\n<h2 id=\"7-常见布局技巧\"><a href=\"#7-常见布局技巧\" class=\"headerlink\" title=\"7. 常见布局技巧\"></a>7. 常见布局技巧</h2><p><strong>巧妙利用一个技术更快更好的布局：</strong></p>\n<ol>\n<li>margin负值的运用</li>\n<li>文字围绕浮动元素</li>\n<li>行内块的巧妙运用</li>\n<li>CSS三角强化</li>\n</ol>\n<h3 id=\"7-1-margin负值运用\"><a href=\"#7-1-margin负值运用\" class=\"headerlink\" title=\"7.1. margin负值运用\"></a>7.1. margin负值运用</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522666082.png\" class width=\"1571522666082\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522683897.png\" class width=\"1571522683897\">\n\n<p>1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</p>\n<p>2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）</p>\n<h3 id=\"7-2-文字围绕浮动元素\"><a href=\"#7-2-文字围绕浮动元素\" class=\"headerlink\" title=\"7.2 文字围绕浮动元素\"></a>7.2 文字围绕浮动元素</h3><p><strong>效果</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522777745.png\" class width=\"1571522777745\">\n\n<p><strong>布局示意图</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522761996.png\" class width=\"1571522761996\">\n\n<p><strong>巧妙运用浮动元素不会压住文字的特性</strong></p>\n<h3 id=\"7-3-行内块巧妙运用\"><a href=\"#7-3-行内块巧妙运用\" class=\"headerlink\" title=\"7.3 行内块巧妙运用\"></a>7.3 行内块巧妙运用</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522898744.png\" class width=\"1571522898744\">\n\n<p>页码在页面中间显示:</p>\n<ol>\n<li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li>\n<li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522910580.png\" class width=\"1571522910580\">\n\n<h3 id=\"7-4-CSS-三角强化-案例\"><a href=\"#7-4-CSS-三角强化-案例\" class=\"headerlink\" title=\"7.4. CSS 三角强化 案例\"></a>7.4. CSS 三角强化 案例</h3><h4 id=\"7-4-1-原理\"><a href=\"#7-4-1-原理\" class=\"headerlink\" title=\"7.4.1 原理\"></a><strong>7.4.1 原理</strong></h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571550959181.png\" class width=\"1571550959181\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571551000391.png\" class width=\"1571551000391\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571548058053.png\" class width=\"1571548058053\">\n\n\n\n<pre><code class=\"html\">&lt;style&gt;\n    .box1 &#123;\n        width: 0;\n        height: 0;\n        \n        /* 把上边框宽度调大 */\n        /* border-top: 100px solid transparent;\n        border-right: 50px solid skyblue; */\n        /* 左边和下边的边框宽度设置为0 */\n        /* border-bottom: 0 solid blue;\n        border-left: 0 solid green; */\n        \n        /* 1.只保留右边的边框有颜色 */\n        border-color: transparent red transparent transparent;\n        /* 2. 样式都是solid */\n        border-style: solid;\n        /* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */\n        border-width: 100px 50px 0 0 ;\n    &#125;\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"7-4-2-案例效果\"><a href=\"#7-4-2-案例效果\" class=\"headerlink\" title=\"7.4.2 案例效果\"></a>7.4.2 案例效果</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571548099631.png\" class width=\"1571548099631\">\n\n<h4 id=\"7-4-3-代码参考\"><a href=\"#7-4-3-代码参考\" class=\"headerlink\" title=\"7.4.3 代码参考\"></a><strong>7.4.3 代码参考</strong></h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n        &lt;title&gt;CSS三角强化的巧妙运用&lt;/title&gt;\n        &lt;style&gt;\n            .price &#123;\n                width: 160px;\n                height: 24px;\n                line-height: 24px;\n                border: 1px solid red;\n                margin: 0 auto;\n            &#125;\n            .miaosha &#123;\n                position: relative;\n                float: left;\n                width: 90px;\n                height: 100%;\n                background-color:red;\n                text-align: center;\n                color: #fff;\n                font-weight: 700;\n                margin-right: 8px;\n\n            &#125;\n            .miaosha i &#123;\n                position: absolute;\n                right: 0;\n                top: 0;\n                width: 0;\n                height: 0;\n                border-color: transparent #fff transparent transparent;\n                border-style: solid;\n                border-width: 24px 10px 0 0;\n            &#125;\n            .origin &#123;\n                font-size: 12px;\n                color: gray;\n                text-decoration: line-through;\n            &#125;\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;price&quot;&gt;\n            &lt;span class=&quot;miaosha&quot;&gt;\n                ¥1650\n                &lt;i&gt;&lt;/i&gt;\n            &lt;/span&gt;\n            &lt;span class=&quot;origin&quot;&gt;¥5650&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"8-CSS-初始化\"><a href=\"#8-CSS-初始化\" class=\"headerlink\" title=\"8. CSS 初始化\"></a>8. CSS 初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化</p>\n<p>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p>\n<p>每个网页都必须首先进行 CSS初始化。</p>\n<p>这里我们以 京东CSS初始化代码为例。</p>\n<p><strong>Unicode编码字体：</strong></p>\n<p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p>\n<p>比如：</p>\n<p>黑体 \\9ED1\\4F53<br>宋体 \\5B8B\\4F53<br>微软雅黑 \\5FAE\\8F6F\\96C5\\9ED1</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css基础\"><a href=\"#css基础\" class=\"headerlink\" title=\"css基础\"></a>css基础</h1><h2 id=\"一-css简介\"><a href=\"#一-css简介\" class=\"headerlink\" title=\"一.css简介\"></a>一.css简介</h2><p>​    CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.<br>​    有时我们也会称之为 CSS 样式表或级联样式表。<br>​    CSS 是也是一种标记语言<br>​    CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。<br>​    CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。<br>​    CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%B0%8F%E9%B8%9F.png\" class>\n\n<h3 id=\"css语法规范\"><a href=\"#css语法规范\" class=\"headerlink\" title=\"css语法规范\"></a>css语法规范</h3><p>​    1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解CSS 样式规则。<br>​    2.CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/css%E5%B1%9E%E6%80%A7%E8%A7%84%E5%88%99.png\" class>\n\n<p> 1.选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式<br> 2.属性和属性值以“键值对”的形式出现<br> 3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等<br> 4.属性和属性值之间用英文“:”分开<br> 5.多个“键值对”之间用英文“;”进行区分<br> 例如：<br>    所有的样式，都包含在 &lt;style&gt; 标签内，表示是样式表。&lt;style&gt; 一般写到 &lt;/head&gt; 上方</p>\n<pre><code>    &lt;head&gt;\n        &lt;style&gt;\n            h4 &#123;\n                color: blue;\n                font-size: 100px;\n            &#125;\n        &lt;/style&gt;\n    &lt;/head&gt;\n</code></pre>\n<h3 id=\"css代码风格：\"><a href=\"#css代码风格：\" class=\"headerlink\" title=\"css代码风格：\"></a>css代码风格：</h3><pre><code>1. 样式格式书写\n    1.紧凑格式   \n        h3 &#123; color: deeppink;font-size: 20px;&#125;\n    2.展开格式   \n     h3 &#123;\n        color: pink;\n        font-size: 20px;    \n     &#125;\n    强烈推荐第二种格式， 因为更直观。\n\n        2. 样式大小写风格\n        1.小写格式\n            h3 &#123;\n            color: pink;\n            &#125;\n        2.大写格式\n              H3 &#123;\n            COLOR: PINK;   \n        &#125;\n        强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。\n        \n            3. 样式空格风格\n    1. h3 &#123;\n    color: pink;    \n    &#125;\n        属性值前面，冒号后面，保留一个空格\n    选择器（标签）和大括号中间保留空格\n        ### css选择器的作用\n    答：选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。  简单来说，就是选择标签用的。\n    ​    &#123;% asset_img css属性规则.png  %&#125;\n        找到所有的 h1 标签。  选择器（选对人）\n        设置这些标签的样式，比如颜色为红色（做对事)。\n    \n        ### css基础选择器\n</code></pre>\n<p>基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器</p>\n<h4 id=\"标签选择器：\"><a href=\"#标签选择器：\" class=\"headerlink\" title=\"标签选择器：\"></a>标签选择器：</h4><p>​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。<br>语法：<br>​    标签选择器{<br>​        属性：属性值<br>​        …<br>​    }<br>作用：<br>​    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p>\n<h4 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h4><p>​    如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.<br>语法：<br>​    .类名 {<br>​        属性1: 属性值1;<br>​        …<br>​    }<br>​    结构需要用class属性来调用  class  类的意思<br>​    &lt;div class=”类名”&gt; 变红色 &lt;/div&gt;<br>​    1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。<br>​    2.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。<br>​    3.类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。<br>​    4.可以理解为给这个标签起了一个名字，来表示。<br>​    5.长名称或词组可以使用中横线来为选择器命名。<br>​    6.不要使用纯数字、中文等命名，尽量使用英文字母来表示。<br>​    7.命名要有意义，尽量使别人一眼就知道这个类名的目的。</p>\n<h4 id=\"多类名选择器\"><a href=\"#多类名选择器\" class=\"headerlink\" title=\"多类名选择器\"></a>多类名选择器</h4><p>​    我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.<br>​    简单理解就是一个标签有多个名字. </p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E6%B7%98%E5%AE%9D%E7%BD%91%E5%A4%9A%E7%B1%BB%E5%90%8D.png\" class>\n<pre><code>多类名的具体使用：\n    1. \\&lt;div class=&quot;red font20&quot;&gt;亚瑟\\&lt;/div&gt;\n    注意：\n    ​        1.在标签class 属性中写 多个类名\n    ​        2.多个类名中间必须用空格分开\n    ​        3.这个标签就可以分别具有这些类名的样式\n</code></pre>\n<h4 id=\"id选择器：\"><a href=\"#id选择器：\" class=\"headerlink\" title=\"id选择器：\"></a>id选择器：</h4><p>​    id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。<br>​    HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#” 来定义。<br>​    语法：<br>​         #id名 {<br>​            属性1: 属性值1;<br>​            …<br>​        }<br>​        注意：id 属性只能在每个 HTML 文档中出现一次</p>\n<h4 id=\"id选择器和类选择器的区别：\"><a href=\"#id选择器和类选择器的区别：\" class=\"headerlink\" title=\"id选择器和类选择器的区别：\"></a>id选择器和类选择器的区别：</h4><p>​    1.类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。<br>​    2.id 选择器好比人的身份证号码，全中国是唯一的，不得重复。<br>​    3.id 选择器和类选择器最大的不同在于使用次数上。<br>​    4.类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/id%E4%B8%8E%E7%B1%BB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB.png\" class>\n\n<h4 id=\"通配符选择器：\"><a href=\"#通配符选择器：\" class=\"headerlink\" title=\"通配符选择器：\"></a>通配符选择器：</h4><p>​    语法：<br>        * {<br>            属性1: 属性值1;<br>            …<br>                }<br>        通配符选择器不需要调用， 自动就给所有的元素使用样式<br>        特殊情况才使用，后面讲解使用场景(以下是清除所有的元素标签的内外边距,后期讲)</p>\n<pre><code>           * &#123;\n          margin: 0;\n      padding: 0;\n           &#125; \n        \n          #### 选择器总结\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93.png\" class>\n\n<h2 id=\"二-css字体属性\"><a href=\"#二-css字体属性\" class=\"headerlink\" title=\"二.css字体属性:\"></a>二.css字体属性:</h2><h3 id=\"字体大小：\"><a href=\"#字体大小：\" class=\"headerlink\" title=\"字体大小：\"></a>字体大小：</h3><p>​    CSS 使用 font-size 属性定义字体大小。<br>语法：<br>​     p {<br>​        font-size: 20px;<br>​    }<br>​    1.px（像素）大小是我们网页的最常用的单位<br>​    2.谷歌浏览器默认的文字大小为16px<br>​    3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小<br>​    4.可以给 body 指定整个页面文字的大小</p>\n<h3 id=\"字体粗细：\"><a href=\"#字体粗细：\" class=\"headerlink\" title=\"字体粗细：\"></a>字体粗细：</h3><p>​    CSS 使用 font-weight 属性设置文本字体的粗细。<br>语法：<br>​    p {<br>​        font-weight: bold;<br>​    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E7%B2%97%E7%BB%86.png\" class>\n\n<p>1.学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗<br>2.实际开发时，我们更喜欢用数字表示粗细</p>\n<h3 id=\"字体样式：\"><a href=\"#字体样式：\" class=\"headerlink\" title=\"字体样式：\"></a>字体样式：</h3><p>​    CSS 使用 font-style 属性设置文本的风格。<br>语法：<br>​    p {<br>​        font-style: normal;<br>​    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E6%96%87%E5%AD%97%E5%80%BE%E6%96%9C.png\" class>\n\n<h3 id=\"字体的综合写法\"><a href=\"#字体的综合写法\" class=\"headerlink\" title=\"字体的综合写法\"></a>字体的综合写法</h3><p>字体属性可以把以上文字样式综合来写, 这样可以更节约代码:</p>\n<p> body {   font: font-style  font-weight  font-size/line-height  font-family;}</p>\n<p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</p>\n<h3 id=\"字体总结：\"><a href=\"#字体总结：\" class=\"headerlink\" title=\"字体总结：\"></a>字体总结：</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E6%80%BB%E7%BB%93.png\" class>\n\n<h2 id=\"三-css文本属性：\"><a href=\"#三-css文本属性：\" class=\"headerlink\" title=\"三.css文本属性：\"></a>三.css文本属性：</h2><h3 id=\"文本颜色：\"><a href=\"#文本颜色：\" class=\"headerlink\" title=\"文本颜色：\"></a>文本颜色：</h3><p>​    color 属性用于定义文本的颜色。<br>语法：<br>​    div {<br>​        color: red;<br>​    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E9%A2%9C%E8%89%B2%E5%80%BC.png\" class>\n\n<p>开发中最常用的是十六进制</p>\n<h3 id=\"文本对齐：\"><a href=\"#文本对齐：\" class=\"headerlink\" title=\"文本对齐：\"></a>文本对齐：</h3><p>text-align 属性用于设置元素内文本内容的水平对齐方式。<br>语法：<br>    div {<br>        text-align: center;<br>    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AF%B9%E9%BD%90%E6%96%87%E6%9C%AC.png\" class>\n\n<h3 id=\"修饰文本：\"><a href=\"#修饰文本：\" class=\"headerlink\" title=\"修饰文本：\"></a>修饰文本：</h3><p>​    语法：<br>​     div {<br>​        text-decoration：underline；<br>​     }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E4%BF%AE%E9%A5%B0%E6%96%87%E6%9C%AC.png\" class>\n\n<p>重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.</p>\n<h3 id=\"文本缩进\"><a href=\"#文本缩进\" class=\"headerlink\" title=\"文本缩进\"></a>文本缩进</h3><p>语法：<br>    div {<br>        text-indent：20px；<br>    }<br>    div {<br>        text-indent：2em；<br>    }</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E7%BC%A9%E8%BF%9B.png\" class>\n\n<pre><code>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。\n</code></pre>\n<h3 id=\"行间距：\"><a href=\"#行间距：\" class=\"headerlink\" title=\"行间距：\"></a>行间距：</h3><p>​    line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离<br>语法：<br>​    p {<br>​        line-height: 26px;<br>​    }<br>​    行高的文本分为 上间距  文本高度 下间距 = 行间距</p>\n<h2 id=\"四-css样式表：\"><a href=\"#四-css样式表：\" class=\"headerlink\" title=\"四.css样式表：\"></a>四.css样式表：</h2><p>​    按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类： </p>\n<h3 id=\"行内样式表（行内式）\"><a href=\"#行内样式表（行内式）\" class=\"headerlink\" title=\"行内样式表（行内式）\"></a>行内样式表（行内式）</h3><p>​        行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.<br>​        语法：</p>\n<pre><code>        &lt;div style=&quot;color: red; font-size: 12px;&quot;&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;\n</code></pre>\n<p>​        1.style 其实就是标签的属性<br>​        在双引号中间，写法要符合 CSS 规范<br>​        2.可以控制当前的标签设置样式<br>​        3.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用<br>​        4.使用行内样式表设定 CSS，通常也被称为行内式引入</p>\n<h3 id=\"内部样式表（嵌入式）\"><a href=\"#内部样式表（嵌入式）\" class=\"headerlink\" title=\"内部样式表（嵌入式）\"></a>内部样式表（嵌入式）</h3><p>​        内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 &lt;style&gt; 标签中<br>​        语法：</p>\n<pre><code>            &lt;style&gt;\n                div &#123;\n                color: red;\n                font-size: 12px;\n                &#125;\n            &lt;/style&gt;\n</code></pre>\n<p>​        1.&lt;style&gt; 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的&lt;head&gt;标签中<br>​        2.通过此种方式，可以方便控制当前整个页面中的元素样式设置<br>​        3.代码结构清晰，但是并没有实现结构与样式完全分离<br>​        4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</p>\n<h3 id=\"外部样式表（链接式）\"><a href=\"#外部样式表（链接式）\" class=\"headerlink\" title=\"外部样式表（链接式）\"></a>外部样式表（链接式）</h3><p>​    实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用.<br>​    引入外部样式表分为两步：</p>\n<pre><code>1. 新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。\n    2. 在 HTML 页面中，使用\\&lt;link&gt; 标签引入这个文件。\n    语法：\n        \\&lt;link rel=&quot;stylesheet&quot;  href=&quot;css文件路径&quot;&gt;\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/css%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93.png\" class>\n\n<h2 id=\"Chrome调试工具：\"><a href=\"#Chrome调试工具：\" class=\"headerlink\" title=\"Chrome调试工具：\"></a>Chrome调试工具：</h2><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E8%B0%B7%E6%AD%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png\" class>\n\n<p> 1.Ctrl+滚轮 可以放大开发者工具代码大小。<br> 2.左边是 HTML 元素结构，右边是 CSS 样式。<br> 3.右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。<br> 4.Ctrl + 0 复原浏览器大小。<br> 5.如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。<br> 6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。</p>\n<h2 id=\"五、emmet语法\"><a href=\"#五、emmet语法\" class=\"headerlink\" title=\"五、emmet语法\"></a>五、emmet语法</h2><h3 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h3><p>​        Emmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法。</p>\n<p>​        快速生成HTML结构语法</p>\n<p>​        快速生成CSS样式语法</p>\n<h3 id=\"2、快速生成HTML结构语法\"><a href=\"#2、快速生成HTML结构语法\" class=\"headerlink\" title=\"2、快速生成HTML结构语法\"></a>2、快速生成HTML结构语法</h3><ul>\n<li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 &lt;div&gt;&lt;/div&gt;</li>\n<li>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</li>\n<li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li>\n<li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li>\n<li>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</li>\n<li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li>\n<li>如果想要在生成的标签内部写内容可以用  { }  表示</li>\n</ul>\n<h3 id=\"3、快速生成CSS样式语法\"><a href=\"#3、快速生成CSS样式语法\" class=\"headerlink\" title=\"3、快速生成CSS样式语法\"></a>3、快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p>\n<p>​        比如 w200   按tab  可以 生成  width: 200px;</p>\n<p>​        比如 lh26px   按tab  可以生成  line-height: 26px;</p>\n<h3 id=\"4、快速格式化代码\"><a href=\"#4、快速格式化代码\" class=\"headerlink\" title=\"4、快速格式化代码\"></a>4、快速格式化代码</h3><p>Vscode  快速格式化代码:   shift+alt+f</p>\n<p>也可以设置 当我们 保存页面的时候自动格式化代码:</p>\n<p>1）文件 ——.&gt;【首选项】———-&gt;【设置】；</p>\n<p>2）搜索emmet.include;</p>\n<p>3）在settings.json下的【工作区设置】中添加以下语句：</p>\n<p>​        “editor.formatOnType”: true,</p>\n<p>​        “editor.formatOnSave”: true</p>\n<h2 id=\"六、css的复合选择器\"><a href=\"#六、css的复合选择器\" class=\"headerlink\" title=\"六、css的复合选择器\"></a>六、css的复合选择器</h2><h3 id=\"1、什么是复合选择器？\"><a href=\"#1、什么是复合选择器？\" class=\"headerlink\" title=\"1、什么是复合选择器？\"></a>1、什么是复合选择器？</h3><p>​        在 CSS 中，可以根据选择器的类型把选择器分为<em><strong>基础选择器</strong></em>和<em><strong>复合选择器</strong></em>，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。<br>​        复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签）<br>​        常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器</strong>等等</p>\n<h3 id=\"2、后代选择器-重要）\"><a href=\"#2、后代选择器-重要）\" class=\"headerlink\" title=\"2、后代选择器 (重要）\"></a>2、后代选择器 (重要）</h3><p><strong>定义：</strong></p>\n<p>​        后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>\n<p><strong>语法：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/01.png\" class width=\"1570867555401\">\n\n<p>​        上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。</p>\n<p><strong>语法说明</strong>：</p>\n<ul>\n<li>元素1 和 元素2 中间用空格隔开</li>\n<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>\n<li>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li>\n<li>元素1 和 元素2 可以是任意基础选择器</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/02.png\" class width=\"1570867652832\">\n\n<h3 id=\"3、子选择器-重要）\"><a href=\"#3、子选择器-重要）\" class=\"headerlink\" title=\"3、子选择器 (重要）\"></a>3、子选择器 (重要）</h3><p><strong>定义：</strong></p>\n<p>​        子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。</p>\n<p>​        （简单理解就是选亲儿子元素）</p>\n<p><strong>语法：</strong></p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/03.png\">\n\n<p>​        上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。</p>\n<p><strong>语法说明</strong>：</p>\n<ul>\n<li>元素1 和 元素2 中间用 大于号 隔开</li>\n<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>\n<li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/04.png\" class width=\"1570867652832\">\n\n<h3 id=\"4、并集选择器-重要）\"><a href=\"#4、并集选择器-重要）\" class=\"headerlink\" title=\"4、并集选择器 (重要）\"></a>4、并集选择器 (重要）</h3><p><strong>定义：</strong></p>\n<p>​        并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明。并集选择器是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p>\n<p><strong>语法：</strong></p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/05.png\">\n\n<p>​        上述语法表示选择元素1 和 元素2。</p>\n<p><strong>语法说明</strong>：</p>\n<ul>\n<li>元素1 和 元素2 中间用逗号隔开</li>\n<li>逗号可以理解为和的意思</li>\n<li>并集选择器通常用于集体声明</li>\n</ul>\n<p><strong>例子：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/06.png\" class width=\"1570867652832\">\n\n<h3 id=\"5、伪类选择器\"><a href=\"#5、伪类选择器\" class=\"headerlink\" title=\"5、伪类选择器\"></a>5、伪类选择器</h3><p><strong>定义：</strong></p>\n<p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>\n<p><strong>语法：</strong></p>\n<p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p>\n<h3 id=\"6、链接伪类选择器\"><a href=\"#6、链接伪类选择器\" class=\"headerlink\" title=\"6、链接伪类选择器\"></a>6、链接伪类选择器</h3><p><strong>定义：</strong></p>\n<p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>\n<p><strong>语法：</strong></p>\n<p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p>\n<p>​        a:link    没有点击过的(访问过的)链接<br>​        a:visited    点击过的(访问过的)链接<br>​        a:hover    鼠标经过的那个链接<br>​        a:active    鼠标正在按下还没有弹起鼠标的那个链接</p>\n<p><strong>链接伪类选择器注意事项</strong></p>\n<p>​        为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。</p>\n<p>​        记忆法：love hate 或者 lv 包包 hao 。</p>\n<p>​        因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</p>\n<p><strong>链接伪类选择器实际工作开发中的写法</strong>：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570868845786.png\" class width=\"1570868845786\">\n\n\n\n<h3 id=\"7、-focus-伪类选择器\"><a href=\"#7、-focus-伪类选择器\" class=\"headerlink\" title=\"7、:focus 伪类选择器\"></a>7、:focus 伪类选择器</h3><p><strong>定义：</strong></p>\n<p>​        :focus 伪类选择器用于选取获得焦点的表单元素。</p>\n<p>​        焦点就是光标，一般情况 &lt;input&gt; 类表单元素才能获取</p>\n<p>例子：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570868891669.png\" class width=\"1570868891669\">\n\n\n\n<h3 id=\"复合选择器总结\"><a href=\"#复合选择器总结\" class=\"headerlink\" title=\"复合选择器总结\"></a>复合选择器总结</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570868930472.png\" class width=\"1570868930472\">\n\n<h2 id=\"七、css的显示模式\"><a href=\"#七、css的显示模式\" class=\"headerlink\" title=\"七、css的显示模式\"></a>七、css的显示模式</h2><h3 id=\"1、什么是元素的显示模式\"><a href=\"#1、什么是元素的显示模式\" class=\"headerlink\" title=\"1、什么是元素的显示模式\"></a>1、什么是元素的显示模式</h3><p><strong>定义：</strong></p>\n<p>​        元素显示模式就是元素（标签）以什么方式进行显示，比如&lt;div&gt;自己占一行，比如一行可以放多个&lt;span&gt;。</p>\n<p><strong>作用：</strong></p>\n<p>​        网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p>\n<h3 id=\"2、元素显示模式的分类\"><a href=\"#2、元素显示模式的分类\" class=\"headerlink\" title=\"2、元素显示模式的分类\"></a>2、元素显示模式的分类</h3><h4 id=\"2-1、块元素\"><a href=\"#2-1、块元素\" class=\"headerlink\" title=\"2.1、块元素\"></a>2.1、块元素</h4><p><strong>常见的块元素</strong>：</p>\n<pre><code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;\n</code></pre>\n<p>​        &lt;div&gt; 标签是最典型的块元素。</p>\n<p><strong>块级元素的特点</strong>：</p>\n<ul>\n<li>比较霸道，自己独占一行。</li>\n<li>高度，宽度、外边距以及内边距都可以控制。</li>\n<li>宽度默认是容器（父级宽度）的100%。</li>\n<li>是一个容器及盒子，里面可以放行内或者块级元素。</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>​        文字类的元素内不能放块级元素</p>\n<pre><code>&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放&lt;div&gt; \n同理， &lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素\n</code></pre>\n<h4 id=\"2-2、行内元素\"><a href=\"#2-2、行内元素\" class=\"headerlink\" title=\"2.2、行内元素\"></a>2.2、行内元素</h4><p><strong>常见的行内元素：</strong></p>\n<pre><code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;\n</code></pre>\n<p>​        &lt;span&gt; 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p>\n<p><strong>行内元素的特点：</strong></p>\n<ul>\n<li><p>相邻行内元素在一行上，一行可以显示多个。</p>\n</li>\n<li><p>高、宽直接设置是无效的。</p>\n</li>\n<li><p>默认宽度就是它本身内容的宽度。</p>\n</li>\n<li><p>行内元素只能容纳文本或其他行内元素。</p>\n</li>\n</ul>\n<p><strong>注意：</strong><br>        链接里面不能再放链接<br>        特殊情况链接 &lt;a&gt; 里面可以放块级元素，但是给 &lt;a&gt; 转换一下块级模式最安全</p>\n<h4 id=\"2-3、行内块元素\"><a href=\"#2-3、行内块元素\" class=\"headerlink\" title=\"2.3、行内块元素\"></a>2.3、行内块元素</h4><p><strong>常见的行内块标签</strong>：</p>\n<pre><code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;\n</code></pre>\n<p>​        它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p>\n<p><strong>行内块元素的特点</strong>：</p>\n<ul>\n<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li>\n<li>一行可以显示多个（行内元素特点）。</li>\n<li>默认宽度就是它本身内容的宽度（行内元素特点）。</li>\n<li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li>\n</ul>\n<h4 id=\"2-4、元素显示模式总结\"><a href=\"#2-4、元素显示模式总结\" class=\"headerlink\" title=\"2.4、元素显示模式总结\"></a>2.4、元素显示模式总结</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570870718415.png\" class width=\"1570870718415\">\n\n<p>​        学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</p>\n<h3 id=\"3、元素显示模式的转换\"><a href=\"#3、元素显示模式的转换\" class=\"headerlink\" title=\"3、元素显示模式的转换\"></a>3、元素显示模式的转换</h3><p><strong>简单理解</strong>: </p>\n<p>​        一个模式的元素需要另外一种模式的特性<br>​        比如想要增加链接 &lt;a&gt; 的触发范围。   </p>\n<p><strong>转换方式</strong></p>\n<ul>\n<li>转换为块元素：display:block;</li>\n<li>转换为行内元素：display:inline;</li>\n<li>转换为行内块：display: inline-block;</li>\n</ul>\n<h3 id=\"4、单行文字垂直居中的代码\"><a href=\"#4、单行文字垂直居中的代码\" class=\"headerlink\" title=\"4、单行文字垂直居中的代码\"></a>4、单行文字垂直居中的代码</h3><p><strong>解决方案</strong>:    </p>\n<p>​        让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570870368253.png\" class width=\"1570870368253\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570870387089.png\" class width=\"1570870387089\">\n\n\n\n<p><strong>简单理解</strong>: </p>\n<p>​        行高的上空隙和下空隙把文字挤到中间了，</p>\n<p>​        如果行高小于盒子高度,文字会偏上，</p>\n<p>​        如果行高大于盒子高度,则文字偏下。</p>\n<h2 id=\"八、css的背景\"><a href=\"#八、css的背景\" class=\"headerlink\" title=\"八、css的背景\"></a>八、css的背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>\n<h3 id=\"1、背景颜色\"><a href=\"#1、背景颜色\" class=\"headerlink\" title=\"1、背景颜色\"></a>1、背景颜色</h3><p><strong>样式名称</strong>：</p>\n<p>​        background-color 定义元素的背景颜色</p>\n<p><strong>使用方式</strong>：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886137899.png\" class width=\"1570886137899\">\n\n<p><strong>其他说明</strong>：</p>\n<p>​        元素背景颜色默认值是 transparent（透明）</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886176292.png\" class width=\"1570886176292\">\n\n<h3 id=\"2、背景图片\"><a href=\"#2、背景图片\" class=\"headerlink\" title=\"2、背景图片\"></a>2、背景图片</h3><p><strong>样式名称</strong>：</p>\n<p>​        background-image  定义元素的背景图片</p>\n<p><strong>使用方式</strong>：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886322557.png\" class width=\"1570886322557\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886362813.png\" class width=\"1570886362813\">\n\n<p><strong>其他说明</strong>：</p>\n<p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p>\n<p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p>\n<h3 id=\"3、背景平铺\"><a href=\"#3、背景平铺\" class=\"headerlink\" title=\"3、背景平铺\"></a>3、背景平铺</h3><p><strong>样式名称：</strong></p>\n<p>​        background-repeat 设置元素背景图像的平铺 </p>\n<p><strong>使用方式：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886648887.png\" class width=\"1570886648887\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886688306.png\" class width=\"1570886688306\">\n\n<h3 id=\"4、背景图片位置\"><a href=\"#4、背景图片位置\" class=\"headerlink\" title=\"4、背景图片位置\"></a>4、背景图片位置</h3><p><strong>样式名称：</strong></p>\n<p>​        background-position 属性可以改变图片在背景中的位置</p>\n<p><strong>使用方式：</strong></p>\n<p>​        <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570886973530.png\" class width=\"1570886973530\"></p>\n<p>​        参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887034135.png\" class width=\"1570887034135\">\n\n<p><strong>其他说明：</strong></p>\n<p>1、参数是方位名词</p>\n<p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p>\n<p>​        如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p>\n<p>2、参数是精确单位</p>\n<p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p>\n<p>​        如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</p>\n<p>3、参数是混合单位</p>\n<p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p>\n<h3 id=\"5、背景图片固定\"><a href=\"#5、背景图片固定\" class=\"headerlink\" title=\"5、背景图片固定\"></a>5、背景图片固定</h3><p><strong>样式名称：</strong></p>\n<p>​        background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p>\n<p><strong>使用方式：</strong></p>\n<p>​        <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887652404.png\" class width=\"1570887652404\"></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887699177.png\" class width=\"1570887699177\">\n\n<p><strong>其他说明：</strong></p>\n<p>​        background-attachment 后期可以制作视差滚动的效果。</p>\n<h3 id=\"6、背景样式合写\"><a href=\"#6、背景样式合写\" class=\"headerlink\" title=\"6、背景样式合写\"></a>6、背景样式合写</h3><p><strong>背景合写样式：</strong></p>\n<p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>\n<p><strong>使用方式：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887809455.png\" class width=\"1570887809455\">\n\n<h3 id=\"7、背景色半透明\"><a href=\"#7、背景色半透明\" class=\"headerlink\" title=\"7、背景色半透明\"></a>7、背景色半透明</h3><p>CSS3 提供了背景颜色半透明的效果。 </p>\n<p><strong>使用方式：</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570887978061.png\" class width=\"1570887978061\">\n\n<ul>\n<li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li>\n<li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li>\n</ul>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>\n<li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</li>\n</ul>\n<h3 id=\"8、背景总结\"><a href=\"#8、背景总结\" class=\"headerlink\" title=\"8、背景总结\"></a>8、背景总结</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1570888283511.png\" class width=\"1570888283511\">\n\n\n\n<h2 id=\"九、css三大特性\"><a href=\"#九、css三大特性\" class=\"headerlink\" title=\"九、css三大特性\"></a>九、css三大特性</h2><h3 id=\"1、层叠性\"><a href=\"#1、层叠性\" class=\"headerlink\" title=\"1、层叠性\"></a>1、层叠性</h3><p>​        相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p>\n<p>​        层叠性原则:</p>\n<ul>\n<li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>\n<li>样式不冲突，不会层叠</li>\n</ul>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571490015544.png\" class width=\"1571490015544\">\n\n<h3 id=\"2、继承性\"><a href=\"#2、继承性\" class=\"headerlink\" title=\"2、继承性\"></a>2、继承性</h3><p>​        CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571490049279.png\" class width=\"1571490049279\">\n\n\n\n<p>子元素可以继承父元素的样式：</p>\n<p>​    （text-，font-，line-这些元素开头的可以继承，以及color属性）</p>\n<p>继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞</p>\n<p>行高的继承性：</p>\n<pre><code class=\"css\"> body &#123;\n   font:12px/1.5 Microsoft YaHei；\n &#125;\n</code></pre>\n<ul>\n<li>行高可以跟单位也可以不跟单位</li>\n<li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li>\n<li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li>\n<li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li>\n</ul>\n<h3 id=\"3、优先级\"><a href=\"#3、优先级\" class=\"headerlink\" title=\"3、优先级\"></a>3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p>\n<ul>\n<li>选择器相同，则执行层叠性</li>\n<li>选择器不同，则根据选择器权重执行</li>\n</ul>\n<p>选择器优先级计算表格：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571490129794.png\" class width=\"1571490129794\">\n\n\n\n<p>优先级注意点:</p>\n<ol>\n<li><p>权重是有4组数字组成,但是不会有进位。</p>\n</li>\n<li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p>\n</li>\n<li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p>\n</li>\n<li><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p>\n</li>\n<li><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p>\n</li>\n</ol>\n<p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p>\n<ul>\n<li>div ul  li   ——&gt;      0,0,0,3</li>\n<li>.nav ul li   ——&gt;      0,0,1,2</li>\n<li>a:hover      —–—&gt;   0,0,1,1</li>\n<li>.nav a       ——&gt;      0,0,1,1</li>\n</ul>\n<h2 id=\"十、盒子模型\"><a href=\"#十、盒子模型\" class=\"headerlink\" title=\"十、盒子模型\"></a>十、盒子模型</h2><h3 id=\"1、网页布局的本质\"><a href=\"#1、网页布局的本质\" class=\"headerlink\" title=\"1、网页布局的本质\"></a>1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571492334739.png\" class width=\"1571492334739\">\n\n<p>网页布局过程：</p>\n<ol>\n<li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li>\n<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>\n<li>往盒子里面装内容</li>\n</ol>\n<h3 id=\"2、盒子模型（Box-Model）组成\"><a href=\"#2、盒子模型（Box-Model）组成\" class=\"headerlink\" title=\"2、盒子模型（Box Model）组成\"></a>2、盒子模型（Box Model）组成</h3><p>​        盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>\n<p>​        CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571492536942.png\" class width=\"1571492536942\">\n\n<h3 id=\"3、边框（border）\"><a href=\"#3、边框（border）\" class=\"headerlink\" title=\"3、边框（border）\"></a>3、边框（border）</h3><h4 id=\"3-1、边框的使用\"><a href=\"#3-1、边框的使用\" class=\"headerlink\" title=\"3.1、边框的使用\"></a>3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p>\n<p>2、语法：</p>\n<pre><code class=\"css\"> border : border-width || border-style || border-color;   \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571492659260.png\" class width=\"1571492659260\">\n\n<p>边框样式 border-style 可以设置如下值：</p>\n<ul>\n<li>none：没有边框即忽略所有边框的宽度（默认值）</li>\n<li>solid：边框为单实线(最为常用的)</li>\n<li>dashed：边框为虚线  </li>\n<li>dotted：边框为点线</li>\n</ul>\n<p>3、边框的合写分写</p>\n<p>边框简写：</p>\n<pre><code class=\"css\"> border: 1px solid red;  \n</code></pre>\n<p>边框分开写法：</p>\n<pre><code class=\"css\"> border-top: 1px solid red;  /* 只设定上边框， 其余同理 */   \n</code></pre>\n<h4 id=\"3-2、表格的细线边框\"><a href=\"#3-2、表格的细线边框\" class=\"headerlink\" title=\"3.2、表格的细线边框\"></a>3.2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>\n<p>2、语法：</p>\n<pre><code class=\"css\"> border-collapse:collapse; \n</code></pre>\n<p>collapse 单词是合并的意思</p>\n<p>border-collapse: collapse; 表示相邻边框合并在一起</p>\n<h4 id=\"3-3、边框会影响盒子实际大小\"><a href=\"#3-3、边框会影响盒子实际大小\" class=\"headerlink\" title=\"3.3、边框会影响盒子实际大小\"></a>3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p>\n<ul>\n<li>测量盒子大小的时候,不量边框。</li>\n<li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li>\n</ul>\n<h3 id=\"4、内边距（padding）\"><a href=\"#4、内边距（padding）\" class=\"headerlink\" title=\"4、内边距（padding）\"></a>4、内边距（padding）</h3><h4 id=\"4-1、内边距的使用方式\"><a href=\"#4-1、内边距的使用方式\" class=\"headerlink\" title=\"4.1、内边距的使用方式\"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p>\n<p>2、语法：</p>\n<p>合写属性：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571493298248.png\" class width=\"1571493298248\">\n\n<p>分写属性：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571493260536.png\" class width=\"1571493260536\">\n\n<h4 id=\"4-2、内边距会影响盒子实际大小\"><a href=\"#4-2、内边距会影响盒子实际大小\" class=\"headerlink\" title=\"4.2、内边距会影响盒子实际大小\"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>\n<ol>\n<li>内容和边框有了距离，添加了内边距。</li>\n<li>padding影响了盒子实际大小。</li>\n</ol>\n<p>2、内边距对盒子大小的影响：</p>\n<ul>\n<li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li>\n<li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li>\n</ul>\n<p>3、解决方案：</p>\n<p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p>\n<h3 id=\"5、外边距（margin）\"><a href=\"#5、外边距（margin）\" class=\"headerlink\" title=\"5、外边距（margin）\"></a>5、外边距（margin）</h3><h4 id=\"5-1、外边距的使用方式\"><a href=\"#5-1、外边距的使用方式\" class=\"headerlink\" title=\"5.1、外边距的使用方式\"></a>5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571493741272.png\" class width=\"1571493741272\">\n\n<h4 id=\"5-2、外边距典型应用\"><a href=\"#5-2、外边距典型应用\" class=\"headerlink\" title=\"5.2、外边距典型应用\"></a>5.2、外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p>\n<ul>\n<li>盒子必须指定了宽度（width）。</li>\n<li>盒子左右的外边距都设置为 auto 。</li>\n</ul>\n<p>常见的写法，以下三种都可以：</p>\n<pre><code class=\"css\">margin-left: auto;   margin-right: auto;\nmargin: auto;\nmargin: 0 auto;\n</code></pre>\n<p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>\n<h4 id=\"5-3、外边距合并\"><a href=\"#5-3、外边距合并\" class=\"headerlink\" title=\"5.3、外边距合并\"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>\n<p>主要有两种情况:</p>\n<p>1、相邻块元素垂直外边距的合并</p>\n<p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571494239103.png\" class width=\"1571494239103\">\n\n<p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p>\n<p>2、嵌套块元素垂直外边距的塌陷</p>\n<p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571494373778.png\" class width=\"1571494373778\">\n\n<p>解决方案：</p>\n<ul>\n<li>可以为父元素定义上边框。</li>\n<li>可以为父元素定义上内边距。</li>\n<li>可以为父元素添加 overflow:hidden。</li>\n</ul>\n<h4 id=\"5-4、清除内外边距\"><a href=\"#5-4、清除内外边距\" class=\"headerlink\" title=\"5.4、清除内外边距\"></a>5.4、清除内外边距</h4><p>​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p>\n<pre><code class=\"css\"> * &#123;\n    padding:0;   /* 清除内边距 */\n    margin:0;    /* 清除外边距 */\n  &#125;\n</code></pre>\n<p>​        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>\n<h2 id=\"十一、css的其他样式\"><a href=\"#十一、css的其他样式\" class=\"headerlink\" title=\"十一、css的其他样式\"></a>十一、css的其他样式</h2><h3 id=\"1、圆角边框\"><a href=\"#1、圆角边框\" class=\"headerlink\" title=\"1、圆角边框\"></a>1、圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>\n<p>border-radius 属性用于设置元素的外边框圆角。</p>\n<p>语法：</p>\n<pre><code class=\"css\"> border-radius:length;    \n</code></pre>\n<ul>\n<li>参数值可以为数值或百分比的形式</li>\n<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>\n<li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li>\n<li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li>\n<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li>\n</ul>\n<h3 id=\"2、盒子阴影\"><a href=\"#2、盒子阴影\" class=\"headerlink\" title=\"2、盒子阴影\"></a>2、盒子阴影</h3><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。<br>语法：</p>\n<pre><code class=\"css\"> box-shadow: h-shadow v-shadow blur spread color inset; \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571541874805.png\" class width=\"1571541874805\">\n\n<h3 id=\"3、文字阴影\"><a href=\"#3、文字阴影\" class=\"headerlink\" title=\"3、文字阴影\"></a>3、文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p>\n<pre><code class=\"css\"> text-shadow: h-shadow v-shadow blur color;\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571541954222.png\" class width=\"1571541954222\">\n\n<h2 id=\"十二、浮动\"><a href=\"#十二、浮动\" class=\"headerlink\" title=\"十二、浮动\"></a>十二、浮动</h2><h3 id=\"1、传统网页布局的三种方式\"><a href=\"#1、传统网页布局的三种方式\" class=\"headerlink\" title=\"1、传统网页布局的三种方式\"></a>1、传统网页布局的三种方式</h3><p>​    CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>\n<ul>\n<li><p>普通流（标准流）</p>\n</li>\n<li><p>浮动</p>\n</li>\n<li><p>定位</p>\n<p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>\n</li>\n</ul>\n<p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>\n<h3 id=\"2、标准流（普通流-文档流）\"><a href=\"#2、标准流（普通流-文档流）\" class=\"headerlink\" title=\"2、标准流（普通流/文档流）\"></a>2、标准流（普通流/文档流）</h3><p>所谓的标准流:  就是标签按照规定好默认方式排列</p>\n<ol>\n<li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>\n<li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 </li>\n</ol>\n<p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>\n<h3 id=\"3、为什么需要浮动？\"><a href=\"#3、为什么需要浮动？\" class=\"headerlink\" title=\"3、为什么需要浮动？\"></a>3、为什么需要浮动？</h3><p>​        总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>\n<p>​        浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>\n<p>​        网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p>\n<h3 id=\"4、什么是浮动？\"><a href=\"#4、什么是浮动？\" class=\"headerlink\" title=\"4、什么是浮动？\"></a>4、什么是浮动？</h3><p>​        float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>\n<p>语法：</p>\n<pre><code class=\"css\"> 选择器 &#123; float: 属性值; &#125;\n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571543209934.png\" class width=\"1571543209934\">\n\n\n\n<h3 id=\"5、浮动特性\"><a href=\"#5、浮动特性\" class=\"headerlink\" title=\"5、浮动特性\"></a>5、浮动特性</h3><p>加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>\n<p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571544664994.png\" class width=\"1571544664994\">\n\n<p>2、浮动的元素会一行内显示并且元素顶部对齐</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571544725757.png\" class width=\"1571544725757\">\n\n<p>注意： </p>\n<p>​        浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p>\n<p>3、浮动的元素会具有行内块元素的特性</p>\n<p>​        浮动元素的大小根据内容来决定</p>\n<p>​        浮动的盒子中间是没有缝隙的</p>\n<h3 id=\"6、浮动元素经常和标准流父级搭配使用\"><a href=\"#6、浮动元素经常和标准流父级搭配使用\" class=\"headerlink\" title=\"6、浮动元素经常和标准流父级搭配使用\"></a>6、浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>\n<p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571544991989.png\" class width=\"1571544991989\">\n\n<h2 id=\"十三、常见网页布局\"><a href=\"#十三、常见网页布局\" class=\"headerlink\" title=\"十三、常见网页布局\"></a>十三、常见网页布局</h2><h3 id=\"浮动布局注意点\"><a href=\"#浮动布局注意点\" class=\"headerlink\" title=\"浮动布局注意点\"></a>浮动布局注意点</h3><p>1、浮动和标准流的父盒子搭配。</p>\n<p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p>\n<p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>\n<p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p>\n<p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</p>\n<h2 id=\"十四、清除浮动\"><a href=\"#十四、清除浮动\" class=\"headerlink\" title=\"十四、清除浮动\"></a>十四、清除浮动</h2><h3 id=\"1、为什么需要清除浮动？\"><a href=\"#1、为什么需要清除浮动？\" class=\"headerlink\" title=\"1、为什么需要清除浮动？\"></a>1、为什么需要清除浮动？</h3><p>​        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571555883628.png\" class width=\"1571555883628\">\n\n<h3 id=\"2、清除浮动本质\"><a href=\"#2、清除浮动本质\" class=\"headerlink\" title=\"2、清除浮动本质\"></a>2、清除浮动本质</h3><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p>\n<p>注意：</p>\n<ul>\n<li>如果父盒子本身有高度，则不需要清除浮动</li>\n<li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li>\n<li>父级有了高度，就不会影响下面的标准流了</li>\n</ul>\n<h3 id=\"3、清除浮动样式\"><a href=\"#3、清除浮动样式\" class=\"headerlink\" title=\"3、清除浮动样式\"></a>3、清除浮动样式</h3><p>语法：</p>\n<pre><code class=\"css\"> 选择器&#123;clear:属性值;&#125; \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571555980419.png\" class width=\"1571555980419\">\n\n<p>我们实际工作中， 几乎只用 clear: both;</p>\n<p>清除浮动的策略是:  闭合浮动. </p>\n<h3 id=\"4、清除浮动的多种方式\"><a href=\"#4、清除浮动的多种方式\" class=\"headerlink\" title=\"4、清除浮动的多种方式\"></a>4、清除浮动的多种方式</h3><h4 id=\"4-1、额外标签法\"><a href=\"#4-1、额外标签法\" class=\"headerlink\" title=\"4.1、额外标签法\"></a>4.1、额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>\n<p>使用方式：</p>\n<p>​        额外标签法会在浮动元素末尾添加一个空的标签。</p>\n<pre><code class=\"html\">例如 &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;，或者其他标签（如&lt;br /&gt;等）。\n</code></pre>\n<p>​        优点： 通俗易懂，书写方便</p>\n<p>​        缺点： 添加许多无意义的标签，结构化较差</p>\n<p>​        注意： 要求这个新的空标签必须是块级元素。</p>\n<p>总结:</p>\n<p>​    1、清除浮动本质是?</p>\n<p>​            清除浮动的本质是清除浮动元素脱离标准流造成的影响</p>\n<p>​    2、清除浮动策略是?</p>\n<p>​            闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</p>\n<p>​    3、额外标签法?</p>\n<p>​            隔墙法, 就是在最后一个浮动的子元素后面添</p>\n<p>​    4、加一个额外标签, 添加 清除浮动样式.</p>\n<p>​            实际工作可能会遇到,但是不常用</p>\n<h4 id=\"4-2、父级添加-overflow-属性\"><a href=\"#4-2、父级添加-overflow-属性\" class=\"headerlink\" title=\"4.2、父级添加 overflow 属性\"></a>4.2、父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p>\n<p>例如：</p>\n<pre><code class=\"css\">overflow:hidden | auto | scroll;\n</code></pre>\n<p>优点：代码简洁</p>\n<p>缺点：无法显示溢出的部分</p>\n<p>注意：是给父元素添加代码</p>\n<h4 id=\"4-3、父级添加after伪元素\"><a href=\"#4-3、父级添加after伪元素\" class=\"headerlink\" title=\"4.3、父级添加after伪元素\"></a>4.3、父级添加after伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p>\n<pre><code class=\"css\"> .clearfix:after &#123;  \n   content: &quot;&quot;; \n   display: block; \n   height: 0; \n   clear: both; \n   visibility: hidden;  \n &#125; \n .clearfix &#123;  /* IE6、7 专有 */ \n   *zoom: 1;\n &#125;   \n</code></pre>\n<p>优点：没有增加标签，结构更简单</p>\n<p>缺点：照顾低版本浏览器</p>\n<p>代表网站： 百度、淘宝网、网易等</p>\n<h4 id=\"4-4、父级添加双伪元素\"><a href=\"#4-4、父级添加双伪元素\" class=\"headerlink\" title=\"4.4、父级添加双伪元素\"></a>4.4、父级添加双伪元素</h4><p>给父元素添加</p>\n<pre><code class=\"css\"> .clearfix:before,.clearfix:after &#123;   content:&quot;&quot;;   display:table;  &#125; .clearfix:after &#123;   clear:both; &#125; .clearfix &#123;    *zoom:1; &#125;   \n</code></pre>\n<p>优点：代码更简洁</p>\n<p>缺点：照顾低版本浏览器</p>\n<p>代表网站：小米、腾讯等</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为什么需要清除浮动？</p>\n<ol>\n<li>父级没高度。</li>\n<li>子盒子浮动了。</li>\n<li>影响下面布局了，我们就应该清除浮动了。</li>\n</ol>\n<p>![1571556500074](../../../../../Personal Files/leetcode/资料/阶段一：前端开发基础资料/02-CSS资料/06-前端基础CSS第四天（14-16小节）/笔记/images/1571556500074.png)</p>\n<h2 id=\"十五、PS-切图\"><a href=\"#十五、PS-切图\" class=\"headerlink\" title=\"十五、PS 切图\"></a>十五、PS 切图</h2><h3 id=\"1、图层切图\"><a href=\"#1、图层切图\" class=\"headerlink\" title=\"1、图层切图\"></a>1、图层切图</h3><pre><code class=\"html\">最简单的切图方式：右击图层 → 导出 → 切片。\n</code></pre>\n<h3 id=\"2、切片切图\"><a href=\"#2、切片切图\" class=\"headerlink\" title=\"2、切片切图\"></a>2、切片切图</h3><p>2.1、利用切片选中图片</p>\n<pre><code> 利用切片工具手动划出\n</code></pre>\n<p>2.2、导出选中的图片</p>\n<pre><code class=\"html\">文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。\n</code></pre>\n<h3 id=\"3、PS插件切图\"><a href=\"#3、PS插件切图\" class=\"headerlink\" title=\"3、PS插件切图\"></a>3、PS插件切图</h3><p>​        Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</p>\n<p>官网：<a href=\"http://www.cutterman.cn/zh/cutterman\">http://www.cutterman.cn/zh/cutterman</a></p>\n<p>注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。</p>\n<h2 id=\"1-PS-切图\"><a href=\"#1-PS-切图\" class=\"headerlink\" title=\"1. PS 切图\"></a>1. PS 切图</h2><h3 id=\"1-1-常见的图片格式\"><a href=\"#1-1-常见的图片格式\" class=\"headerlink\" title=\"1.1. 常见的图片格式\"></a>1.1. 常见的图片格式</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>格式</th>\n<th>特点和常用的用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>jpg</td>\n<td>JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们<strong>产品类的图片</strong> 经常用jpg格式的</td>\n</tr>\n<tr>\n<td>2</td>\n<td>gif</td>\n<td>GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 <strong>经常用于一些图片小动画效果</strong></td>\n</tr>\n<tr>\n<td>3</td>\n<td>png</td>\n<td>png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 <strong>背景透明的图片</strong> ,请选择png格式.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>psd</td>\n<td>PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. <strong>对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离</strong>.</td>\n</tr>\n</tbody></table>\n<p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 </p>\n<h3 id=\"1-2-图层切图\"><a href=\"#1-2-图层切图\" class=\"headerlink\" title=\"1.2. 图层切图\"></a>1.2. 图层切图</h3><p>简单版步骤：</p>\n<p>​    ① 使用<strong>移动工具</strong>，点击需要的图片</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571299959992.png\" class width=\"1571299959992\">\n\n<p>​    ② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571300150618.png\" class width=\"1571300150618\">\n\n\n\n<p>但是很多情况下,我们需要合并图层再导出:</p>\n<p>步骤：</p>\n<p>​    ① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  </p>\n<p>​    ② 图层菜单 → 合并图层(ctrl+e)   </p>\n<p>​    <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571300529539.png\" class width=\"1571300529539\"></p>\n<p>​    ③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG</p>\n<h3 id=\"1-3-切片切图\"><a href=\"#1-3-切片切图\" class=\"headerlink\" title=\"1.3. 切片切图\"></a>1.3. 切片切图</h3><p>步骤：</p>\n<p>​    ① 利用切片选中图片 ：利用切片工具手动划出</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571301270696.png\" class width=\"1571301270696\"> \n\n<p>​    ② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。</p>\n<p>​    注意：保存的时候，要选“选中的切片”：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571301357818.png\" class width=\"1571301357818\"> \n\n<h3 id=\"1-4-插件切图\"><a href=\"#1-4-插件切图\" class=\"headerlink\" title=\"1.4. 插件切图\"></a>1.4. 插件切图</h3><h4 id=\"1-4-1-介绍\"><a href=\"#1-4-1-介绍\" class=\"headerlink\" title=\"1.4.1. 介绍\"></a>1.4.1. 介绍</h4><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 </p>\n<p>它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>\n<h4 id=\"1-4-2-安装\"><a href=\"#1-4-2-安装\" class=\"headerlink\" title=\"1.4.2. 安装\"></a>1.4.2. 安装</h4><p>注意： <strong>cutterman插件要求你的ps 必须是完整版</strong>，不能是绿色版，所以大家需要从新安装完整版本。</p>\n<p>查看 “窗口菜单”里面的“扩展功能”：</p>\n<p>​    ① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS</p>\n<p>​    ② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571302032310.png\" class width=\"1571302032310\">\n\n\n\n\n\n<p>官网: <a href=\"http://www.cutterman.cn/zh/cutterman\">http://www.cutterman.cn/zh/cutterman</a></p>\n<p>当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571302286467.png\" class width=\"1571302286467\">\n\n\n\n<p>1.4.3 使用步骤</p>\n<p>​    ① 选择需要的图层</p>\n<p>​    ② 选择web端，点击web下面的下拉三角</p>\n<p>​    ③ 选择需要的图片格式</p>\n<p>​    ④ 设置好存储路径</p>\n<p>​    ⑤ 点击 “导出选中图层” 按钮</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571303715362.png\" class width=\"1571303715362\"> \n\n<p>示意图：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/sample1.gif\"> \n\n\n\n\n\n<h2 id=\"十六-CSS属性书写顺序（重点）\"><a href=\"#十六-CSS属性书写顺序（重点）\" class=\"headerlink\" title=\"十六. CSS属性书写顺序（重点）\"></a>十六. CSS属性书写顺序（重点）</h2><p><strong>生活中衡量一个人有气质：</strong></p>\n<p>​    穿着打扮  举止言行  等等  </p>\n<p><strong>编程中如何衡量一个人的代码能力</strong>：</p>\n<p>​    规范标准  优雅高质量 等等   一个词形容   专业    从代码中看出是否有经验..</p>\n<p>建议遵循以下顺序：</p>\n<ol>\n<li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>\n<li><strong>自身属性</strong>：width / height / margin / padding / border / background</li>\n<li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>\n<li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>\n</ol>\n<p><strong>举例：</strong></p>\n<pre><code class=\"css\"> .jdc &#123;\n    display: block;\n    position: relative;\n    float: left;\n    width: 100px;\n    height: 100px;\n    margin: 0 10px;\n    padding: 20px 0;\n    font-family: Arial, &#39;Helvetica Neue&#39;, Helvetica, sans-serif;\n    color: #333;\n    background: rgba(0,0,0,.5);\n    border-radius: 10px;\n &#125; \n</code></pre>\n<h2 id=\"十七-学成在线页面制作\"><a href=\"#十七-学成在线页面制作\" class=\"headerlink\" title=\"十七. 学成在线页面制作\"></a>十七. 学成在线页面制作</h2><p>页面展示：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571304358699.png\" class width=\"1571304358699\">\n\n\n\n<p>学成在线，是典型的企业级网站。</p>\n<p>学习学成网的目的，是为了整体感知企业级网站布局流程，带着大家复习以前的知识。</p>\n<h3 id=\"1-前期准备素材\"><a href=\"#1-前期准备素材\" class=\"headerlink\" title=\"1.  前期准备素材\"></a>1.  前期准备素材</h3><ul>\n<li>学成在线PSD源文件</li>\n<li>开发工具  =  PS（切图） +  sublime（代码） + chrome（测试）</li>\n</ul>\n<h3 id=\"2-前期准备工作\"><a href=\"#2-前期准备工作\" class=\"headerlink\" title=\"2.  前期准备工作\"></a>2.  前期准备工作</h3><p>先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。</p>\n<ol>\n<li><p>创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。</p>\n</li>\n<li><p>用vscode打开study目录文件夹.</p>\n</li>\n<li><p>study 目录内新建 images 文件夹，用于保存图片。</p>\n</li>\n<li><p>新建首页文件 index.html（以后我们的网站<strong>首页</strong>统一命名规定为 <strong>index.html</strong> )。</p>\n</li>\n<li><p>新建 style.css 样式文件。我们本次采用外链样式表。</p>\n</li>\n<li><p>将样式引入到我们的 HTML 页面文件中。</p>\n</li>\n<li><p>样式表写入清除内外边距的样式，来检测样式表是否引入成功。</p>\n</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571305757590.png\" class width=\"1571305757590\"> \n\n<h3 id=\"3-页面布局整体思路\"><a href=\"#3-页面布局整体思路\" class=\"headerlink\" title=\"3. 页面布局整体思路\"></a>3. 页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：</p>\n<p>​    1.必须确定页面的<strong>版心</strong>（可视区），我们<strong>测量</strong>可得知。</p>\n<p>​    2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</p>\n<p>​    3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则</p>\n<p>​    4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.</p>\n<p>​    5.所以, 先理清楚<strong>布局结构</strong>,再写代码尤为重要. 这需要我们多写多积累.</p>\n<h3 id=\"4-页面制作\"><a href=\"#4-页面制作\" class=\"headerlink\" title=\"4. 页面制作\"></a>4. 页面制作</h3><p><strong>确定版心</strong>：</p>\n<p>​    这个页面的版心是 1200像素  ，每个版心都要水平居中对齐，所以，我们可以定义版心为公共类：</p>\n<pre><code class=\"css\">.w &#123;\n    width: 1200px;\n    margin: auto;\n&#125;\n</code></pre>\n<h4 id=\"4-1-header头部制作\"><a href=\"#4-1-header头部制作\" class=\"headerlink\" title=\"4.1. header头部制作\"></a>4.1. header头部制作</h4><p><strong>结构图如下：</strong></p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1.png\">\n\n<ul>\n<li>1号是版心盒子 <strong>header</strong>  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。</li>\n<li>版心盒子 里面包含 2号盒子 <strong>logo</strong> 图标</li>\n<li>版心盒子 里面包含 3号盒子 <strong>nav</strong> 导航栏</li>\n<li>版心盒子 里面包含 4号盒子 <strong>search</strong> 搜索框</li>\n<li>版心盒子 里面包含 5号盒子 <strong>user</strong> 个人信息</li>\n<li>注意，要求里面的 <strong>4个子盒子 必须都浮动</strong></li>\n</ul>\n<p><strong>导航栏注意点:</strong></p>\n<p>实际开发中，<strong>重要的导航栏</strong>，我们不会直接用链接a ，而是<strong>用 li  包含链接(li+a)的做法</strong></p>\n<p>​    1.li+a 语义更清晰，一看这就是有条理的列表型内容。</p>\n<p>​    2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</p>\n<p><strong>注意:</strong> </p>\n<p>​    1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</p>\n<p>​    2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字</p>\n<p>​    3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 </p>\n<p><strong>4号盒子search的细节：</strong></p>\n<p>​    search 搜索框的意思:  一个 search 大盒子里面包含 2个 表单</p>\n<p>​    技巧：input和button都，属于行内块元素，会有缝隙，使用浮动，可以去缝隙。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571307430101.png\" class width=\"1571307430101\">\n\n<h4 id=\"4-2-banner制作\"><a href=\"#4-2-banner制作\" class=\"headerlink\" title=\"4.2. banner制作\"></a>4.2. banner制作</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571314623135.png\" class width=\"1571314623135\">\n\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/2.png\">\n\n\n\n<ul>\n<li>1号盒子是通栏的大盒子<strong>banner</strong>， 不给宽度，给高度，给一个蓝色背景。</li>\n<li>2号盒子是版心 <strong>w</strong>， 要水平居中对齐。</li>\n<li>3号盒子版心内，左对齐 <strong>subnav</strong> 侧导航栏。</li>\n<li>4号盒子版心内，右对齐  <strong>course</strong> 课程。</li>\n</ul>\n<h5 id=\"4-2-1-subnav-侧导航栏-左侧的\"><a href=\"#4-2-1-subnav-侧导航栏-左侧的\" class=\"headerlink\" title=\"4.2.1  subnav 侧导航栏 (左侧的)\"></a>4.2.1  subnav 侧导航栏 (左侧的)</h5><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571314874385.png\" class width=\"1571314874385\">   \n\n<ul>\n<li>subnav 盒子 背景色 黑色半透明</li>\n<li>重要的导航栏，li 包 a ，行高45px</li>\n<li>a里面包含文字和span，span右浮动</li>\n<li>当鼠标经过a ，a里面的内容（文字和span）变蓝色</li>\n</ul>\n<h5 id=\"4-2-2-course课程表模块-右侧的\"><a href=\"#4-2-2-course课程表模块-右侧的\" class=\"headerlink\" title=\"4.2.2  course课程表模块 (右侧的)\"></a>4.2.2  course课程表模块 (右侧的)</h5><p>结构图如下：</p>\n <img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/6.png\">\n\n<ul>\n<li>1号盒子 是  228 * 300 的盒子 右浮动  <strong>注意 浮动的元素 不会有外边距塌陷的问题</strong></li>\n<li>1号盒子内 分为 上下 两个 子盒子</li>\n<li>2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)</li>\n<li>3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)</li>\n</ul>\n<h4 id=\"4-3-精品推荐小模块\"><a href=\"#4-3-精品推荐小模块\" class=\"headerlink\" title=\"4.3. 精品推荐小模块\"></a>4.3. 精品推荐小模块</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/3.png\">\n\n<ul>\n<li><p><strong>复习点：</strong>  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color</p>\n</li>\n<li><p>大盒子水平居中 goods  精品 ，注意此处有个盒子阴影</p>\n</li>\n<li><p>1号盒子是标题 H3  左侧浮动</p>\n</li>\n<li><p>2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）</p>\n</li>\n<li><p>3号盒子 右浮动 mod 修改</p>\n</li>\n</ul>\n<h4 id=\"4-4-精品推荐大模块\"><a href=\"#4-4-精品推荐大模块\" class=\"headerlink\" title=\"4.4. 精品推荐大模块\"></a>4.4. 精品推荐大模块</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/4.png\">\n\n<ul>\n<li>1号盒子为最大的盒子 <strong>box</strong>  版心水平居中对齐</li>\n<li>2号盒子为上面部分 <strong>box-hd</strong>  – 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动</li>\n<li>3号盒子为底下部分 <strong>box-bd</strong> — 里面是无序列表 有 10个 小li 组成</li>\n<li>小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了</li>\n<li>复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。</li>\n</ul>\n<h4 id=\"4-5-底部模块制作\"><a href=\"#4-5-底部模块制作\" class=\"headerlink\" title=\"4.5.  底部模块制作\"></a>4.5.  底部模块制作</h4><p>结构图如下：</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/5.png\">\n\n<ul>\n<li><p>1号盒子通栏大盒子 底部 <strong>footer</strong>  给高度  底色是白色</p>\n</li>\n<li><p>2号盒子版心水平居中</p>\n</li>\n<li><p>3号盒子版权 <strong>copyright</strong>  左对齐 </p>\n</li>\n<li><p>4号盒子 链接组 <strong>links</strong>  右对齐</p>\n</li>\n</ul>\n<h2 id=\"十八-定位-position-介绍\"><a href=\"#十八-定位-position-介绍\" class=\"headerlink\" title=\"十八. 定位(position) 介绍\"></a>十八. 定位(position) 介绍</h2><h3 id=\"1-1-为什么使用定位\"><a href=\"#1-1-为什么使用定位\" class=\"headerlink\" title=\"1.1 为什么使用定位\"></a>1.1 为什么使用定位</h3><blockquote>\n<p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p>\n</blockquote>\n<p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/01_定位示例1.gif\">\n\n\n\n<p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/ding.png\">\n\n\n\n<blockquote>\n<p>结论<strong>：要实现以上效果，</strong>标准流 或 浮动都无法快速实现</p>\n</blockquote>\n<p>所以：</p>\n<p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p>\n<p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p>\n<h3 id=\"1-2-定位组成\"><a href=\"#1-2-定位组成\" class=\"headerlink\" title=\"1.2 定位组成\"></a>1.2 定位组成</h3><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p>\n<p>定位也是用来布局的，它有两部分组成：</p>\n<blockquote>\n<p><strong>定位 = 定位模式 + 边偏移</strong>  </p>\n</blockquote>\n<p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p>\n<h4 id=\"1-2-1-边偏移（方位名词）\"><a href=\"#1-2-1-边偏移（方位名词）\" class=\"headerlink\" title=\"1.2.1 边偏移（方位名词）\"></a>1.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p>\n<table>\n<thead>\n<tr>\n<th>边偏移属性</th>\n<th align=\"left\">示例</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>top</code></td>\n<td align=\"left\"><code>top: 80px</code></td>\n<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td align=\"left\"><code>bottom: 80px</code></td>\n<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td align=\"left\"><code>left: 80px</code></td>\n<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td align=\"left\"><code>right: 80px</code></td>\n<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>\n</tr>\n</tbody></table>\n<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>\n<h4 id=\"1-2-2-定位模式-position\"><a href=\"#1-2-2-定位模式-position\" class=\"headerlink\" title=\"1.2.2 定位模式 (position)\"></a>1.2.2 定位模式 (position)</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>\n<pre><code class=\"css\">选择器 &#123; \n    position: 属性值; \n&#125;\n</code></pre>\n<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>\n<p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th align=\"center\">语义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static</code></td>\n<td align=\"center\"><strong>静态</strong>定位</td>\n</tr>\n<tr>\n<td><code>relative</code></td>\n<td align=\"center\"><strong>相对</strong>定位</td>\n</tr>\n<tr>\n<td><code>absolute</code></td>\n<td align=\"center\"><strong>绝对</strong>定位</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td align=\"center\"><strong>固定</strong>定位</td>\n</tr>\n</tbody></table>\n <img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/26定位的概念.png\">\n\n<h3 id=\"1-3-定位模式介绍\"><a href=\"#1-3-定位模式介绍\" class=\"headerlink\" title=\"1.3 定位模式介绍\"></a>1.3 定位模式介绍</h3><h4 id=\"1-3-1-静态定位-static-了解\"><a href=\"#1-3-1-静态定位-static-了解\" class=\"headerlink\" title=\"1.3.1.  静态定位(static) - 了解\"></a>1.3.1.  静态定位(static) - 了解</h4><ul>\n<li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p>\n</li>\n<li><p>语法：</p>\n<pre><code>选择器 &#123; \n    position: static; \n&#125;\n</code></pre>\n</li>\n<li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p>\n</li>\n<li><p>静态定位在布局时我们几乎不用的 </p>\n</li>\n</ul>\n<h4 id=\"1-3-2-相对定位-relative-重要\"><a href=\"#1-3-2-相对定位-relative-重要\" class=\"headerlink\" title=\"1.3.2. 相对定位(relative) - 重要\"></a>1.3.2. 相对定位(relative) - 重要</h4><ul>\n<li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li>\n<li>语法：</li>\n</ul>\n<pre><code>选择器 &#123; \n    position: relative; \n&#125;\n</code></pre>\n<ul>\n<li><p>相对定位的特点：（务必记住）</p>\n<ul>\n<li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p>\n</li>\n<li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p>\n<p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p>\n</li>\n</ul>\n</li>\n<li><p>效果图：</p>\n</li>\n</ul>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png\" class title=\"相对定位案例\">\n\n\n\n<h4 id=\"1-3-3-绝对定位-absolute-重要\"><a href=\"#1-3-3-绝对定位-absolute-重要\" class=\"headerlink\" title=\"1.3.3. 绝对定位(absolute) - 重要\"></a>1.3.3. 绝对定位(absolute) - 重要</h4><h5 id=\"1-3-3-1-绝对定位的介绍\"><a href=\"#1-3-3-1-绝对定位的介绍\" class=\"headerlink\" title=\"1.3.3.1 绝对定位的介绍\"></a>1.3.3.1 绝对定位的介绍</h5><ul>\n<li><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p>\n</li>\n<li><p>语法：</p>\n<pre><code> 选择器 &#123; \n     position: absolute; \n &#125;\n</code></pre>\n</li>\n</ul>\n<ol>\n<li><p><strong>完全脱标</strong> —— 完全不占位置；  </p>\n</li>\n<li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/05_绝对定位_父级无定位.png\" width=\"600\"></li>\n<li><p><strong>父元素要有定位</strong></p>\n<ul>\n<li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li>\n</ul>\n</li>\n</ol>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/06_绝对定位_父级有定位.png\" width=\"600\">\n\n\n\n\n\n<ul>\n<li><p><strong>绝对定位的特点总结</strong>：（务必记住）</p>\n<p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p>\n<p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p>\n<p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p>\n</li>\n</ul>\n<h5 id=\"1-3-3-2-定位口诀-——-子绝父相\"><a href=\"#1-3-3-2-定位口诀-——-子绝父相\" class=\"headerlink\" title=\"1.3.3.2 定位口诀 —— 子绝父相\"></a>1.3.3.2 定位口诀 —— 子绝父相</h5><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>\n<p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>\n<p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p>\n<p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>\n<p>②父盒子需要加定位限制子盒子在父盒子内显示。</p>\n<p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p>\n<p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p>\n<p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p>\n<p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p>\n<p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p>\n<p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png\" class title=\"子绝父相截图\">\n\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/27子绝父相.png\">\n\n<p><strong>分析</strong>：</p>\n<ol>\n<li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li>\n<li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul>\n<li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li>\n</ul>\n</li>\n</ol>\n<p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p>\n<h4 id=\"1-3-4-固定定位-fixed-重要\"><a href=\"#1-3-4-固定定位-fixed-重要\" class=\"headerlink\" title=\"1.3.4. 固定定位(fixed) - 重要\"></a>1.3.4. 固定定位(fixed) - 重要</h4><ul>\n<li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p>\n</li>\n<li><p>语法：</p>\n<pre><code> 选择器 &#123; \n     position: fixed; \n &#125;\n</code></pre>\n</li>\n<li><p>固定定位的特点：（务必记住）：</p>\n<p>1.以浏览器的可视窗口为参照点移动元素。</p>\n<ul>\n<li>跟父元素没有任何关系</li>\n<li>不随滚动条滚动。</li>\n</ul>\n<p>2.固定定位<strong>不在占有原先的位置</strong>。</p>\n</li>\n<li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p>\n<ul>\n<li><strong>完全脱标</strong>—— 完全不占位置；</li>\n<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>\n<li>跟父元素没有任何关系；单独使用的</li>\n<li>不随滚动条滚动。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>固定定位举例：</p>\n</blockquote>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/08_%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png\" class title=\"固定定位案例\">\n\n<p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p>\n<h4 id=\"1-3-5-粘性定位-sticky-了解\"><a href=\"#1-3-5-粘性定位-sticky-了解\" class=\"headerlink\" title=\"1.3.5 粘性定位(sticky) - 了解\"></a>1.3.5 粘性定位(sticky) - 了解</h4><ul>\n<li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p>\n</li>\n<li><p>语法：</p>\n<pre><code> 选择器 &#123; \n     position: sticky; \n     top: 10px; \n &#125;\n</code></pre>\n</li>\n<li><p>粘性定位的特点：</p>\n<p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p>\n<p>2.粘性定位占有原先的位置（相对定位特点）</p>\n<p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>\n<p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>\n</li>\n</ul>\n<h4 id=\"1-3-6-定位总结\"><a href=\"#1-3-6-定位总结\" class=\"headerlink\" title=\"1.3.6 定位总结\"></a>1.3.6 定位总结</h4><table>\n<thead>\n<tr>\n<th><strong>定位模式</strong></th>\n<th><strong>是否脱标</strong></th>\n<th><strong>移动位置</strong></th>\n<th><strong>是否常用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static   静态定位</td>\n<td>否</td>\n<td>不能使用边偏移</td>\n<td>很少</td>\n</tr>\n<tr>\n<td><strong>relative 相对定位</strong></td>\n<td><strong>否 (占有位置)</strong></td>\n<td><strong>相对于自身位置移动</strong></td>\n<td><strong>基本单独使用</strong></td>\n</tr>\n<tr>\n<td><strong>absolute绝对定位</strong></td>\n<td><strong>是（不占有位置）</strong></td>\n<td><strong>带有定位的父级</strong></td>\n<td><strong>要和定位父级元素搭配使用</strong></td>\n</tr>\n<tr>\n<td><strong>fixed 固定定位</strong></td>\n<td><strong>是（不占有位置）</strong></td>\n<td><strong>浏览器可视区</strong></td>\n<td><strong>单独使用，不需要父级</strong></td>\n</tr>\n<tr>\n<td>sticky 粘性定位</td>\n<td>否   (占有位置)</td>\n<td>浏览器可视区</td>\n<td>当前阶段少</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p>\n</li>\n<li><p>学习定位重点学会子绝父相。</p>\n</li>\n<li><p>注意：</p>\n</li>\n</ul>\n<ol>\n<li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li>\n<li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li>\n<li><code>left</code> 和 <code>right</code> 不要同时使用。</li>\n</ol>\n<h2 id=\"2-综合案例：学成在线-hot-模块添加\"><a href=\"#2-综合案例：学成在线-hot-模块添加\" class=\"headerlink\" title=\"2. 综合案例：学成在线-hot  模块添加\"></a>2. 综合案例：学成在线-hot  模块添加</h2><h3 id=\"2-1-案例截图：\"><a href=\"#2-1-案例截图：\" class=\"headerlink\" title=\"2. 1 案例截图：\"></a><strong>2. 1 案例截图</strong>：</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571385860679.png\" class width=\"1571385860679\"> \n\n<h3 id=\"2-2-案例分析\"><a href=\"#2-2-案例分析\" class=\"headerlink\" title=\"2.2 案例分析\"></a>2.2 案例分析</h3><ol>\n<li>一个大的 <code>li</code> 中包含 一个课程图片，课程介绍文字信息，还有hot的小图标；</li>\n<li>hot图片<strong>重叠</strong>在课程图片上面—— 脱标，不占位置，需要使用<strong>绝对定位</strong>；</li>\n<li>hot图片<strong>重叠</strong>在<strong>li的右上方 —— 需要</strong>使用边偏移确定准确位置。</li>\n</ol>\n<h3 id=\"2-3-案例小结\"><a href=\"#2-3-案例小结\" class=\"headerlink\" title=\"2.3 案例小结\"></a>2.3 案例小结</h3><ol>\n<li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>，<strong>父元素</strong>使用<strong>相对定位</strong>；</li>\n<li><strong>与浮动的对比</strong>：<ul>\n<li><strong>绝对定位</strong>：脱标，<strong>利用边偏移指定准确位置</strong>；</li>\n<li><strong>浮动</strong>：脱标，不能指定准确位置，<strong>让多个块级元素在一行显示</strong>。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>课堂练习：模拟老师的随堂案例完成<strong>哈根达斯</strong>案例（5 分钟）。</p>\n</blockquote>\n<p>结构修改：</p>\n<pre><code class=\"html\">&lt;!-- 修改.box-bd里面的li标签内容，添加一个hot图标 --&gt;\n\n&lt;li&gt;\n     &lt;!-- 添加hot小图片 --&gt;\n    &lt;em&gt;\n        &lt;img src=&quot;images/hot.png&quot; alt=&quot;&quot;&gt;\n    &lt;/em&gt;\n    &lt;img src=&quot;images/pic.png&quot; alt=&quot;&quot;&gt;\n    &lt;h4&gt;\n        Think PHP 5.0 博客系统实战项目演练\n    &lt;/h4&gt;\n    &lt;div class=&quot;info&quot;&gt;\n        &lt;span&gt;高级&lt;/span&gt; • 1125人在学习\n    &lt;/div&gt;\n&lt;/li&gt;\n</code></pre>\n<p>样式修改：</p>\n<pre><code class=\"css\">.box-bd ul li &#123;\n    /* 子绝父相 */\n    /* 父元素相对定位 */\n    position: relative;\n    float: left;\n    width: 228px;\n    height: 270px;\n    background-color: #fff;\n    margin-right: 15px;\n    margin-bottom: 15px;\n   \n&#125;\n.box-bd ul li &gt; img &#123;\n    width: 100%;\n&#125;\n.box-bd ul li h4 &#123;\n    margin: 20px 20px 20px 25px;\n    font-size: 14px;\n    color: #050505;\n    font-weight: 400;\n&#125;\n.box-bd ul li em &#123;\n     /* 子元素绝对定位 */\n    position: absolute;\n    top: 4px;\n    right: -4px;\n&#125;\n</code></pre>\n<h2 id=\"3-定位-position-的应用\"><a href=\"#3-定位-position-的应用\" class=\"headerlink\" title=\"3. 定位(position)的应用\"></a>3. 定位(position)的应用</h2><h3 id=\"3-1-固定定位小技巧：-固定在版心左侧位置。\"><a href=\"#3-1-固定定位小技巧：-固定在版心左侧位置。\" class=\"headerlink\" title=\"3.1.  固定定位小技巧： 固定在版心左侧位置。\"></a>3.1.  固定定位小技巧： 固定在版心左侧位置。</h3><p>小算法：</p>\n<p>1.让固定定位的盒子 left: 50%.  走到浏览器可视区（也可以看做版心） 的一半位置。</p>\n<p>2.让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置</p>\n<p>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了。</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571388901848.png\" width=\"350\">\n\n\n\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571389108805.png\" width=\"300\">\n\n\n\n<p>案例效果：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571389241926.png\" class width=\"1571389241926\">\n\n<pre><code>&lt;style&gt;\n        .w &#123;\n            width: 800px;\n            height: 1400px;\n            background-color: pink;\n            margin: 0 auto;\n        &#125;\n        .fixed &#123;\n            position: fixed;\n            /* 1. 走浏览器宽度的一半 */\n            left: 50%;\n            /* 2. 利用margin 走版心盒子宽度的一半距离 */\n            margin-left: 405px;\n            width: 50px;\n            height: 150px;\n            background-color: skyblue;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;fixed&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;w&quot;&gt;版心盒子 800像素&lt;/div&gt;\n  \n&lt;/body&gt;\n</code></pre>\n<h3 id=\"3-2-堆叠顺序（z-index）\"><a href=\"#3-2-堆叠顺序（z-index）\" class=\"headerlink\" title=\"3.2. 堆叠顺序（z-index）\"></a>3.2. 堆叠顺序（z-index）</h3><ul>\n<li><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。此时，可以使用 <strong>z-index</strong> 来控制盒子的前后次序 (z轴)</p>\n</li>\n<li><p>语法：</p>\n<pre><code>选择器 &#123;     z-index: 1; &#125;\n</code></pre>\n</li>\n<li><p><code>z-index</code> 的特性如下：</p>\n<ol>\n<li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；    </li>\n<li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li>\n<li>数字后面<strong>不能加单位</strong>。</li>\n</ol>\n<p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p>\n</li>\n</ul>\n<ul>\n<li>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</li>\n</ul>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/12_zindex%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" class title=\"zindex示意图\">\n\n\n\n<blockquote>\n<p>案例演示：堆叠顺序。</p>\n</blockquote>\n<h2 id=\"4-定位-position-的拓展\"><a href=\"#4-定位-position-的拓展\" class=\"headerlink\" title=\"4. 定位(position)的拓展\"></a>4. 定位(position)的拓展</h2><h3 id=\"4-1-绝对定位的盒子居中\"><a href=\"#4-1-绝对定位的盒子居中\" class=\"headerlink\" title=\"4.1 绝对定位的盒子居中\"></a>4.1 绝对定位的盒子居中</h3><blockquote>\n<p><strong>注意</strong>：加了<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p>\n<p>但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p>\n</blockquote>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/10_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png\" class title=\"绝对定位水平居中\">\n\n<ol>\n<li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li>\n<li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li>\n</ol>\n<p><strong>盒子居中定位示意图</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/11_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" class title=\"绝对定位居中示意图\">\n\n<h3 id=\"4-2-定位特殊特性\"><a href=\"#4-2-定位特殊特性\" class=\"headerlink\" title=\"4.2 定位特殊特性\"></a>4.2 定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似。</p>\n<p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</p>\n<p>2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p>\n<p>前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p>\n<ul>\n<li>可以用inline-block  转换为行内块</li>\n<li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li>\n<li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li>\n</ul>\n<p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p>\n<h3 id=\"4-3-脱标的盒子不会触发外边距塌陷\"><a href=\"#4-3-脱标的盒子不会触发外边距塌陷\" class=\"headerlink\" title=\"4.3 脱标的盒子不会触发外边距塌陷\"></a>4.3 脱标的盒子不会触发外边距塌陷</h3><p>浮动元素、<strong>绝对定位(固定定位）</strong>元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p>\n<p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直<strong>外边距合并的问题</strong>了。</p>\n<h3 id=\"4-4-绝对定位（固定定位）会完全压住盒子\"><a href=\"#4-4-绝对定位（固定定位）会完全压住盒子\" class=\"headerlink\" title=\"4.4 绝对定位（固定定位）会完全压住盒子\"></a>4.4 绝对定位（固定定位）会完全压住盒子</h3><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p>\n<p>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p>\n<p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/文字环绕图片.png\">\n\n<h2 id=\"5-综合案例-淘宝轮播图-重点\"><a href=\"#5-综合案例-淘宝轮播图-重点\" class=\"headerlink\" title=\"5. 综合案例 - 淘宝轮播图(重点)\"></a>5. 综合案例 - 淘宝轮播图(重点)</h2><h3 id=\"5-1-效果图\"><a href=\"#5-1-效果图\" class=\"headerlink\" title=\"5.1 效果图\"></a>5.1 效果图</h3><img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/淘宝焦点图.png\" width=\"600\">\n\n<h3 id=\"5-2-布局分析\"><a href=\"#5-2-布局分析\" class=\"headerlink\" title=\"5.2 布局分析\"></a>5.2 布局分析</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571397019689.png\" class width=\"1571397019689\">\n\n\n\n<h3 id=\"5-3-步骤\"><a href=\"#5-3-步骤\" class=\"headerlink\" title=\"5.3 步骤\"></a>5.3 步骤</h3><ol>\n<li><p>大盒子我们类名为：  tb-promo      淘宝广告</p>\n</li>\n<li><p>里面先放一张图片。</p>\n</li>\n<li><p>左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   </p>\n<p>​    左按钮样式（border-radius：左上，右上，右下，左下），</p>\n<p>​    右按钮定位，提取左右按钮共同的样式代码（并集选择器）</p>\n</li>\n<li><p>底侧小圆点ul 继续做。 类名为 promo-nav     </p>\n<p>​    中间长方形椭圆 ul的定位（水平居中，离底部15px）  </p>\n<p>​    长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式</p>\n</li>\n</ol>\n<h3 id=\"5-4-知识点：圆角矩形设置4个角\"><a href=\"#5-4-知识点：圆角矩形设置4个角\" class=\"headerlink\" title=\"5.4 知识点：圆角矩形设置4个角\"></a>5.4 知识点：圆角矩形设置4个角</h3><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p>\n<pre><code>border-top-left-radius:20px;border-top-right-radius:20px;border-bottom-right-radius:20px;border-bottom-left-radius:20px;\n</code></pre>\n<ul>\n<li><p>如果4个角，数值相同</p>\n<pre><code class=\"css\">border-radius: 15px;\n</code></pre>\n</li>\n<li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p>\n</li>\n</ul>\n<pre><code class=\"css\">border-radius: 左上角 右上角  右下角  左下角;\n</code></pre>\n<p>还是遵循的顺时针。</p>\n<h3 id=\"5-5-代码参考\"><a href=\"#5-5-代码参考\" class=\"headerlink\" title=\"5.5 代码参考\"></a>5.5 代码参考</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;淘宝轮播图做法&lt;/title&gt;\n    &lt;style&gt;\n        * &#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        li &#123;\n            list-style: none;\n        &#125;\n\n        .tb-promo &#123;\n            position: relative;\n            width: 520px;\n            height: 280px;\n            background-color: pink;\n            margin: 100px auto;\n        &#125;\n\n        .tb-promo img &#123;\n            width: 520px;\n            height: 280px;\n        &#125;\n\n        /* 并集选择器可以集体声明相同的样式 */\n        .prev,\n        .next &#123;\n            position: absolute;\n            /* 绝对定位的盒子垂直居中 */\n            top: 50%;\n            margin-top: -15px;\n            /* 加了绝对定位的盒子可以直接设置高度和宽度 */\n            width: 20px;\n            height: 30px;\n            background: rgba(0, 0, 0, .3);\n            text-align: center;\n            line-height: 30px;\n            color: #fff;\n            text-decoration: none;\n        &#125;\n\n        .prev &#123;\n            left: 0;\n            /* border-radius: 15px; */\n            border-top-right-radius: 15px;\n            border-bottom-right-radius: 15px;\n        &#125;\n\n        .next &#123;\n            /* 如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top */\n            right: 0;\n            /* border-radius: 15px; */\n            border-top-left-radius: 15px;\n            border-bottom-left-radius: 15px;\n        &#125;\n        .promo-nav &#123;\n            position: absolute;\n            bottom: 15px;\n            left: 50%;\n            margin-left: -35px;\n            width: 70px;\n            height: 13px;\n            /* background-color: pink; */\n            background: rgba(255,255,255, .3);\n            border-radius: 7px;\n        &#125;\n        .promo-nav li &#123;\n            float: left;\n            width: 8px;\n            height: 8px;\n            background-color: #fff;\n            border-radius: 50%;\n            margin: 3px;\n        &#125;\n        /* 不要忘记选择器权重的问题 */\n       .promo-nav .selected &#123;\n            background-color: #ff5000;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;tb-promo&quot;&gt;\n        &lt;img src=&quot;images/tb.jpg&quot; alt=&quot;&quot;&gt;\n        &lt;!-- 左侧按钮箭头 --&gt;\n        &lt;a href=&quot;#&quot; class=&quot;prev&quot;&gt; &amp;lt; &lt;/a&gt;\n        &lt;!-- 右侧按钮箭头 --&gt;\n        &lt;a href=&quot;#&quot; class=&quot;next&quot;&gt; &amp;gt; &lt;/a&gt;\n        &lt;!-- 小圆点 --&gt;\n        &lt;ul class=&quot;promo-nav&quot;&gt;\n            &lt;li class=&quot;selected&quot;&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"6-网页布局总结\"><a href=\"#6-网页布局总结\" class=\"headerlink\" title=\"6. 网页布局总结\"></a>6. 网页布局总结</h2><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p>\n<p>通过CSS浮动、定位 可以让每个盒子排列成为网页。</p>\n<p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>\n<h3 id=\"6-1-标准流\"><a href=\"#6-1-标准流\" class=\"headerlink\" title=\"6.1. 标准流\"></a>6.1. 标准流</h3><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局</strong>。</p>\n<h3 id=\"6-2-浮动\"><a href=\"#6-2-浮动\" class=\"headerlink\" title=\"6.2. 浮动\"></a>6.2. 浮动</h3><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局</strong></p>\n<h3 id=\"6-3-定位\"><a href=\"#6-3-定位\" class=\"headerlink\" title=\"6.3. 定位\"></a>6.3. 定位</h3><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。<strong>如果元素自由在某个盒子内移动就用定位布局。</strong></p>\n<h2 id=\"7-元素的显示与隐藏\"><a href=\"#7-元素的显示与隐藏\" class=\"headerlink\" title=\"7. 元素的显示与隐藏\"></a>7. 元素的显示与隐藏</h2><ul>\n<li><p>目的（本质）</p>\n<p>​    让一个元素在页面中消失或者显示出来</p>\n</li>\n<li><p>场景</p>\n<p>​    类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p>\n</li>\n</ul>\n<h3 id=\"7-1-display-显示（重点）\"><a href=\"#7-1-display-显示（重点）\" class=\"headerlink\" title=\"7.1. display 显示（重点）\"></a>7.1. display 显示（重点）</h3><ul>\n<li><p>display 设置或检索对象是否及如何显示。</p>\n<pre><code>display: none 隐藏对象display：block 除了转换为块级元素之外，同时还有显示元素的意思。\n</code></pre>\n</li>\n<li><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p>\n</li>\n<li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：</p>\n<blockquote>\n<p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p>\n</blockquote>\n</li>\n</ul>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/29none.png\">\n\n<blockquote>\n</blockquote>\n<h3 id=\"7-2-visibility-可见性-（了解）\"><a href=\"#7-2-visibility-可见性-（了解）\" class=\"headerlink\" title=\"7.2. visibility 可见性 （了解）\"></a>7.2. visibility 可见性 （了解）</h3><ul>\n<li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p>\n<pre><code>visibility：visible ; 　元素可视visibility：hidden; 　  元素隐藏\n</code></pre>\n</li>\n<li><p>特点：<strong>visibility 隐藏元素后，继续占有原来的位置</strong>。（停职留薪）</p>\n</li>\n<li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p>\n</li>\n<li><p>如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）</p>\n</li>\n</ul>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/30visibility.png\">\n\n<h3 id=\"7-3-overflow-溢出（重点）\"><a href=\"#7-3-overflow-溢出（重点）\" class=\"headerlink\" title=\"7.3. overflow 溢出（重点）\"></a>7.3. overflow 溢出（重点）</h3><ul>\n<li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>visible</strong></td>\n<td>不剪切内容也不添加滚动条</td>\n</tr>\n<tr>\n<td><strong>hidden</strong></td>\n<td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>\n</tr>\n<tr>\n<td><strong>scroll</strong></td>\n<td>不管超出内容否，总是显示滚动条</td>\n</tr>\n<tr>\n<td><strong>auto</strong></td>\n<td>超出自动显示滚动条，不超出不显示滚动条</td>\n</tr>\n</tbody></table>\n<ul>\n<li> 一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</li>\n<li> 但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。</li>\n</ul>\n<img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/33overflow.png\">\n\n\n\n<ul>\n<li>实际开发场景：</li>\n</ul>\n<ol>\n<li>清除浮动</li>\n<li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li>\n</ol>\n<h3 id=\"7-4-显示与隐藏总结\"><a href=\"#7-4-显示与隐藏总结\" class=\"headerlink\" title=\"7.4. 显示与隐藏总结\"></a>7.4. 显示与隐藏总结</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>区别</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>display 显示     （重点）</strong></td>\n<td>隐藏对象，不保留位置</td>\n<td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td>\n</tr>\n<tr>\n<td><strong>visibility 可见性 （了解）</strong></td>\n<td>隐藏对象，保留位置</td>\n<td>使用较少</td>\n</tr>\n<tr>\n<td><strong>overflow 溢出（重点）</strong></td>\n<td>只是隐藏超出大小的部分</td>\n<td>1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-综合案例：土豆网鼠标经过显示遮罩\"><a href=\"#8-综合案例：土豆网鼠标经过显示遮罩\" class=\"headerlink\" title=\"8 综合案例：土豆网鼠标经过显示遮罩\"></a>8 综合案例：土豆网鼠标经过显示遮罩</h2><h3 id=\"8-1-效果图\"><a href=\"#8-1-效果图\" class=\"headerlink\" title=\"8.1. 效果图\"></a>8.1. 效果图</h3><img src=\"/sixofspace/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/土豆网案例.png\">\n\n<h3 id=\"8-2-案例目标\"><a href=\"#8-2-案例目标\" class=\"headerlink\" title=\"8.2. 案例目标\"></a>8.2. 案例目标</h3><p>1.练习元素的显示与隐藏</p>\n<p>2.练习元素的定位</p>\n<h3 id=\"8-3-核心原理\"><a href=\"#8-3-核心原理\" class=\"headerlink\" title=\"8.3. 核心原理\"></a>8.3. 核心原理</h3><p>原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</p>\n<p>遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。</p>\n<h3 id=\"8-4-代码参考\"><a href=\"#8-4-代码参考\" class=\"headerlink\" title=\"8.4. 代码参考\"></a>8.4. 代码参考</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;仿土豆网显示隐藏遮罩案例&lt;/title&gt;\n    &lt;style&gt;\n        .tudou &#123;\n            position: relative;\n            width: 444px;\n            height: 320px;\n            background-color: pink;\n            margin: 30px auto;\n        &#125;\n\n        .tudou img &#123;\n            width: 100%;\n            height: 100%;\n        &#125;\n\n        .mask &#123;\n            /* 隐藏遮罩层 */\n            display: none;\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, .4) url(images/arr.png) no-repeat center;\n        &#125;\n\n        /* 当我们鼠标经过了 土豆这个盒子，就让里面遮罩层显示出来 */\n        .tudou:hover .mask &#123;\n            /* 而是显示元素 */\n            display: block;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;tudou&quot;&gt;\n        &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;\n        &lt;img src=&quot;images/tudou.jpg&quot; alt=&quot;&quot;&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h1 id=\"CSS高阶技巧\"><a href=\"#CSS高阶技巧\" class=\"headerlink\" title=\"CSS高阶技巧\"></a>CSS高阶技巧</h1><h2 id=\"1-精灵图（重点）\"><a href=\"#1-精灵图（重点）\" class=\"headerlink\" title=\"1. 精灵图（重点）\"></a>1. 精灵图（重点）</h2><h3 id=\"1-1-为什么需要精灵图\"><a href=\"#1-1-为什么需要精灵图\" class=\"headerlink\" title=\"1.1 为什么需要精灵图\"></a>1.1 为什么需要精灵图</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571482435259.png\" class width=\"1571482435259\">\n\n<p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>\n<p><strong>为什么使用精灵图（目的）：</strong></p>\n<p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p>\n<p><strong>核心原理</strong>：</p>\n<p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p>\n<p><strong>精灵图举例</strong>:</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519067073.png\" class width=\"1571519067073\">\n\n<h3 id=\"1-2-精灵图（sprites）的使用\"><a href=\"#1-2-精灵图（sprites）的使用\" class=\"headerlink\" title=\"1.2 精灵图（sprites）的使用\"></a>1.2 精灵图（sprites）的使用</h3><p>使用精灵图核心：</p>\n<ol>\n<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li>\n<li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li>\n<li>移动背景图片位置， 此时可以使用 background-position 。</li>\n<li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>\n<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>\n<li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>\n</ol>\n<p>使用精灵图核心总结：</p>\n<ol>\n<li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p>\n</li>\n<li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p>\n</li>\n<li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p>\n</li>\n</ol>\n<h3 id=\"1-3-案例：拼出自己名字\"><a href=\"#1-3-案例：拼出自己名字\" class=\"headerlink\" title=\"1.3 案例：拼出自己名字\"></a>1.3 案例：拼出自己名字</h3><h4 id=\"1-3-1-案例效果\"><a href=\"#1-3-1-案例效果\" class=\"headerlink\" title=\"1.3.1 案例效果\"></a>1.3.1 案例效果</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519368229.png\" class width=\"1571519368229\">\n\n<h4 id=\"1-3-2-代码参考\"><a href=\"#1-3-2-代码参考\" class=\"headerlink\" title=\"1.3.2 代码参考\"></a>1.3.2 代码参考</h4><p>结构</p>\n<pre><code class=\"html\">&lt;span class=&quot;p&quot;&gt;p&lt;/span&gt;\n&lt;span class=&quot;i&quot;&gt;i&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt;\n</code></pre>\n<p>样式</p>\n<pre><code class=\"css\">span &#123;\n    display: inline-block;\n    background: url(images/abcd.jpg) no-repeat;\n&#125;\n.p &#123;\n    width: 100px;\n    height: 112px;\n    /* background-color: pink; */\n    background-position:  -493px -276px;\n&#125;\n.i &#123;\n    width: 60px;\n    height: 108px;\n    /* background-color: pink; */\n    background-position: -327px -142px;\n&#125;\n.n &#123;\n    width: 108px;\n    height: 109px;\n    /* background-color: pink; */\n    background-position: -215px -141px;\n&#125;\n.k &#123;\n    width: 105px;\n    height: 114px;\n    /* background-color: pink; */\n    background-position: -495px -142px;\n&#125;\n</code></pre>\n<h2 id=\"2-字体图标\"><a href=\"#2-字体图标\" class=\"headerlink\" title=\"2. 字体图标\"></a>2. 字体图标</h2><h3 id=\"2-1-字体图标的产生\"><a href=\"#2-1-字体图标的产生\" class=\"headerlink\" title=\"2.1 字体图标的产生\"></a>2.1 字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p>\n<p>精灵图是有诸多优点的，但是缺点很明显。</p>\n<p>1.图片文件还是比较大的。</p>\n<p>2.图片本身放大和缩小会失真。</p>\n<p>3.一旦图片制作完毕想要更换非常复杂。</p>\n<p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p>\n<p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p>\n<h3 id=\"2-2-字体图标的优点\"><a href=\"#2-2-字体图标的优点\" class=\"headerlink\" title=\"2.2 字体图标的优点\"></a>2.2 字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p>\n<ul>\n<li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li>\n<li>兼容性：几乎支持所有的浏览器，请放心使用</li>\n<li>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</li>\n</ul>\n<p><strong>总结：</strong></p>\n<p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519724473.png\" class width=\"1571519724473\"></p>\n<p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571519739775.png\" class width=\"1571519739775\">\n\n\n\n<p><strong>使用步骤</strong></p>\n<p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p>\n<p>1.字体图标的下载 </p>\n<p>2.字体图标的引入 （引入到我们html页面中）</p>\n<p>3.字体图标的追加 （以后添加新的小图标）</p>\n<h3 id=\"2-3-字体图标的下载\"><a href=\"#2-3-字体图标的下载\" class=\"headerlink\" title=\"2.3 字体图标的下载\"></a><strong>2.3</strong> <strong>字体图标的下载</strong></h3><p><strong>推荐下载网站：</strong></p>\n<ul>\n<li><strong>icomoon</strong> <strong>字库</strong>  <a href=\"http://icomoon.io/\">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li>\n</ul>\n<p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>\n<ul>\n<li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li>\n</ul>\n<p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p>\n<h3 id=\"2-4-字体图标的引入\"><a href=\"#2-4-字体图标的引入\" class=\"headerlink\" title=\"2.4 字体图标的引入\"></a><strong>2.4</strong> <strong>字体图标的引入</strong></h3><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p>\n<ol>\n<li>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520092646.png\" class width=\"1571520092646\">\n\n\n\n<ul>\n<li><strong>字体文件格式</strong></li>\n</ul>\n<p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>\n<p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>\n<p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>\n<p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p>\n<p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>\n<p>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。</p>\n<p>一定注意字体文件路径的问题</p>\n<pre><code> @font-face &#123;\n   font-family: &#39;icomoon&#39;;\n   src:  url(&#39;fonts/icomoon.eot?7kkyc2&#39;);\n   src:  url(&#39;fonts/icomoon.eot?7kkyc2#iefix&#39;) format(&#39;embedded-opentype&#39;),\n     url(&#39;fonts/icomoon.ttf?7kkyc2&#39;) format(&#39;truetype&#39;),\n     url(&#39;fonts/icomoon.woff?7kkyc2&#39;) format(&#39;woff&#39;),\n     url(&#39;fonts/icomoon.svg?7kkyc2#icomoon&#39;) format(&#39;svg&#39;);\n   font-weight: normal;\n   font-style: normal;\n &#125;\n</code></pre>\n<ol start=\"3\">\n<li>html 标签内添加小图标。</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520411345.png\" class width=\"1571520411345\">\n\n<ol start=\"4\">\n<li>给标签定义字体。</li>\n</ol>\n<pre><code> span &#123;\n font-family: &quot;icomoon&quot;;\n &#125;\n</code></pre>\n<p>  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 </p>\n  <img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520485350.png\" class width=\"1571520485350\">\n\n<h3 id=\"2-5-字体图标的追加\"><a href=\"#2-5-字体图标的追加\" class=\"headerlink\" title=\"2.5 字体图标的追加\"></a>2.5 字体图标的追加</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>\n<p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520554317.png\" class width=\"1571520554317\">\n\n<h3 id=\"2-6-字体图标加载的原理：\"><a href=\"#2-6-字体图标加载的原理：\" class=\"headerlink\" title=\"2.6 字体图标加载的原理：\"></a>2.6 字体图标加载的原理：</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86.gif\" class width=\"1571520617270\">\n\n<h2 id=\"3-CSS-三角\"><a href=\"#3-CSS-三角\" class=\"headerlink\" title=\"3. CSS 三角\"></a>3. CSS 三角</h2><h3 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h3><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>\n<p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571520965966.png\" class width=\"1571520965966\">\n\n<pre><code class=\"css\"> div &#123;\n     width: 0; \n    height: 0;\n    border: 50px solid transparent;\n    border-color: red green blue black;\n    line-height:0;\n    font-size: 0;\n &#125;\n</code></pre>\n<ol>\n<li>我们用css 边框可以模拟三角效果</li>\n<li>宽度高度为0</li>\n<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>\n<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>\n</ol>\n<h3 id=\"3-2-案例：京东三角\"><a href=\"#3-2-案例：京东三角\" class=\"headerlink\" title=\"3.2 案例：京东三角\"></a>3.2 案例：京东三角</h3><h4 id=\"3-2-1效果图\"><a href=\"#3-2-1效果图\" class=\"headerlink\" title=\"3.2.1效果图\"></a>3.2.1效果图</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571521183026.png\" class width=\"1571521183026\">\n\n<h4 id=\"3-2-2-代码参考\"><a href=\"#3-2-2-代码参考\" class=\"headerlink\" title=\"3.2.2 代码参考\"></a>3.2.2 代码参考</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;CSS 三角制作&lt;/title&gt;\n    &lt;style&gt;\n        .box1 &#123;\n            width: 0;\n            height: 0;\n            /* border: 10px solid pink; */\n            border-top: 10px solid pink;\n            border-right: 10px solid red;\n            border-bottom: 10px solid blue;\n            border-left: 10px solid green;\n        &#125;\n        .box2 &#123;\n            width: 0;\n            height: 0;\n            border: 50px solid transparent;\n            border-left-color: pink;\n            margin: 100px auto;\n        &#125;\n        .jd &#123;\n            position: relative;\n            width: 120px;\n            height: 249px;\n            background-color: pink;\n        &#125;\n        .jd span &#123;\n            position: absolute;\n            right: 15px;\n            top: -10px;\n            width: 0;\n            height: 0;\n            /* 为了照顾兼容性 */\n            line-height: 0;  \n            font-size: 0;\n            border: 5px solid transparent;\n            border-bottom-color: pink;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;jd&quot;&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"4-CSS-用户界面样式\"><a href=\"#4-CSS-用户界面样式\" class=\"headerlink\" title=\"4. CSS 用户界面样式\"></a>4. CSS 用户界面样式</h2><p><strong>什么是界面样式</strong></p>\n<p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>\n<ul>\n<li>更改用户的鼠标样式 </li>\n<li>表单轮廓</li>\n<li>防止表单域拖拽</li>\n</ul>\n<h3 id=\"4-1-鼠标样式-cursor\"><a href=\"#4-1-鼠标样式-cursor\" class=\"headerlink\" title=\"4.1 鼠标样式 cursor\"></a>4.1 鼠标样式 cursor</h3><pre><code class=\"css\"> li &#123;\n     cursor: pointer; \n &#125;\n</code></pre>\n<p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571521805183.png\" class width=\"1571521805183\">\n\n<h3 id=\"4-2-轮廓线-outline\"><a href=\"#4-2-轮廓线-outline\" class=\"headerlink\" title=\"4.2 轮廓线 outline\"></a>4.2 轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p>\n<pre><code class=\"css\"> input &#123;\n     outline: none; \n &#125;\n</code></pre>\n<h3 id=\"4-3-防止拖拽文本域-resize\"><a href=\"#4-3-防止拖拽文本域-resize\" class=\"headerlink\" title=\"4.3 防止拖拽文本域 resize\"></a>4.3 防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p>\n<pre><code class=\"css\"> textarea&#123;      resize: none; &#125;\n</code></pre>\n<p>vertical-align 属性应用</p>\n<h2 id=\"5-vertical-align-属性应用\"><a href=\"#5-vertical-align-属性应用\" class=\"headerlink\" title=\"5. vertical-align 属性应用\"></a>5. vertical-align 属性应用</h2><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>\n<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>\n<p>语法：</p>\n<pre><code class=\"css\">vertical-align : baseline | top | middle | bottom \n</code></pre>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522023413.png\" class width=\"1571522023413\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522040645.png\" class width=\"1571522040645\">\n\n<h3 id=\"5-1-图片、表单和文字对齐\"><a href=\"#5-1-图片、表单和文字对齐\" class=\"headerlink\" title=\"5.1 图片、表单和文字对齐\"></a><strong>5.1</strong> <strong>图片、表单和文字对齐</strong></h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522093729.png\" class width=\"1571522093729\">\n\n<p>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p>\n<h3 id=\"5-2-解决图片底部默认空白缝隙问题\"><a href=\"#5-2-解决图片底部默认空白缝隙问题\" class=\"headerlink\" title=\"5.2 解决图片底部默认空白缝隙问题\"></a>5.2 解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>\n<p>主要解决方法有两种：</p>\n<p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p>\n<p>2.把图片转换为块级元素  <strong>display: block</strong>; </p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522162225.png\" class width=\"1571522162225\">\n\n\n\n<h2 id=\"6-溢出的文字省略号显示\"><a href=\"#6-溢出的文字省略号显示\" class=\"headerlink\" title=\"6. 溢出的文字省略号显示\"></a>6. 溢出的文字省略号显示</h2><h3 id=\"6-1-单行文本溢出显示省略号\"><a href=\"#6-1-单行文本溢出显示省略号\" class=\"headerlink\" title=\"6.1 单行文本溢出显示省略号\"></a>6.1 单行文本溢出显示省略号</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522317809.png\" class width=\"1571522317809\">\n\n<p>单行文本溢出显示省略号–必须满足三个条件：</p>\n<pre><code class=\"css\">  /*1. 先强制一行内显示文本*/\n   white-space: nowrap;  （ 默认 normal 自动换行）\n   \n  /*2. 超出的部分隐藏*/\n   overflow: hidden;\n   \n  /*3. 文字用省略号替代超出的部分*/\n   text-overflow: ellipsis;\n</code></pre>\n<h3 id=\"6-2-多行文本溢出显示省略号（了解）\"><a href=\"#6-2-多行文本溢出显示省略号（了解）\" class=\"headerlink\" title=\"6.2 多行文本溢出显示省略号（了解）\"></a>6.2 多行文本溢出显示省略号（了解）</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522334591.png\" class width=\"1571522334591\">\n\n\n\n<p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p>\n<pre><code class=\"css\">/*1. 超出的部分隐藏 */\noverflow: hidden;\n\n/*2. 文字用省略号替代超出的部分 */\ntext-overflow: ellipsis;\n\n/* 3. 弹性伸缩盒子模型显示 */\ndisplay: -webkit-box;\n\n/* 4. 限制在一个块元素显示的文本的行数 */\n-webkit-line-clamp: 2;\n\n/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */\n-webkit-box-orient: vertical;\n</code></pre>\n<p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p>\n<h2 id=\"7-常见布局技巧\"><a href=\"#7-常见布局技巧\" class=\"headerlink\" title=\"7. 常见布局技巧\"></a>7. 常见布局技巧</h2><p><strong>巧妙利用一个技术更快更好的布局：</strong></p>\n<ol>\n<li>margin负值的运用</li>\n<li>文字围绕浮动元素</li>\n<li>行内块的巧妙运用</li>\n<li>CSS三角强化</li>\n</ol>\n<h3 id=\"7-1-margin负值运用\"><a href=\"#7-1-margin负值运用\" class=\"headerlink\" title=\"7.1. margin负值运用\"></a>7.1. margin负值运用</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522666082.png\" class width=\"1571522666082\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522683897.png\" class width=\"1571522683897\">\n\n<p>1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</p>\n<p>2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）</p>\n<h3 id=\"7-2-文字围绕浮动元素\"><a href=\"#7-2-文字围绕浮动元素\" class=\"headerlink\" title=\"7.2 文字围绕浮动元素\"></a>7.2 文字围绕浮动元素</h3><p><strong>效果</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522777745.png\" class width=\"1571522777745\">\n\n<p><strong>布局示意图</strong></p>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522761996.png\" class width=\"1571522761996\">\n\n<p><strong>巧妙运用浮动元素不会压住文字的特性</strong></p>\n<h3 id=\"7-3-行内块巧妙运用\"><a href=\"#7-3-行内块巧妙运用\" class=\"headerlink\" title=\"7.3 行内块巧妙运用\"></a>7.3 行内块巧妙运用</h3><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522898744.png\" class width=\"1571522898744\">\n\n<p>页码在页面中间显示:</p>\n<ol>\n<li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li>\n<li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>\n</ol>\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571522910580.png\" class width=\"1571522910580\">\n\n<h3 id=\"7-4-CSS-三角强化-案例\"><a href=\"#7-4-CSS-三角强化-案例\" class=\"headerlink\" title=\"7.4. CSS 三角强化 案例\"></a>7.4. CSS 三角强化 案例</h3><h4 id=\"7-4-1-原理\"><a href=\"#7-4-1-原理\" class=\"headerlink\" title=\"7.4.1 原理\"></a><strong>7.4.1 原理</strong></h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571550959181.png\" class width=\"1571550959181\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571551000391.png\" class width=\"1571551000391\">\n\n<img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571548058053.png\" class width=\"1571548058053\">\n\n\n\n<pre><code class=\"html\">&lt;style&gt;\n    .box1 &#123;\n        width: 0;\n        height: 0;\n        \n        /* 把上边框宽度调大 */\n        /* border-top: 100px solid transparent;\n        border-right: 50px solid skyblue; */\n        /* 左边和下边的边框宽度设置为0 */\n        /* border-bottom: 0 solid blue;\n        border-left: 0 solid green; */\n        \n        /* 1.只保留右边的边框有颜色 */\n        border-color: transparent red transparent transparent;\n        /* 2. 样式都是solid */\n        border-style: solid;\n        /* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */\n        border-width: 100px 50px 0 0 ;\n    &#125;\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"7-4-2-案例效果\"><a href=\"#7-4-2-案例效果\" class=\"headerlink\" title=\"7.4.2 案例效果\"></a>7.4.2 案例效果</h4><img src=\"/sixofspace/2021/05/19/css%E5%9F%BA%E7%A1%80/1571548099631.png\" class width=\"1571548099631\">\n\n<h4 id=\"7-4-3-代码参考\"><a href=\"#7-4-3-代码参考\" class=\"headerlink\" title=\"7.4.3 代码参考\"></a><strong>7.4.3 代码参考</strong></h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n        &lt;title&gt;CSS三角强化的巧妙运用&lt;/title&gt;\n        &lt;style&gt;\n            .price &#123;\n                width: 160px;\n                height: 24px;\n                line-height: 24px;\n                border: 1px solid red;\n                margin: 0 auto;\n            &#125;\n            .miaosha &#123;\n                position: relative;\n                float: left;\n                width: 90px;\n                height: 100%;\n                background-color:red;\n                text-align: center;\n                color: #fff;\n                font-weight: 700;\n                margin-right: 8px;\n\n            &#125;\n            .miaosha i &#123;\n                position: absolute;\n                right: 0;\n                top: 0;\n                width: 0;\n                height: 0;\n                border-color: transparent #fff transparent transparent;\n                border-style: solid;\n                border-width: 24px 10px 0 0;\n            &#125;\n            .origin &#123;\n                font-size: 12px;\n                color: gray;\n                text-decoration: line-through;\n            &#125;\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;price&quot;&gt;\n            &lt;span class=&quot;miaosha&quot;&gt;\n                ¥1650\n                &lt;i&gt;&lt;/i&gt;\n            &lt;/span&gt;\n            &lt;span class=&quot;origin&quot;&gt;¥5650&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"8-CSS-初始化\"><a href=\"#8-CSS-初始化\" class=\"headerlink\" title=\"8. CSS 初始化\"></a>8. CSS 初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化</p>\n<p>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p>\n<p>每个网页都必须首先进行 CSS初始化。</p>\n<p>这里我们以 京东CSS初始化代码为例。</p>\n<p><strong>Unicode编码字体：</strong></p>\n<p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p>\n<p>比如：</p>\n<p>黑体 \\9ED1\\4F53<br>宋体 \\5B8B\\4F53<br>微软雅黑 \\5FAE\\8F6F\\96C5\\9ED1</p>\n"}],"PostAsset":[{"_id":"source/_posts/html基础/列表总结.png","slug":"列表总结.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/图片属性.png","slug":"图片属性.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/基本结构.png","slug":"基本结构.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/格式化标签.png","slug":"格式化标签.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/浏览器内核.png","slug":"浏览器内核.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/特殊字符.png","slug":"特殊字符.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/表单其他属性.png","slug":"表单其他属性.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/表单常用属性.png","slug":"表单常用属性.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/表单标签.png","slug":"表单标签.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/html基础/路径.png","slug":"路径.png","post":"ckov2oomm00039wrc1pu1ed7i","modified":0,"renderable":0},{"_id":"source/_posts/css基础/01.png","slug":"01.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/01_定位示例1.gif","slug":"01_定位示例1.gif","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/02.png","slug":"02.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/03.png","slug":"03.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/04.png","slug":"04.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/04_相对定位案例.png","slug":"04_相对定位案例.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/05.png","slug":"05.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/05_绝对定位_父级无定位.png","slug":"05_绝对定位_父级无定位.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/06.png","slug":"06.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/06_绝对定位_父级有定位.png","slug":"06_绝对定位_父级有定位.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/07_子绝父相截图.png","slug":"07_子绝父相截图.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/08_固定定位案例.png","slug":"08_固定定位案例.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1.png","slug":"1.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/10_绝对定位水平居中.png","slug":"10_绝对定位水平居中.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/11_绝对定位居中示意图.png","slug":"11_绝对定位居中示意图.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/12_zindex示意图.png","slug":"12_zindex示意图.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570868845786.png","slug":"1570868845786.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570868891669.png","slug":"1570868891669.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570868930472.png","slug":"1570868930472.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570870368253.png","slug":"1570870368253.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570870387089.png","slug":"1570870387089.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570870718415.png","slug":"1570870718415.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886137899.png","slug":"1570886137899.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886176292.png","slug":"1570886176292.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886322557.png","slug":"1570886322557.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886362813.png","slug":"1570886362813.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886648887.png","slug":"1570886648887.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886688306.png","slug":"1570886688306.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570886973530.png","slug":"1570886973530.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570887034135.png","slug":"1570887034135.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570887652404.png","slug":"1570887652404.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570887699177.png","slug":"1570887699177.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570887809455.png","slug":"1570887809455.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570887978061.png","slug":"1570887978061.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1570888283511.png","slug":"1570888283511.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571299959992.png","slug":"1571299959992.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571300150618.png","slug":"1571300150618.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571300529539.png","slug":"1571300529539.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571301270696.png","slug":"1571301270696.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571301357818.png","slug":"1571301357818.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571302032310.png","slug":"1571302032310.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571302286467.png","slug":"1571302286467.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571303715362.png","slug":"1571303715362.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571304358699.png","slug":"1571304358699.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571305757590.png","slug":"1571305757590.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571307430101.png","slug":"1571307430101.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571314623135.png","slug":"1571314623135.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571314874385.png","slug":"1571314874385.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571385860679.png","slug":"1571385860679.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571388901848.png","slug":"1571388901848.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571389108805.png","slug":"1571389108805.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571389241926.png","slug":"1571389241926.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571397019689.png","slug":"1571397019689.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571482435259.png","slug":"1571482435259.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571490015544.png","slug":"1571490015544.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571490049279.png","slug":"1571490049279.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571490129794.png","slug":"1571490129794.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571492334739.png","slug":"1571492334739.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571492536942.png","slug":"1571492536942.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571492659260.png","slug":"1571492659260.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571493260536.png","slug":"1571493260536.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571493298248.png","slug":"1571493298248.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571493741272.png","slug":"1571493741272.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571494239103.png","slug":"1571494239103.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571494373778.png","slug":"1571494373778.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571519067073.png","slug":"1571519067073.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571519368229.png","slug":"1571519368229.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571519724473.png","slug":"1571519724473.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571519739775.png","slug":"1571519739775.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571520092646.png","slug":"1571520092646.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571520411345.png","slug":"1571520411345.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571520485350.png","slug":"1571520485350.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571520554317.png","slug":"1571520554317.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571520965966.png","slug":"1571520965966.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571521183026.png","slug":"1571521183026.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571521805183.png","slug":"1571521805183.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522023413.png","slug":"1571522023413.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522040645.png","slug":"1571522040645.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522093729.png","slug":"1571522093729.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522162225.png","slug":"1571522162225.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522317809.png","slug":"1571522317809.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522334591.png","slug":"1571522334591.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522666082.png","slug":"1571522666082.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522683897.png","slug":"1571522683897.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522761996.png","slug":"1571522761996.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522777745.png","slug":"1571522777745.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522898744.png","slug":"1571522898744.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571522910580.png","slug":"1571522910580.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571541874805.png","slug":"1571541874805.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571541954222.png","slug":"1571541954222.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571543209934.png","slug":"1571543209934.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571544664994.png","slug":"1571544664994.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571544725757.png","slug":"1571544725757.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571544991989.png","slug":"1571544991989.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571548058053.png","slug":"1571548058053.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571548099631.png","slug":"1571548099631.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571550959181.png","slug":"1571550959181.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571551000391.png","slug":"1571551000391.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571555883628.png","slug":"1571555883628.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571555980419.png","slug":"1571555980419.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/1571556500074.png","slug":"1571556500074.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/2.png","slug":"2.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/26定位的概念.png","slug":"26定位的概念.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/27子绝父相.png","slug":"27子绝父相.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/29none.png","slug":"29none.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/3.png","slug":"3.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/30visibility.png","slug":"30visibility.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/33overflow.png","slug":"33overflow.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/4.png","slug":"4.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/5.png","slug":"5.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/6.png","slug":"6.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/css属性规则.png","slug":"css属性规则.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/css引入方式总结.png","slug":"css引入方式总结.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/ding.png","slug":"ding.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/id与类名的区别.png","slug":"id与类名的区别.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/sample1.gif","slug":"sample1.gif","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/修饰文本.png","slug":"修饰文本.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/土豆网案例.png","slug":"土豆网案例.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/基础选择器总结.png","slug":"基础选择器总结.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/字体图标加载的原理.gif","slug":"字体图标加载的原理.gif","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/字体总结.png","slug":"字体总结.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/字体粗细.png","slug":"字体粗细.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/对齐文本.png","slug":"对齐文本.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/小鸟.png","slug":"小鸟.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/文字倾斜.png","slug":"文字倾斜.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/文字环绕图片.png","slug":"文字环绕图片.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/文本缩进.png","slug":"文本缩进.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/淘宝焦点图.png","slug":"淘宝焦点图.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/淘宝网多类名.png","slug":"淘宝网多类名.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/谷歌调试工具.png","slug":"谷歌调试工具.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0},{"_id":"source/_posts/css基础/颜色值.png","slug":"颜色值.png","post":"ckov2oonu000a9wrc89y21kab","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckov2oomk00029wrcfghce4z1","category_id":"ckov2oomo00049wrc02qz52ao","_id":"ckov2ooms00089wrc54ic0a51"},{"post_id":"ckov2oomm00039wrc1pu1ed7i","category_id":"ckov2oomr00069wrc7r33027c","_id":"ckov2ooms00099wrcb6wpbpxr"}],"PostTag":[{"post_id":"ckov2oomk00029wrcfghce4z1","tag_id":"ckov2oomq00059wrc4k99eqyq","_id":"ckov2oomr00079wrcf5g12x4x"}],"Tag":[{"name":"hexo","_id":"ckov2oomq00059wrc4k99eqyq"}]}}